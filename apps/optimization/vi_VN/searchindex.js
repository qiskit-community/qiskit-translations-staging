Search.setIndex({"docnames": ["apidocs/qiskit_optimization", "apidocs/qiskit_optimization.algorithms", "apidocs/qiskit_optimization.applications", "apidocs/qiskit_optimization.converters", "apidocs/qiskit_optimization.problems", "apidocs/qiskit_optimization.runtime", "apidocs/qiskit_optimization.translators", "getting_started", "index", "release_notes", "stubs/qiskit_optimization.INFINITY", "stubs/qiskit_optimization.QiskitOptimizationError", "stubs/qiskit_optimization.QuadraticProgram", "stubs/qiskit_optimization.QuadraticProgram.binary_var", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list", "stubs/qiskit_optimization.QuadraticProgram.clear", "stubs/qiskit_optimization.QuadraticProgram.continuous_var", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string", "stubs/qiskit_optimization.QuadraticProgram.from_ising", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_variable", "stubs/qiskit_optimization.QuadraticProgram.integer_var", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list", "stubs/qiskit_optimization.QuadraticProgram.is_feasible", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.maximize", "stubs/qiskit_optimization.QuadraticProgram.minimize", "stubs/qiskit_optimization.QuadraticProgram.name", "stubs/qiskit_optimization.QuadraticProgram.objective", "stubs/qiskit_optimization.QuadraticProgram.prettyprint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.status", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables", "stubs/qiskit_optimization.QuadraticProgram.to_ising", "stubs/qiskit_optimization.QuadraticProgram.variables", "stubs/qiskit_optimization.QuadraticProgram.variables_index", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state", "stubs/qiskit_optimization.algorithms.ADMMOptimizer", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve", "stubs/qiskit_optimization.algorithms.ADMMParameters", "stubs/qiskit_optimization.algorithms.ADMMState", "stubs/qiskit_optimization.algorithms.BaseAggregator", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate", "stubs/qiskit_optimization.algorithms.CobylaOptimizer", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve", "stubs/qiskit_optimization.algorithms.CplexOptimizer", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold", "stubs/qiskit_optimization.algorithms.GroverOptimizer", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve", "stubs/qiskit_optimization.algorithms.GurobiOptimizer", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve", "stubs/qiskit_optimization.algorithms.IntermediateResult", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS", "stubs/qiskit_optimization.algorithms.MeanAggregator", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve", "stubs/qiskit_optimization.algorithms.OptimizationResult", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples", "stubs/qiskit_optimization.algorithms.OptimizationResult.status", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict", "stubs/qiskit_optimization.algorithms.OptimizationResult.x", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve", "stubs/qiskit_optimization.algorithms.SolutionSample", "stubs/qiskit_optimization.algorithms.SolutionSample.fval", "stubs/qiskit_optimization.algorithms.SolutionSample.probability", "stubs/qiskit_optimization.algorithms.SolutionSample.status", "stubs/qiskit_optimization.algorithms.SolutionSample.x", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve", "stubs/qiskit_optimization.applications.BinPacking", "stubs/qiskit_optimization.applications.BinPacking.get_figure", "stubs/qiskit_optimization.applications.BinPacking.interpret", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.Clique", "stubs/qiskit_optimization.applications.Clique.interpret", "stubs/qiskit_optimization.applications.Clique.size", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program", "stubs/qiskit_optimization.applications.ExactCover", "stubs/qiskit_optimization.applications.ExactCover.interpret", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program", "stubs/qiskit_optimization.applications.GraphOptimizationApplication", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph", "stubs/qiskit_optimization.applications.GraphPartition", "stubs/qiskit_optimization.applications.GraphPartition.interpret", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.Knapsack", "stubs/qiskit_optimization.applications.Knapsack.interpret", "stubs/qiskit_optimization.applications.Knapsack.max_weight", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program", "stubs/qiskit_optimization.applications.Maxcut", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result", "stubs/qiskit_optimization.applications.Maxcut.interpret", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program", "stubs/qiskit_optimization.applications.NumberPartition", "stubs/qiskit_optimization.applications.NumberPartition.interpret", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.OptimizationApplication", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program", "stubs/qiskit_optimization.applications.SKModel", "stubs/qiskit_optimization.applications.SKModel.disorder", "stubs/qiskit_optimization.applications.SKModel.graph", "stubs/qiskit_optimization.applications.SKModel.interpret", "stubs/qiskit_optimization.applications.SKModel.num_sites", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program", "stubs/qiskit_optimization.applications.SetPacking", "stubs/qiskit_optimization.applications.SetPacking.interpret", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.StableSet", "stubs/qiskit_optimization.applications.StableSet.interpret", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp", "stubs/qiskit_optimization.applications.Tsp.create_random_instance", "stubs/qiskit_optimization.applications.Tsp.interpret", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp.tsp_value", "stubs/qiskit_optimization.applications.VehicleRouting", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance", "stubs/qiskit_optimization.applications.VehicleRouting.depot", "stubs/qiskit_optimization.applications.VehicleRouting.interpret", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program", "stubs/qiskit_optimization.applications.VertexCover", "stubs/qiskit_optimization.applications.VertexCover.interpret", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program", "stubs/qiskit_optimization.converters.InequalityToEquality", "stubs/qiskit_optimization.converters.InequalityToEquality.convert", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret", "stubs/qiskit_optimization.converters.InequalityToEquality.mode", "stubs/qiskit_optimization.converters.IntegerToBinary", "stubs/qiskit_optimization.converters.IntegerToBinary.convert", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty", "stubs/qiskit_optimization.converters.MaximizeToMinimize", "stubs/qiskit_optimization.converters.MinimizeToMaximize", "stubs/qiskit_optimization.converters.QuadraticProgramConverter", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty", "stubs/qiskit_optimization.problems.Constraint", "stubs/qiskit_optimization.problems.Constraint.evaluate", "stubs/qiskit_optimization.problems.Constraint.name", "stubs/qiskit_optimization.problems.Constraint.rhs", "stubs/qiskit_optimization.problems.Constraint.sense", "stubs/qiskit_optimization.problems.LinearConstraint", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate", "stubs/qiskit_optimization.problems.LinearConstraint.linear", "stubs/qiskit_optimization.problems.LinearExpression", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__", "stubs/qiskit_optimization.problems.LinearExpression.bounds", "stubs/qiskit_optimization.problems.LinearExpression.coefficients", "stubs/qiskit_optimization.problems.LinearExpression.evaluate", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.LinearExpression.to_array", "stubs/qiskit_optimization.problems.LinearExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticConstraint", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic", "stubs/qiskit_optimization.problems.QuadraticExpression", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticObjective", "stubs/qiskit_optimization.problems.QuadraticObjective.constant", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticObjective.linear", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic", "stubs/qiskit_optimization.problems.QuadraticObjective.sense", "stubs/qiskit_optimization.problems.QuadraticProgramElement", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program", "stubs/qiskit_optimization.problems.Variable", "stubs/qiskit_optimization.problems.Variable.as_tuple", "stubs/qiskit_optimization.problems.Variable.lowerbound", "stubs/qiskit_optimization.problems.Variable.name", "stubs/qiskit_optimization.problems.Variable.upperbound", "stubs/qiskit_optimization.problems.Variable.vartype", "stubs/qiskit_optimization.runtime.QAOAClient", "stubs/qiskit_optimization.runtime.QAOAClient.alpha", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state", "stubs/qiskit_optimization.runtime.QAOAClient.mixer", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs", "stubs/qiskit_optimization.runtime.QAOAClient.reps", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies", "stubs/qiskit_optimization.runtime.QAOAProgram", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient", "stubs/qiskit_optimization.runtime.VQEClient.ansatz", "stubs/qiskit_optimization.runtime.VQEClient.backend", "stubs/qiskit_optimization.runtime.VQEClient.callback", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient.initial_point", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation", "stubs/qiskit_optimization.runtime.VQEClient.optimizer", "stubs/qiskit_optimization.runtime.VQEClient.program_id", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs", "stubs/qiskit_optimization.runtime.VQEClient.provider", "stubs/qiskit_optimization.runtime.VQEClient.shots", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgram", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgramResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history", "stubs/qiskit_optimization.translators.from_docplex_mp", "stubs/qiskit_optimization.translators.from_gurobipy", "stubs/qiskit_optimization.translators.from_ising", "stubs/qiskit_optimization.translators.to_docplex_mp", "stubs/qiskit_optimization.translators.to_gurobipy", "stubs/qiskit_optimization.translators.to_ising", "tutorials/01_quadratic_program", "tutorials/02_converters_for_quadratic_programs", "tutorials/03_minimum_eigen_optimizer", "tutorials/04_grover_optimizer", "tutorials/05_admm_optimizer", "tutorials/06_examples_max_cut_and_tsp", "tutorials/07_examples_vehicle_routing", "tutorials/08_cvar_optimization", "tutorials/09_application_classes", "tutorials/10_warm_start_qaoa", "tutorials/11_using_classical_optimization_solvers_and_models", "tutorials/12_qaoa_runtime", "tutorials/index"], "filenames": ["apidocs/qiskit_optimization.rst", "apidocs/qiskit_optimization.algorithms.rst", "apidocs/qiskit_optimization.applications.rst", "apidocs/qiskit_optimization.converters.rst", "apidocs/qiskit_optimization.problems.rst", "apidocs/qiskit_optimization.runtime.rst", "apidocs/qiskit_optimization.translators.rst", "getting_started.rst", "index.rst", "release_notes.rst", "stubs/qiskit_optimization.INFINITY.rst", "stubs/qiskit_optimization.QiskitOptimizationError.rst", "stubs/qiskit_optimization.QuadraticProgram.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.clear.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string.rst", "stubs/qiskit_optimization.QuadraticProgram.from_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info.rst", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_variable.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.is_feasible.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.maximize.rst", "stubs/qiskit_optimization.QuadraticProgram.minimize.rst", "stubs/qiskit_optimization.QuadraticProgram.name.rst", "stubs/qiskit_optimization.QuadraticProgram.objective.rst", "stubs/qiskit_optimization.QuadraticProgram.prettyprint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.status.rst", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables.rst", "stubs/qiskit_optimization.QuadraticProgram.to_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.variables.rst", "stubs/qiskit_optimization.QuadraticProgram.variables_index.rst", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.ADMMParameters.rst", "stubs/qiskit_optimization.algorithms.ADMMState.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.status.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.x.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.fval.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.probability.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.status.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.x.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve.rst", "stubs/qiskit_optimization.applications.BinPacking.rst", "stubs/qiskit_optimization.applications.BinPacking.get_figure.rst", "stubs/qiskit_optimization.applications.BinPacking.interpret.rst", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Clique.rst", "stubs/qiskit_optimization.applications.Clique.interpret.rst", "stubs/qiskit_optimization.applications.Clique.size.rst", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.ExactCover.rst", "stubs/qiskit_optimization.applications.ExactCover.interpret.rst", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph.rst", "stubs/qiskit_optimization.applications.GraphPartition.rst", "stubs/qiskit_optimization.applications.GraphPartition.interpret.rst", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Knapsack.rst", "stubs/qiskit_optimization.applications.Knapsack.interpret.rst", "stubs/qiskit_optimization.applications.Knapsack.max_weight.rst", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Maxcut.rst", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result.rst", "stubs/qiskit_optimization.applications.Maxcut.interpret.rst", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format.rst", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.NumberPartition.rst", "stubs/qiskit_optimization.applications.NumberPartition.interpret.rst", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SKModel.rst", "stubs/qiskit_optimization.applications.SKModel.disorder.rst", "stubs/qiskit_optimization.applications.SKModel.graph.rst", "stubs/qiskit_optimization.applications.SKModel.interpret.rst", "stubs/qiskit_optimization.applications.SKModel.num_sites.rst", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SetPacking.rst", "stubs/qiskit_optimization.applications.SetPacking.interpret.rst", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.StableSet.rst", "stubs/qiskit_optimization.applications.StableSet.interpret.rst", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.rst", "stubs/qiskit_optimization.applications.Tsp.create_random_instance.rst", "stubs/qiskit_optimization.applications.Tsp.interpret.rst", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format.rst", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.tsp_value.rst", "stubs/qiskit_optimization.applications.VehicleRouting.rst", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance.rst", "stubs/qiskit_optimization.applications.VehicleRouting.depot.rst", "stubs/qiskit_optimization.applications.VehicleRouting.interpret.rst", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles.rst", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.VertexCover.rst", "stubs/qiskit_optimization.applications.VertexCover.interpret.rst", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.convert.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.mode.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.convert.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.MaximizeToMinimize.rst", "stubs/qiskit_optimization.converters.MinimizeToMaximize.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty.rst", "stubs/qiskit_optimization.problems.Constraint.rst", "stubs/qiskit_optimization.problems.Constraint.evaluate.rst", "stubs/qiskit_optimization.problems.Constraint.name.rst", "stubs/qiskit_optimization.problems.Constraint.rhs.rst", "stubs/qiskit_optimization.problems.Constraint.sense.rst", "stubs/qiskit_optimization.problems.LinearConstraint.rst", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.LinearConstraint.linear.rst", "stubs/qiskit_optimization.problems.LinearExpression.rst", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.LinearExpression.bounds.rst", "stubs/qiskit_optimization.problems.LinearExpression.coefficients.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_array.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.constant.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.linear.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.sense.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program.rst", "stubs/qiskit_optimization.problems.Variable.rst", "stubs/qiskit_optimization.problems.Variable.as_tuple.rst", "stubs/qiskit_optimization.problems.Variable.lowerbound.rst", "stubs/qiskit_optimization.problems.Variable.name.rst", "stubs/qiskit_optimization.problems.Variable.upperbound.rst", "stubs/qiskit_optimization.problems.Variable.vartype.rst", "stubs/qiskit_optimization.runtime.QAOAClient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.alpha.rst", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz.rst", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state.rst", "stubs/qiskit_optimization.runtime.QAOAClient.mixer.rst", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level.rst", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.QAOAClient.reps.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.rst", "stubs/qiskit_optimization.runtime.VQEClient.ansatz.rst", "stubs/qiskit_optimization.runtime.VQEClient.backend.rst", "stubs/qiskit_optimization.runtime.VQEClient.callback.rst", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.initial_point.rst", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation.rst", "stubs/qiskit_optimization.runtime.VQEClient.optimizer.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_id.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.VQEClient.provider.rst", "stubs/qiskit_optimization.runtime.VQEClient.shots.rst", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate.rst", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgram.rst", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgramResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history.rst", "stubs/qiskit_optimization.translators.from_docplex_mp.rst", "stubs/qiskit_optimization.translators.from_gurobipy.rst", "stubs/qiskit_optimization.translators.from_ising.rst", "stubs/qiskit_optimization.translators.to_docplex_mp.rst", "stubs/qiskit_optimization.translators.to_gurobipy.rst", "stubs/qiskit_optimization.translators.to_ising.rst", "tutorials/01_quadratic_program.ipynb", "tutorials/02_converters_for_quadratic_programs.ipynb", "tutorials/03_minimum_eigen_optimizer.ipynb", "tutorials/04_grover_optimizer.ipynb", "tutorials/05_admm_optimizer.ipynb", "tutorials/06_examples_max_cut_and_tsp.ipynb", "tutorials/07_examples_vehicle_routing.ipynb", "tutorials/08_cvar_optimization.ipynb", "tutorials/09_application_classes.ipynb", "tutorials/10_warm_start_qaoa.ipynb", "tutorials/11_using_classical_optimization_solvers_and_models.ipynb", "tutorials/12_qaoa_runtime.ipynb", "tutorials/index.rst"], "titles": ["Qiskit Optimization API Reference", "Optimization algorithms (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms</span></code>)", "Optimization applications (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.applications</span></code>)", "Optimization converters (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.converters</span></code>)", "Optimization problems (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.problems</span></code>)", "Qiskit Optimization Runtime (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.runtime</span></code>)", "Quadratic program translators (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.translators</span></code>)", "B\u1eaft \u0111\u1ea7u", "Qiskit Optimization overview", "Release Notes", "INFINITY", "QiskitOptimizationError", "QuadraticProgram", "QuadraticProgram.binary_var", "QuadraticProgram.binary_var_dict", "QuadraticProgram.binary_var_list", "QuadraticProgram.clear", "QuadraticProgram.continuous_var", "QuadraticProgram.continuous_var_dict", "QuadraticProgram.continuous_var_list", "QuadraticProgram.export_as_lp_string", "QuadraticProgram.from_ising", "QuadraticProgram.get_feasibility_info", "QuadraticProgram.get_linear_constraint", "QuadraticProgram.get_num_binary_vars", "QuadraticProgram.get_num_continuous_vars", "QuadraticProgram.get_num_integer_vars", "QuadraticProgram.get_num_linear_constraints", "QuadraticProgram.get_num_quadratic_constraints", "QuadraticProgram.get_num_vars", "QuadraticProgram.get_quadratic_constraint", "QuadraticProgram.get_variable", "QuadraticProgram.integer_var", "QuadraticProgram.integer_var_dict", "QuadraticProgram.integer_var_list", "QuadraticProgram.is_feasible", "QuadraticProgram.linear_constraint", "QuadraticProgram.linear_constraints", "QuadraticProgram.linear_constraints_index", "QuadraticProgram.maximize", "QuadraticProgram.minimize", "QuadraticProgram.name", "QuadraticProgram.objective", "QuadraticProgram.prettyprint", "QuadraticProgram.quadratic_constraint", "QuadraticProgram.quadratic_constraints", "QuadraticProgram.quadratic_constraints_index", "QuadraticProgram.read_from_lp_file", "QuadraticProgram.remove_linear_constraint", "QuadraticProgram.remove_quadratic_constraint", "QuadraticProgram.status", "QuadraticProgram.substitute_variables", "QuadraticProgram.to_ising", "QuadraticProgram.variables", "QuadraticProgram.variables_index", "QuadraticProgram.write_to_lp_file", "ADMMOptimizationResult", "ADMMOptimizationResult.state", "ADMMOptimizer", "ADMMOptimizer.get_compatibility_msg", "ADMMOptimizer.parameters", "ADMMOptimizer.solve", "ADMMParameters", "ADMMState", "BaseAggregator", "BaseAggregator.aggregate", "CobylaOptimizer", "CobylaOptimizer.get_compatibility_msg", "CobylaOptimizer.solve", "CplexOptimizer", "CplexOptimizer.cplex_parameters", "CplexOptimizer.disp", "CplexOptimizer.get_compatibility_msg", "CplexOptimizer.is_cplex_installed", "CplexOptimizer.solve", "GoemansWilliamsonOptimizationResult", "GoemansWilliamsonOptimizationResult.sdp_solution", "GoemansWilliamsonOptimizer", "GoemansWilliamsonOptimizer.get_compatibility_msg", "GoemansWilliamsonOptimizer.max_cut_value", "GoemansWilliamsonOptimizer.solve", "GroverOptimizationResult", "GroverOptimizationResult.intermediate_fval", "GroverOptimizationResult.n_input_qubits", "GroverOptimizationResult.n_output_qubits", "GroverOptimizationResult.operation_counts", "GroverOptimizationResult.raw_samples", "GroverOptimizationResult.threshold", "GroverOptimizer", "GroverOptimizer.get_compatibility_msg", "GroverOptimizer.quantum_instance", "GroverOptimizer.solve", "GurobiOptimizer", "GurobiOptimizer.disp", "GurobiOptimizer.get_compatibility_msg", "GurobiOptimizer.is_gurobi_installed", "GurobiOptimizer.solve", "IntermediateResult", "IntermediateResult.ALL_ITERATIONS", "IntermediateResult.LAST_ITERATION", "IntermediateResult.NO_ITERATIONS", "MeanAggregator", "MeanAggregator.aggregate", "MinimumEigenOptimizationResult", "MinimumEigenOptimizationResult.min_eigen_solver_result", "MinimumEigenOptimizationResult.raw_samples", "MinimumEigenOptimizer", "MinimumEigenOptimizer.get_compatibility_msg", "MinimumEigenOptimizer.min_eigen_solver", "MinimumEigenOptimizer.solve", "MultiStartOptimizer", "MultiStartOptimizer.clip", "MultiStartOptimizer.multi_start_solve", "MultiStartOptimizer.trials", "OptimizationAlgorithm", "OptimizationAlgorithm.get_compatibility_msg", "OptimizationAlgorithm.is_compatible", "OptimizationAlgorithm.solve", "OptimizationResult", "OptimizationResult.__getitem__", "OptimizationResult.fval", "OptimizationResult.get_correlations", "OptimizationResult.prettyprint", "OptimizationResult.raw_results", "OptimizationResult.samples", "OptimizationResult.status", "OptimizationResult.variable_names", "OptimizationResult.variables", "OptimizationResult.variables_dict", "OptimizationResult.x", "OptimizationResultStatus", "OptimizationResultStatus.FAILURE", "OptimizationResultStatus.INFEASIBLE", "OptimizationResultStatus.SUCCESS", "RecursiveMinimumEigenOptimizationResult", "RecursiveMinimumEigenOptimizationResult.history", "RecursiveMinimumEigenOptimizationResult.replacements", "RecursiveMinimumEigenOptimizer", "RecursiveMinimumEigenOptimizer.get_compatibility_msg", "RecursiveMinimumEigenOptimizer.solve", "SlsqpOptimizationResult", "SlsqpOptimizationResult.fx", "SlsqpOptimizationResult.imode", "SlsqpOptimizationResult.its", "SlsqpOptimizationResult.smode", "SlsqpOptimizer", "SlsqpOptimizer.get_compatibility_msg", "SlsqpOptimizer.solve", "SolutionSample", "SolutionSample.fval", "SolutionSample.probability", "SolutionSample.status", "SolutionSample.x", "WarmStartQAOAFactory", "WarmStartQAOAFactory.create_initial_state", "WarmStartQAOAFactory.create_initial_variables", "WarmStartQAOAFactory.create_mixer", "WarmStartQAOAOptimizer", "WarmStartQAOAOptimizer.solve", "BinPacking", "BinPacking.get_figure", "BinPacking.interpret", "BinPacking.to_quadratic_program", "Clique", "Clique.interpret", "Clique.size", "Clique.to_quadratic_program", "ExactCover", "ExactCover.interpret", "ExactCover.to_quadratic_program", "GraphOptimizationApplication", "GraphOptimizationApplication.draw", "GraphOptimizationApplication.graph", "GraphOptimizationApplication.random_graph", "GraphPartition", "GraphPartition.interpret", "GraphPartition.to_quadratic_program", "Knapsack", "Knapsack.interpret", "Knapsack.max_weight", "Knapsack.to_quadratic_program", "Maxcut", "Maxcut.get_gset_result", "Maxcut.interpret", "Maxcut.parse_gset_format", "Maxcut.to_quadratic_program", "NumberPartition", "NumberPartition.interpret", "NumberPartition.to_quadratic_program", "OptimizationApplication", "OptimizationApplication.interpret", "OptimizationApplication.sample_most_likely", "OptimizationApplication.to_quadratic_program", "SKModel", "SKModel.disorder", "SKModel.graph", "SKModel.interpret", "SKModel.num_sites", "SKModel.to_quadratic_program", "SetPacking", "SetPacking.interpret", "SetPacking.to_quadratic_program", "StableSet", "StableSet.interpret", "StableSet.to_quadratic_program", "Tsp", "Tsp.create_random_instance", "Tsp.interpret", "Tsp.parse_tsplib_format", "Tsp.to_quadratic_program", "Tsp.tsp_value", "VehicleRouting", "VehicleRouting.create_random_instance", "VehicleRouting.depot", "VehicleRouting.interpret", "VehicleRouting.num_vehicles", "VehicleRouting.to_quadratic_program", "VertexCover", "VertexCover.interpret", "VertexCover.to_quadratic_program", "InequalityToEquality", "InequalityToEquality.convert", "InequalityToEquality.interpret", "InequalityToEquality.mode", "IntegerToBinary", "IntegerToBinary.convert", "IntegerToBinary.interpret", "LinearEqualityToPenalty", "LinearEqualityToPenalty.convert", "LinearEqualityToPenalty.interpret", "LinearEqualityToPenalty.penalty", "LinearInequalityToPenalty", "LinearInequalityToPenalty.convert", "LinearInequalityToPenalty.interpret", "LinearInequalityToPenalty.penalty", "MaximizeToMinimize", "MinimizeToMaximize", "QuadraticProgramConverter", "QuadraticProgramConverter.convert", "QuadraticProgramConverter.interpret", "QuadraticProgramToQubo", "QuadraticProgramToQubo.convert", "QuadraticProgramToQubo.get_compatibility_msg", "QuadraticProgramToQubo.interpret", "QuadraticProgramToQubo.is_compatible", "QuadraticProgramToQubo.penalty", "Constraint", "Constraint.evaluate", "Constraint.name", "Constraint.rhs", "Constraint.sense", "LinearConstraint", "LinearConstraint.evaluate", "LinearConstraint.linear", "LinearExpression", "LinearExpression.__getitem__", "LinearExpression.bounds", "LinearExpression.coefficients", "LinearExpression.evaluate", "LinearExpression.evaluate_gradient", "LinearExpression.to_array", "LinearExpression.to_dict", "QuadraticConstraint", "QuadraticConstraint.evaluate", "QuadraticConstraint.linear", "QuadraticConstraint.quadratic", "QuadraticExpression", "QuadraticExpression.__getitem__", "QuadraticExpression.bounds", "QuadraticExpression.coefficients", "QuadraticExpression.evaluate", "QuadraticExpression.evaluate_gradient", "QuadraticExpression.to_array", "QuadraticExpression.to_dict", "QuadraticObjective", "QuadraticObjective.constant", "QuadraticObjective.evaluate", "QuadraticObjective.evaluate_gradient", "QuadraticObjective.linear", "QuadraticObjective.quadratic", "QuadraticObjective.sense", "QuadraticProgramElement", "QuadraticProgramElement.quadratic_program", "Variable", "Variable.as_tuple", "Variable.lowerbound", "Variable.name", "Variable.upperbound", "Variable.vartype", "QAOAClient", "QAOAClient.alpha", "QAOAClient.ansatz", "QAOAClient.initial_state", "QAOAClient.mixer", "QAOAClient.optimization_level", "QAOAClient.program_inputs", "QAOAClient.reps", "QAOAClient.use_initial_mapping", "QAOAClient.use_pulse_efficient", "QAOAClient.use_swap_strategies", "QAOAProgram", "QAOAProgram.compute_minimum_eigenvalue", "VQEClient", "VQEClient.ansatz", "VQEClient.backend", "VQEClient.callback", "VQEClient.compute_minimum_eigenvalue", "VQEClient.initial_point", "VQEClient.measurement_error_mitigation", "VQEClient.optimizer", "VQEClient.program_id", "VQEClient.program_inputs", "VQEClient.provider", "VQEClient.shots", "VQEClient.store_intermediate", "VQEClient.supports_aux_operators", "VQEProgram", "VQEProgram.compute_minimum_eigenvalue", "VQEProgram.supports_aux_operators", "VQEProgramResult", "VQERuntimeResult", "VQERuntimeResult.job_id", "VQERuntimeResult.optimizer_history", "from_docplex_mp", "from_gurobipy", "from_ising", "to_docplex_mp", "to_gurobipy", "to_ising", "B\u00e0i to\u00e1n l\u1eadp tr\u00ecnh b\u1eadc hai", "B\u1ed9 chuy\u1ec3n \u0111\u1ed5i cho c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh b\u1eadc hai", "B\u1ed9 t\u1ed1i \u01b0u ho\u00e1 Tr\u1ecb ri\u00eang Nh\u1ecf nh\u1ea5t", "B\u1ed9 t\u1ed1i \u01b0u ho\u00e1 Grover", "B\u1ed9 t\u1ed1i \u01b0u ho\u00e1 ADMM", "Max-Cut and Traveling Salesman Problem", "Vehicle Routing", "C\u1ea3i thi\u1ec7n T\u1ed1i \u01b0u h\u00f3a L\u01b0\u1ee3ng t\u1eed Bi\u1ebfn thi\u00ean b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng CVaR", "C\u00e1c l\u1edbp \u1ee9ng d\u1ee5ng cho c\u00e1c v\u1ea5n \u0111\u1ec1 t\u1ed1i \u01b0u h\u00f3a", "Warm-starting quantum optimization", "Using Classical Optimization Solvers and Models with Qiskit Optimization", "QAOA Runtime", "H\u01b0\u1ee1ng d\u1eabn t\u1ed1i \u01b0u h\u00f3a"], "terms": {"0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341], "cover": [0, 8, 167, 169, 217, 219], "whole": [0, 8], "rang": [0, 8, 48, 49, 119, 153, 157, 334, 335, 336, 338, 340], "from": [0, 7, 8, 21, 47, 66, 69, 79, 92, 99, 103, 104, 106, 110, 118, 121, 123, 137, 140, 142, 144, 145, 155, 157, 162, 166, 169, 176, 180, 182, 184, 185, 188, 191, 193, 198, 201, 204, 206, 208, 209, 212, 216, 219, 220, 224, 229, 233, 240, 323, 325, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "high": [0, 8, 206, 212], "level": [0, 8, 283, 289, 294, 335, 336, 340], "model": [0, 6, 8, 55, 72, 94, 163, 166, 193, 194, 198, 231, 323, 324, 326, 327, 329, 332, 333, 334, 335, 336, 338, 340], "problem": [0, 1, 2, 3, 8, 21, 43, 51, 52, 56, 58, 59, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 80, 81, 88, 89, 91, 92, 94, 96, 103, 106, 107, 109, 112, 115, 116, 117, 118, 126, 127, 134, 137, 138, 139, 140, 145, 146, 147, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 190, 192, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 289, 325, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340], "automat": [0, 8, 227, 231, 240, 323, 331, 336, 339, 340], "convers": [0, 3, 8, 227, 230, 231, 234, 239, 240, 245, 330, 331], "differ": [0, 3, 8, 88, 106, 137, 140, 157, 229, 233, 330, 331, 333, 334, 335, 336, 338, 340], "requir": [0, 7, 8, 47, 231, 238, 334, 335, 340], "represent": [0, 3, 8, 12, 195, 251, 254, 262, 266, 274, 283, 329, 330, 331, 335, 336, 340], "suit": [0, 8], "easi": [0, 8, 190, 334, 338], "us": [0, 7, 8, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 51, 58, 61, 62, 66, 68, 69, 72, 74, 81, 83, 84, 88, 90, 91, 92, 94, 96, 106, 109, 117, 137, 139, 145, 147, 156, 157, 158, 190, 220, 223, 224, 230, 231, 234, 239, 245, 247, 254, 261, 266, 273, 283, 289, 294, 299, 300, 302, 308, 316, 323, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340], "quantum": [0, 8, 58, 90, 91, 153, 154, 156, 157, 224, 289, 300, 331, 332, 333, 336, 340], "algorithm": [0, 5, 7, 8, 56, 58, 61, 66, 69, 75, 77, 80, 81, 87, 88, 90, 92, 103, 106, 112, 114, 118, 123, 125, 130, 131, 132, 133, 134, 137, 140, 145, 157, 289, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ar": [0, 4, 8, 14, 15, 18, 19, 21, 22, 29, 33, 34, 51, 52, 62, 63, 66, 98, 99, 100, 110, 137, 145, 193, 220, 227, 231, 232, 240, 266, 289, 294, 300, 302, 316, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "readi": [0, 8, 335], "run": [0, 8, 62, 68, 74, 90, 91, 96, 109, 117, 139, 147, 158, 289, 297, 298, 300, 302, 316, 333, 335, 336], "classic": [0, 8, 58, 289, 300, 302, 316, 331, 333, 334, 336, 340], "simul": [0, 8, 88, 335, 336], "well": [0, 8, 12, 16, 106, 289, 300, 334, 340], "real": [0, 8, 334, 339, 340], "devic": [0, 8, 297, 333, 334, 340], "via": [0, 8, 14, 15, 18, 19, 33, 34, 62, 66, 134, 135, 145, 254, 266, 333, 335, 339], "thi": [0, 3, 7, 12, 43, 47, 52, 55, 58, 59, 62, 66, 67, 69, 72, 74, 78, 89, 91, 92, 94, 96, 106, 107, 110, 111, 113, 115, 116, 119, 122, 137, 138, 145, 146, 150, 151, 153, 157, 163, 166, 224, 231, 232, 242, 244, 283, 284, 289, 300, 302, 311, 316, 319, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "enabl": [0, 7, 8, 334, 340], "effici": [0, 8, 289, 298, 333, 334], "docplex": [0, 8, 323, 326, 332, 333, 336, 338], "A": [0, 8, 14, 15, 18, 19, 20, 33, 34, 43, 58, 64, 77, 80, 81, 89, 106, 107, 112, 118, 121, 122, 137, 138, 140, 148, 153, 154, 155, 156, 157, 159, 160, 161, 163, 167, 168, 170, 172, 173, 174, 175, 177, 178, 181, 182, 186, 187, 195, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 231, 242, 284, 289, 302, 316, 328, 329, 331, 332, 333, 334, 335], "uniform": [0, 8, 289], "interfac": [0, 5, 8, 281], "between": [0, 3, 6, 8, 153, 157, 333, 335, 336, 337, 340], "allow": [0, 8, 118, 289, 300, 331, 334, 335], "user": [0, 7, 8, 97, 118, 157, 231], "solv": [0, 8, 58, 59, 62, 63, 66, 67, 69, 72, 77, 78, 89, 92, 94, 106, 107, 110, 112, 115, 116, 118, 137, 138, 145, 146, 157, 221, 225, 228, 232, 241, 242, 244, 332, 333, 334, 335, 336, 337, 338, 339, 340], "larg": [0, 8, 334], "set": [0, 3, 8, 11, 39, 40, 43, 62, 71, 74, 91, 93, 96, 183, 199, 201, 202, 204, 289, 300, 301, 302, 306, 316, 317, 333, 334, 335, 336, 337, 338, 339, 340], "variat": [0, 8, 137, 331, 332, 333, 335, 336, 340], "approxim": [0, 8, 77, 106, 301, 306, 317, 330, 332, 335, 338], "qaoa": [0, 8, 106, 137, 153, 154, 155, 156, 157, 289, 295, 300, 330, 331, 332, 333, 334, 337, 339], "grover": [0, 8, 81, 87, 88, 91], "adapt": [0, 8, 88, 332, 335], "search": [0, 8, 88, 332, 334], "groveroptim": [0, 8, 86, 330, 331, 333], "leverag": [0, 8, 331, 333, 338, 340], "fundament": [0, 8], "provid": [0, 8, 22, 35, 66, 69, 92, 106, 145, 289, 300, 301, 302, 306, 316, 317, 330, 331, 333, 334, 335, 336, 337, 340], "terra": [0, 8, 21, 52, 289, 325, 328, 331], "furthermor": [0, 8, 334], "modular": [0, 8], "design": [0, 8, 335], "easili": [0, 8], "extend": [0, 8, 335], "facilit": [0, 5, 8], "rapid": [0, 8], "develop": [0, 8], "test": [0, 7, 8, 333, 336, 340], "new": [0, 8, 118, 194, 224, 225, 240, 241, 254, 266, 283, 334, 335], "compat": [0, 8, 59, 61, 67, 72, 78, 89, 94, 107, 109, 115, 116, 138, 146, 158, 242, 244, 335], "also": [0, 8, 94, 302, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340], "valid": [0, 8, 36, 51, 289, 300, 333], "benchmark": [0, 8, 331, 333], "support": [0, 12, 221, 225, 231, 289, 300, 302, 315, 316, 318, 323, 324, 326, 327, 329, 331, 339], "quadrat": [0, 12, 13, 16, 17, 20, 21, 28, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 77, 80, 106, 145, 237, 251, 262, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 338, 339, 340], "constrain": [0, 12, 289, 300, 332, 333], "program": [0, 5, 12, 13, 16, 17, 20, 21, 32, 36, 37, 41, 44, 45, 47, 50, 53, 55, 77, 237, 251, 262, 274, 295, 302, 310, 311, 316, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 338], "simplic": 0, "we": [0, 266, 301, 306, 317, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "them": [0, 66, 102, 145, 335, 338], "just": [0, 75], "binari": [0, 12, 13, 14, 15, 24, 52, 58, 62, 79, 106, 182, 190, 191, 224, 225, 226, 231, 232, 323, 324, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "integ": [0, 12, 26, 32, 33, 34, 106, 119, 186, 220, 224, 225, 226, 289, 300, 323, 324, 328, 329, 330, 331, 335, 338, 339, 340], "continu": [0, 12, 17, 18, 19, 25, 58, 62, 66, 67, 145, 146, 157, 220, 283, 323, 324, 328, 329, 333, 334, 335, 338], "variabl": [0, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 29, 31, 32, 33, 34, 43, 50, 51, 52, 54, 56, 62, 63, 66, 67, 75, 81, 103, 106, 110, 118, 119, 126, 128, 129, 134, 136, 137, 139, 140, 145, 146, 152, 153, 154, 155, 156, 157, 164, 168, 178, 200, 203, 218, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 247, 252, 254, 255, 256, 258, 259, 261, 263, 266, 267, 268, 270, 271, 273, 276, 277, 297, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "equal": [0, 12, 36, 44, 62, 106, 118, 119, 137, 159, 220, 221, 227, 228, 231, 240, 330, 331, 333, 335, 337], "inequ": [0, 12, 220, 221, 228, 231, 232, 330, 333], "constraint": [0, 12, 16, 22, 23, 27, 28, 30, 36, 37, 38, 44, 45, 46, 48, 49, 52, 62, 66, 106, 137, 220, 221, 225, 227, 228, 231, 232, 240, 241, 251, 252, 253, 262, 263, 264, 265, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340], "class": [0, 4, 7, 11, 12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 311, 316, 319, 320, 329, 330, 331, 333, 334, 335, 337, 338], "ha": [0, 14, 15, 18, 19, 33, 34, 91, 106, 110, 119, 289, 300, 301, 306, 316, 317, 319, 325, 329, 334, 335, 337, 338, 339, 340], "vast": 0, "amount": [0, 334], "relev": [0, 63, 334], "applic": [0, 7, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 334, 337, 340], "while": [0, 330, 335, 336, 338], "still": [0, 51, 334, 336, 338], "being": [0, 7, 63, 134, 136, 140, 141, 331, 334, 335], "matric": [0, 329, 331], "vector": [0, 106, 191, 289, 300, 302, 316, 329, 335, 337, 338], "some": [0, 43, 231, 329, 334, 335, 336, 339], "veri": [0, 331], "interest": [0, 331, 340], "sub": [0, 110, 311, 329, 335], "convex": [0, 72, 74, 94, 96, 333, 338], "which": [0, 7, 22, 231, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340], "can": [0, 50, 58, 59, 62, 66, 67, 72, 78, 89, 94, 107, 115, 116, 119, 137, 138, 145, 146, 153, 158, 163, 170, 174, 181, 202, 205, 211, 217, 242, 244, 254, 255, 266, 267, 289, 300, 301, 302, 306, 311, 315, 316, 317, 318, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340], "unconstrain": [0, 106, 227, 228, 330, 331, 336, 338], "qubo": [0, 58, 62, 81, 88, 89, 91, 103, 106, 107, 138, 231, 240, 241, 242, 330, 333, 334, 335, 337, 340], "mani": [0, 331, 335, 338], "np": [0, 190, 193, 331, 333, 334, 335, 336, 338, 340], "complet": [0, 145, 308, 334, 335, 337, 340], "i": [0, 16, 21, 23, 30, 31, 48, 49, 52, 67, 77, 89, 107, 138, 146, 193, 231, 232, 242, 255, 266, 267, 289, 300, 302, 316, 325, 328, 329, 333, 334, 335, 336, 337, 338, 340], "e": [0, 7, 13, 14, 15, 16, 17, 18, 19, 21, 32, 33, 34, 36, 44, 51, 52, 62, 67, 89, 106, 107, 137, 138, 146, 193, 242, 266, 289, 300, 302, 316, 325, 328, 329, 331, 333, 334, 335, 338, 339, 340], "intract": 0, "In": [0, 7, 137, 241, 329, 330, 331, 333, 334, 335], "addit": [0, 123, 140, 223, 289, 300, 302, 316, 329, 330, 334, 335], "standard": [0, 153, 157, 289, 300, 302, 316, 331, 336, 340], "python": [0, 7, 335, 339], "error": [0, 11, 289, 300, 302, 308, 316, 329, 335, 340], "rais": [0, 74, 91, 96, 335], "circumst": 0, "cannot": [0, 55, 91, 329], "proce": [0, 335], "constant": [0, 21, 39, 40, 51, 52, 274, 325, 328, 329, 331, 335], "infin": [0, 329], "common": 2, "have": [3, 7, 281, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "function": [3, 16, 56, 66, 75, 81, 88, 103, 106, 118, 120, 134, 140, 141, 145, 149, 231, 232, 274, 275, 276, 277, 278, 279, 280, 302, 316, 319, 320, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "go": 3, "given": [3, 23, 30, 31, 59, 61, 67, 68, 72, 74, 77, 78, 89, 91, 94, 96, 107, 109, 112, 115, 116, 117, 138, 139, 146, 147, 158, 193, 222, 226, 229, 233, 240, 242, 244, 247, 252, 258, 259, 263, 270, 271, 276, 277, 289, 301, 306, 317, 331, 335, 336, 337, 338, 340], "quadraticprogram": [3, 4, 6, 59, 61, 63, 66, 67, 68, 69, 72, 74, 78, 80, 89, 91, 92, 94, 96, 106, 107, 109, 112, 115, 116, 117, 118, 137, 138, 139, 145, 146, 147, 158, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 224, 225, 228, 232, 238, 240, 241, 242, 244, 246, 254, 266, 281, 282, 283, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340], "interpret": [3, 14, 15, 18, 19, 33, 34, 82, 238, 330, 334, 337], "result": [3, 22, 35, 56, 61, 64, 65, 66, 68, 69, 74, 75, 81, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 112, 117, 118, 122, 123, 134, 135, 137, 139, 140, 145, 147, 157, 158, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 193, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 238, 239, 243, 301, 306, 317, 319, 320, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "origin": [3, 81, 103, 106, 118, 123, 171, 222, 226, 229, 233, 243, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "befor": [3, 82, 157, 330, 331, 335, 339], "return": [3, 11, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 38, 41, 42, 43, 45, 46, 52, 53, 54, 57, 59, 60, 63, 67, 70, 71, 72, 73, 76, 77, 78, 80, 86, 89, 93, 94, 95, 97, 104, 105, 106, 107, 108, 111, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 157, 195, 197, 208, 223, 230, 234, 242, 244, 245, 248, 249, 250, 253, 255, 256, 257, 260, 261, 264, 265, 267, 268, 269, 272, 273, 275, 278, 279, 280, 282, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 326, 327, 328, 331, 334, 335, 336, 338, 340], "an": [3, 4, 7, 8, 22, 32, 35, 48, 49, 51, 55, 56, 58, 66, 69, 72, 74, 75, 76, 79, 88, 91, 92, 94, 96, 106, 110, 114, 118, 119, 130, 132, 134, 135, 137, 145, 148, 154, 156, 157, 163, 166, 169, 170, 171, 174, 181, 184, 189, 190, 193, 198, 202, 205, 211, 217, 221, 225, 228, 232, 237, 241, 254, 260, 261, 266, 272, 273, 289, 300, 302, 315, 316, 318, 325, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "appropri": [3, 334], "optimizationresult": [3, 56, 68, 74, 75, 81, 91, 96, 103, 112, 117, 134, 135, 139, 140, 147, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 331, 333], "structur": 4, "defin": [4, 62, 81, 97, 140, 220, 240, 254, 266, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340], "The": [4, 8, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 54, 55, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 134, 135, 137, 138, 139, 140, 145, 146, 147, 149, 150, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 173, 175, 176, 177, 178, 179, 180, 183, 185, 187, 188, 190, 193, 196, 198, 200, 201, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 300, 302, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 340], "follow": [4, 51, 118, 231, 232, 289, 300, 302, 316, 323, 324, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340], "intend": 4, "instanti": [4, 14, 15, 18, 19, 33, 34, 335], "directli": [4, 163, 170, 174, 181, 202, 205, 211, 217, 329, 331, 334, 339, 340], "object": [4, 6, 12, 16, 39, 40, 62, 63, 65, 81, 102, 103, 104, 106, 112, 118, 120, 123, 140, 141, 145, 148, 149, 153, 227, 231, 232, 240, 274, 275, 276, 277, 278, 279, 280, 281, 319, 320, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "type": [4, 22, 29, 52, 88, 106, 118, 137, 208, 210, 220, 221, 225, 232, 283, 284, 288, 329, 330, 331, 333, 335, 340], "avail": [4, 333, 334, 335, 337, 338, 339, 340], "within": [4, 66, 69, 92, 106, 145, 335, 336, 337], "emb": 5, "usag": [5, 7, 193], "script": 5, "cloud": [5, 316, 340], "other": [6, 51, 62, 110, 193, 329, 330, 331, 334], "optim": [6, 7, 11, 22, 35, 51, 56, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 78, 81, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 157, 158, 159, 163, 166, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 237, 240, 242, 244, 274, 289, 294, 300, 302, 314, 316, 319, 320, 322, 330, 331, 332, 333, 334, 335, 336, 337], "qiskit": [7, 11, 21, 52, 66, 69, 92, 106, 114, 137, 145, 237, 289, 302, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "ph\u1ee5": [7, 330], "thu\u1ed9c": [7, 329, 330, 332], "v\u00e0o": [7, 329, 330, 332, 333], "g\u00f3i": [7, 333], "ch\u00ednh": [7, 329, 330, 332, 333, 334, 337], "s\u1edf": 7, "h\u1eefu": [7, 334], "get": [7, 8, 51, 85, 118, 121, 160, 182, 301, 306, 317, 329, 331, 334, 335, 339], "start": [7, 8, 62, 66, 110, 112, 145, 153, 154, 155, 157, 158, 289, 300, 329, 330, 331, 334], "http": [7, 21, 52, 66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 289, 300, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "org": [7, 66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "document": [7, 140], "getting_start": 7, "html": [7, 66, 145, 329], "__": 7, "ri\u00eang": [7, 332, 333], "tr\u00ecnh": [7, 333], "b\u00e0y": 7, "l\u1ef1a": 7, "cho": [7, 329, 331, 332, 333, 336], "v\u00e0": [7, 330, 332, 333, 334, 337], "m\u00f4i": 7, "tr\u01b0\u1eddng": [7, 329, 332, 334, 336], "n\u1ec1n": 7, "t\u1ea3ng": 7, "\u0111\u01b0\u1ee3c": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337], "h\u1ed7": [7, 329, 333, 334], "tr\u1ee3": [7, 329, 333, 334], "c\u1ee7a": [7, 329, 330, 331, 334, 337], "n\u00f3": [7, 329, 332, 334], "n\u00ean": [7, 329, 332, 334], "tham": [7, 12, 13, 14, 15, 17, 18, 19, 21, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 72, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 96, 102, 103, 106, 107, 109, 110, 112, 115, 116, 117, 118, 119, 134, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 186, 187, 190, 191, 193, 196, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 289, 300, 301, 302, 306, 316, 317, 323, 324, 325, 326, 327, 328], "kh\u1ea3o": 7, "m\u1ee5c": [7, 329, 330, 332, 333, 334, 337], "\u0111\u00f3": [7, 329, 330, 332, 333, 334], "tr\u01b0\u1edbc": [7, 330, 332, 333], "ti\u1ebfp": [7, 330, 332, 334], "th\u00f4ng": [7, 332], "tin": [7, 332], "t\u1eadp": [7, 330, 333, 334, 337], "trung": 7, "nh\u1eefng": [7, 330, 332], "b\u1ed5": [7, 330], "sung": [7, 330], "c\u1ee5": [7, 333], "th\u1ec3": [7, 329, 330, 331, 332, 333, 334, 335, 337], "c\u00f3": [7, 329, 330, 331, 332, 333, 334, 335, 337], "xem": [7, 329, 332, 334], "th\u00eam": [7, 330, 333], "t\u1ea1i": [7, 329, 330, 332, 333], "\u0111\u00e2y": [7, 329, 330, 332, 333, 334, 336], "m\u1ed9t": [7, 330, 333, 334, 336, 337], "s\u1ed1": [7, 12, 13, 14, 15, 17, 18, 19, 21, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 72, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 96, 102, 103, 106, 107, 109, 110, 112, 115, 116, 117, 118, 119, 134, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 186, 187, 190, 191, 193, 196, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 289, 300, 301, 302, 306, 316, 317, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 337], "ch\u1ee9c": 7, "n\u0103ng": [7, 331, 332, 334], "\u0111i\u1ec1u": [7, 330, 332, 333, 334], "ch\u1ec9nh": 7, "th\u00e0nh": [7, 329, 330, 332, 333, 337], "\u0111\u1ec3": [7, 329, 330, 332, 333, 334], "code": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ho\u1eb7c": [7, 329, 332, 333, 334], "ch\u01b0\u01a1ng": [7, 329], "kh\u00f4ng": [7, 329, 330, 332, 334], "theo": [7, 329, 330, 332, 333, 334], "m\u1eb7c": [7, 330, 332], "\u0111\u1ecbnh": [7, 329, 330, 332, 333, 334, 337], "l\u00e0": [7, 329, 330, 331, 332, 333, 334, 337], "ibm": [7, 69, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "cplex": [7, 47, 69, 70, 71, 72, 73, 329, 331, 333, 339], "cvxpy": 7, "matplotlib": [7, 333, 334, 335, 336, 337, 340], "bi\u1ebft": [7, 332], "c\u1ee5c": 7, "b\u1ed9": 7, "c\u00e1ch": [7, 329, 330, 331, 332, 333, 334], "d\u1ec5": [7, 329, 333, 334, 337], "nh\u1ea5t": [7, 332, 334, 337], "l\u00e0m": [7, 329, 331, 332], "h\u01b0\u1edbng": [7, 329, 331], "d\u1eabn": [7, 329, 331], "m\u1edf": 7, "d\u00e0nh": 7, "trong": [7, 329, 330, 331, 332, 333, 334, 336, 337], "\u1ea3o": 7, "m\u00e0": [7, 332, 333, 334], "ch\u1ec9": [7, 329, 330, 332, 336, 337], "c\u1ea7n": [7, 329, 332, 333], "danh": [7, 329], "s\u00e1ch": [7, 329], "t\u01b0\u01a1ng": [7, 329, 330, 332, 333, 334], "t\u1ef1": [7, 329, 330], "nh\u01b0": [7, 329, 330, 331, 332, 333, 334, 335, 336], "visual": [7, 331, 334, 335], "ngh\u0129a": [7, 332, 333, 334], "pip": [7, 339], "instal": [7, 47, 69, 73, 92, 95, 333, 335, 337, 339], "It": [7, 43, 50, 106, 163, 170, 174, 181, 202, 205, 211, 217, 331, 334, 338, 339, 340], "worth": [7, 335], "point": [7, 10, 289, 300, 302, 307, 316, 330, 334, 335, 340], "out": [7, 23, 30, 48, 49, 119, 163, 170, 174, 181, 202, 205, 211, 217], "you": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "re": [7, 308, 330, 331, 338, 340], "zsh": 7, "default": [7, 13, 14, 15, 17, 18, 19, 21, 32, 33, 34, 36, 43, 44, 62, 88, 106, 137, 145, 157, 159, 163, 289, 300, 302, 316, 325, 329, 334, 335, 340], "shell": 7, "newer": 7, "version": [7, 157, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "maco": 7, "ll": 7, "need": [7, 51, 65, 102, 289, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "put": [7, 334, 335], "quot": 7, "t\u1eeb": [7, 330, 331, 332, 333, 334, 335, 336, 337, 338], "ngu\u1ed3n": 7, "ph\u00e9p": 7, "trui": [7, 329, 333], "c\u1eadp": [7, 329, 332, 333], "phi\u00ean": 7, "b\u1ea3n": [7, 330, 334], "\u0111ang": 7, "ph\u00e1t": 7, "tri\u1ec3n": [7, 332], "nh\u1eadt": [7, 332, 333], "g\u1ea7n": [7, 331, 334], "thai": [7, 332], "v\u00ec": [7, 329, 332], "s\u1eed": [7, 329, 333, 334], "d\u1ee5ng": [7, 329, 333], "kho": 7, "l\u01b0u": [7, 329, 330, 332], "tr\u1eef": [7, 329], "packag": [7, 334, 335, 337], "index": [7, 14, 15, 18, 19, 23, 30, 31, 33, 34, 38, 46, 48, 49, 54, 118, 119, 211, 212, 213, 255, 261, 273, 329, 335, 340], "pypi": [7, 69, 339], "n\u00e0y": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "s\u1ebd": [7, 329, 330, 331, 332, 334], "gi\u00fap": 7, "ki\u1ec3m": 7, "tra": 7, "r\u1ed9ng": 7, "m\u1edbi": [7, 333], "hi\u1ec7u": [7, 330, 334], "qu\u1ea3": [7, 329, 330, 332, 334], "h\u01a1n": [7, 329, 330], "do": [7, 118, 231, 329, 334, 335, 336, 338], "\u0111\u1ed5i": [7, 329, 332, 334], "y\u00eau": [7, 334], "c\u1ea7u": [7, 334], "t\u00ednh": [7, 329, 330, 333, 337], "s\u1eeda": [7, 334], "ti\u00ean": [7, 329, 332, 333], "sourc": [7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 95, 96, 97, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 130, 134, 137, 138, 139, 140, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 284, 289, 295, 300, 301, 302, 306, 311, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "b\u00e2y": [7, 330, 333], "gi\u1edd": [7, 330, 333], "tr\u00ean": [7, 329, 330, 332, 333, 334, 337], "c\u00f9ng": [7, 332, 333], "nh\u00e2n": [7, 329, 332, 334], "git": 7, "clone": 7, "github": [7, 21, 52, 325, 328, 329], "com": [7, 21, 52, 69, 325, 328], "t\u1ea1o": [7, 329, 330, 331, 332, 334, 335, 336, 337, 338], "ra": [7, 13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 36, 43, 44, 47, 48, 49, 51, 52, 55, 61, 68, 74, 88, 91, 96, 106, 109, 110, 117, 118, 119, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 281, 283, 289, 301, 306, 317, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 336], "th\u01b0": [7, 333], "t\u00ean": [7, 329], "cd": 7, "n\u1ebfu": [7, 329, 333], "mu\u1ed1n": 7, "ch\u1ea1y": [7, 332, 333], "lint": 7, "h\u00e3y": [7, 329, 330], "nh\u00e0": 7, "r": [7, 331, 332, 333, 334, 335, 336], "dev": 7, "txt": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u1edf": [7, 331, 332, 333, 334], "ch\u1ebf": [7, 330], "\u0111\u1ed9": [7, 331, 332, 334], "khi": [7, 329, 330, 332, 333, 334], "project": [7, 69, 339, 340], "th\u00ec": [7, 332, 333], "ph\u1ea3i": [7, 329, 330, 332, 333, 334], "l\u1ea1i": [7, 329, 332], "b\u1eb1ng": [7, 329, 332, 334, 337], "mai": [7, 72, 74, 77, 96, 140, 221, 225, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "read": [7, 184, 208], "lp": [7, 20, 47, 55], "file": [7, 47, 55, 184, 208, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "cplexoptim": [7, 118, 333, 338, 339], "wrapper": [7, 66, 69, 92, 106, 145, 330], "current": [7, 60, 123, 289, 300, 302, 316, 330], "3": [7, 62, 66, 88, 118, 220, 266, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340], "9": [7, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "case": [7, 72, 118, 129, 137, 157, 222, 226, 229, 233, 241, 329, 330, 331, 333, 334, 335, 336], "command": 7, "effect": [7, 58], "cvx": 7, "goeman": [7, 75, 77, 80], "williamson": [7, 75, 77, 80], "goemanswilliamsonoptim": 7, "draw": [7, 337, 338, 340], "method": [7, 12, 47, 56, 58, 59, 62, 63, 64, 66, 69, 75, 77, 78, 81, 88, 92, 101, 103, 106, 110, 112, 114, 115, 116, 118, 119, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 232, 235, 236, 237, 240, 244, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 311, 316, 319, 320, 329, 331, 333, 334, 335], "graph": [7, 77, 163, 170, 171, 173, 174, 176, 181, 182, 184, 202, 205, 208, 211, 217, 334, 335, 337], "gurobipi": [7, 92, 324, 327], "gurobi": [7, 92, 93, 94, 95, 339], "gurobioptim": [7, 339], "dive": 7, "tutori": [7, 8, 231, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "find": [7, 66, 88, 106, 133, 145, 331, 332, 334, 335, 337, 340], "about": [7, 118, 330, 331], "open": [8, 55, 340], "framework": 8, "modul": [8, 11, 66, 69, 92, 106, 114, 145, 237, 329, 330, 334, 338, 340], "1e": [10, 17, 18, 19, 32, 33, 34, 145, 283], "20": [10, 17, 18, 19, 32, 33, 34, 69, 283, 331, 333, 334, 335, 338, 339, 340], "convert": [10, 14, 15, 18, 19, 33, 34, 88, 89, 91, 106, 107, 118, 137, 138, 157, 162, 166, 169, 176, 180, 185, 188, 190, 192, 198, 201, 204, 209, 216, 219, 220, 222, 223, 224, 226, 227, 229, 231, 233, 235, 236, 237, 240, 242, 243, 323, 330, 331, 332, 334, 336, 337, 338, 339], "string": [10, 14, 15, 18, 19, 20, 33, 34, 43, 55, 67, 72, 94, 119, 122, 146, 182, 191, 329, 340], "number": [10, 14, 15, 18, 19, 24, 25, 26, 27, 28, 29, 33, 34, 62, 66, 77, 81, 83, 84, 88, 110, 113, 137, 140, 143, 145, 157, 159, 173, 186, 188, 193, 197, 206, 211, 212, 215, 229, 233, 276, 277, 289, 300, 302, 308, 313, 316, 331, 334, 335, 336, 337, 339, 340], "float": [10, 17, 18, 19, 21, 22, 32, 33, 34, 35, 36, 39, 40, 44, 51, 56, 62, 63, 66, 75, 79, 81, 82, 87, 88, 103, 106, 110, 111, 118, 119, 120, 128, 134, 137, 140, 145, 149, 150, 153, 154, 155, 156, 157, 210, 222, 226, 227, 229, 230, 231, 233, 234, 240, 243, 245, 246, 247, 249, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 275, 276, 277, 283, 284, 285, 287, 289, 290, 300, 302, 316, 323, 325, 328, 331, 340], "possibl": [10, 75, 118, 220, 331, 334, 335], "except": [11, 72, 74, 91, 96, 329, 335, 337], "messag": [11, 59, 67, 78, 89, 107, 115, 138, 140, 144, 146, 242, 339], "s": [11, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 62, 88, 114, 163, 235, 236, 237, 302, 330, 331, 332, 333, 334, 335, 338, 339, 340], "with_traceback": 11, "tb": 11, "self": [11, 308, 335, 340], "__traceback__": 11, "name": [12, 13, 14, 15, 16, 17, 18, 19, 23, 30, 31, 32, 33, 34, 36, 38, 43, 44, 46, 48, 49, 51, 54, 55, 118, 119, 126, 128, 145, 184, 208, 224, 246, 251, 254, 255, 261, 262, 266, 267, 273, 283, 284, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "base": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320, 331, 333, 334, 335, 336, 340], "str": [12, 13, 14, 15, 17, 18, 19, 20, 23, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 54, 55, 59, 67, 69, 70, 72, 78, 81, 85, 89, 94, 107, 115, 119, 122, 126, 128, 134, 136, 138, 140, 144, 146, 184, 208, 220, 223, 242, 246, 247, 248, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 286, 289, 295, 300, 302, 309, 310, 311, 316, 321, 322, 334, 335, 338, 340], "attribut": [12, 56, 58, 66, 69, 75, 81, 88, 92, 97, 103, 106, 110, 118, 130, 134, 140, 145, 148, 157, 163, 170, 174, 177, 181, 193, 202, 205, 211, 217, 220, 227, 231, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320, 331], "none": [13, 14, 15, 16, 17, 18, 19, 21, 29, 32, 33, 34, 36, 39, 40, 44, 47, 48, 49, 51, 55, 58, 66, 69, 75, 81, 88, 92, 103, 106, 118, 119, 129, 137, 140, 157, 159, 163, 165, 166, 171, 173, 193, 194, 206, 212, 227, 231, 240, 274, 289, 295, 300, 301, 302, 306, 311, 316, 317, 323, 335, 340], "add": [13, 17, 32, 36, 44, 311, 329, 330, 331, 335], "option": [13, 14, 15, 17, 18, 19, 29, 32, 33, 34, 36, 44, 51, 58, 62, 66, 69, 70, 75, 76, 81, 86, 88, 103, 105, 106, 118, 120, 129, 137, 140, 141, 142, 143, 144, 157, 159, 163, 165, 171, 173, 206, 212, 220, 227, 230, 231, 234, 240, 245, 289, 291, 292, 294, 300, 301, 302, 304, 306, 307, 312, 316, 317, 322, 323, 333, 340], "If": [13, 14, 15, 17, 18, 19, 21, 22, 32, 33, 34, 36, 44, 47, 51, 52, 55, 58, 59, 61, 62, 66, 68, 74, 78, 91, 96, 106, 109, 110, 115, 117, 119, 137, 145, 147, 157, 158, 208, 221, 227, 228, 231, 232, 240, 289, 297, 298, 300, 301, 302, 306, 315, 316, 317, 318, 323, 325, 328, 329, 331, 333, 335, 337, 339, 340], "empti": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 55, 59, 72, 78, 94, 115, 329], "g": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 51, 106, 137, 193, 289, 300, 302, 316, 329, 331, 333, 334, 335, 339, 340], "x0": [13, 14, 15, 17, 18, 19, 32, 33, 34, 331, 332, 338], "ki\u1ec3u": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328], "tr\u1ea3": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333], "v\u1ec1": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336], "ad": [13, 17, 32, 36, 44, 106, 227, 231, 240, 334, 335, 338], "\u0111\u01b0a": [13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 36, 43, 44, 47, 48, 49, 51, 52, 55, 61, 68, 74, 88, 91, 96, 106, 109, 110, 117, 118, 119, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 281, 283, 289, 301, 306, 317, 323, 324, 325, 326, 327, 328, 334], "qiskitoptimizationerror": [13, 14, 15, 17, 18, 19, 21, 22, 32, 33, 34, 36, 43, 44, 51, 52, 61, 68, 74, 91, 96, 106, 109, 117, 118, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 283, 289, 323, 324, 325, 326, 327, 328, 329, 331], "alreadi": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 154, 156], "occupi": [13, 17, 32], "kei": [14, 15, 18, 19, 33, 34, 119, 134, 136, 254, 261, 266, 267, 273, 289, 300, 302, 316, 335, 336, 338, 340], "key_format": [14, 15, 18, 19, 33, 34], "var_dict": [14, 18, 33], "construct": [14, 15, 18, 19, 33, 34, 81, 110, 134, 140, 155, 231, 262, 274, 289, 329, 331, 333, 334, 340], "dictionari": [14, 18, 33, 38, 46, 54, 128, 134, 136, 254, 261, 266, 273, 289, 300, 302, 309, 316, 329, 336, 340], "format": [14, 15, 18, 19, 20, 33, 34, 163, 170, 174, 181, 182, 184, 190, 202, 205, 208, 211, 217, 241, 329, 330, 331, 336], "union": [14, 15, 17, 18, 19, 22, 23, 30, 31, 32, 33, 34, 35, 36, 39, 40, 44, 48, 49, 51, 75, 81, 88, 103, 106, 118, 119, 134, 137, 140, 157, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 183, 187, 190, 191, 193, 196, 200, 202, 203, 205, 207, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 293, 300, 302, 309, 316], "int": [14, 15, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 48, 49, 51, 54, 62, 66, 77, 81, 83, 84, 85, 88, 110, 113, 119, 134, 136, 137, 140, 142, 143, 145, 157, 159, 163, 164, 165, 167, 168, 171, 173, 175, 177, 178, 179, 182, 183, 186, 187, 191, 193, 196, 197, 199, 200, 203, 206, 207, 210, 211, 212, 213, 214, 215, 218, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 294, 296, 300, 302, 313, 316, 330, 331, 334, 335, 336, 338, 339, 340], "sequenc": [14, 15, 18, 19, 33, 34], "otherwis": [14, 15, 18, 19, 33, 34, 35, 51, 67, 89, 107, 116, 138, 145, 146, 220, 231, 235, 236, 242, 244, 315, 318, 325, 336], "element": [14, 15, 18, 19, 33, 34, 134, 135, 323, 324, 326, 327], "substitut": [14, 15, 18, 19, 33, 34, 50, 51, 134, 136, 139, 329], "dict": [14, 18, 33, 36, 38, 39, 40, 44, 46, 51, 54, 69, 70, 81, 85, 128, 134, 136, 171, 182, 191, 247, 251, 252, 254, 258, 259, 261, 262, 263, 266, 270, 271, 273, 274, 276, 277, 289, 295, 300, 302, 309, 311, 316, 322, 329, 340], "map": [14, 18, 21, 33, 38, 46, 52, 54, 62, 224, 289, 325, 328, 330, 331, 335, 340], "instanc": [14, 15, 18, 19, 33, 34, 58, 88, 90, 91, 104, 106, 110, 134, 135, 137, 157, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 206, 208, 209, 212, 216, 219, 281, 301, 306, 317, 330, 331, 335, 336, 337, 338, 340], "taken": [14, 15, 18, 19, 33, 34, 331, 334], "less": [14, 15, 18, 19, 33, 34, 36, 44, 77], "than": [14, 15, 18, 19, 21, 33, 34, 36, 44, 66, 77, 110, 145, 283, 289, 325, 334, 335, 340], "one": [14, 15, 18, 19, 33, 34, 66, 75, 88, 106, 110, 137, 145, 157, 221, 224, 241, 331, 334, 335, 337, 340], "attempt": [14, 15, 18, 19, 33, 34, 331], "more": [14, 15, 18, 19, 21, 33, 34, 66, 110, 145, 325, 329, 330, 331, 334, 335], "nest": [14, 15, 18, 19, 33, 34], "var_list": [15, 19, 34], "list": [15, 19, 22, 23, 30, 34, 35, 36, 37, 39, 40, 44, 45, 53, 56, 65, 75, 79, 80, 81, 86, 88, 102, 103, 105, 106, 118, 124, 126, 127, 134, 135, 137, 140, 154, 155, 156, 157, 159, 161, 163, 164, 167, 168, 170, 174, 175, 177, 178, 181, 183, 186, 187, 196, 199, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 258, 259, 262, 263, 266, 270, 271, 274, 276, 277, 301, 306, 317, 329, 331, 333, 334, 335, 340], "delet": 16, "all": [16, 29, 62, 72, 75, 94, 98, 211, 212, 213, 220, 281, 289, 330, 331, 333, 334, 335, 336, 337, 338, 340], "lowerbound": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 329, 330, 339], "upperbound": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 329, 330, 339], "lower": [18, 19, 33, 34, 51, 66, 110, 145, 256, 268, 285, 329, 330, 336], "bound": [18, 19, 33, 34, 51, 66, 110, 145, 224, 285, 329, 330, 335, 338, 339], "upper": [18, 19, 33, 34, 51, 66, 110, 145, 256, 266, 268, 329, 330], "repres": [20, 43, 81, 83, 84, 106, 122, 154, 160, 163, 170, 174, 181, 202, 205, 211, 217, 330, 331, 332, 334, 338, 340], "qubit_op": [21, 52, 325, 328], "offset": [21, 39, 40, 52, 274, 325, 328, 331, 334, 335, 336, 337], "linear": [21, 23, 27, 36, 37, 38, 39, 40, 44, 48, 106, 118, 137, 145, 231, 241, 251, 254, 256, 257, 258, 259, 260, 261, 262, 274, 323, 324, 325, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340], "fals": [21, 35, 62, 69, 92, 116, 145, 244, 261, 272, 273, 289, 300, 302, 315, 316, 318, 325, 333, 340], "creat": [21, 39, 40, 88, 106, 137, 154, 155, 156, 157, 162, 166, 169, 176, 180, 185, 188, 198, 201, 204, 206, 209, 212, 216, 219, 254, 266, 283, 325, 331, 332, 334, 336, 338], "qubit": [21, 52, 81, 83, 84, 88, 301, 306, 317, 325, 328, 332, 334, 335, 337, 338, 340], "oper": [21, 52, 81, 85, 145, 289, 295, 301, 306, 311, 315, 317, 318, 325, 328, 331, 333, 334, 335, 338, 340], "shift": [21, 325, 331, 332], "valu": [21, 22, 35, 43, 52, 56, 62, 63, 66, 75, 77, 79, 81, 82, 88, 97, 103, 110, 111, 118, 119, 120, 128, 129, 130, 134, 136, 137, 140, 141, 145, 149, 152, 155, 157, 177, 206, 210, 212, 231, 247, 252, 254, 258, 259, 263, 266, 270, 271, 276, 277, 289, 300, 301, 302, 306, 315, 316, 317, 318, 319, 320, 323, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "same": [21, 22, 51, 52, 319, 320, 325, 328, 330, 331, 335, 337, 338, 339], "order": [21, 52, 118, 207, 325, 328, 329, 331, 333, 334, 340], "th": [21, 52, 255, 325, 328], "see": [21, 52, 69, 140, 289, 325, 328, 330, 334, 335, 339, 340], "issu": [21, 52, 59, 78, 115, 325, 328], "1148": [21, 52, 325, 328], "detail": [21, 52, 69, 325, 328, 330, 331, 334, 339, 340], "operatorbas": [21, 289, 293, 300, 301, 306, 317, 325, 328], "Ising": [21, 52, 106, 325, 328, 330, 331, 336], "hamiltonian": [21, 52, 106, 193, 289, 300, 325, 328, 330, 331, 337, 338, 340], "bool": [21, 35, 62, 69, 71, 77, 92, 93, 116, 145, 157, 244, 261, 272, 273, 289, 297, 298, 299, 300, 302, 308, 314, 315, 316, 318, 325, 339], "true": [21, 35, 62, 73, 77, 95, 116, 157, 244, 289, 297, 298, 315, 318, 325, 329, 331, 333, 334, 335, 338, 339, 340], "x": [21, 22, 35, 36, 44, 51, 56, 75, 77, 79, 81, 103, 118, 121, 134, 140, 145, 148, 160, 182, 193, 222, 224, 226, 229, 231, 232, 233, 239, 243, 247, 252, 258, 259, 263, 270, 271, 274, 276, 277, 325, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340], "2": [21, 51, 62, 66, 98, 118, 132, 145, 211, 212, 231, 232, 266, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "treat": [21, 325], "term": [21, 77, 106, 137, 227, 231, 232, 262, 325, 329, 330, 331, 334, 335, 336, 338, 340], "sinc": [21, 72, 94, 325, 330, 334, 340], "1": [21, 58, 62, 66, 69, 77, 99, 110, 118, 131, 134, 136, 137, 145, 153, 157, 159, 163, 164, 167, 168, 174, 177, 178, 181, 186, 193, 199, 200, 202, 203, 205, 211, 217, 218, 224, 231, 232, 266, 289, 300, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "els": [21, 69, 92, 334, 335, 336], "pauli": [21, 289, 325, 331, 334, 335, 340], "xs": [21, 325], "ani": [21, 69, 70, 112, 118, 123, 231, 246, 251, 254, 256, 262, 266, 268, 274, 283, 289, 295, 300, 302, 309, 311, 316, 322, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "zs": [21, 325], "notimplementederror": [21, 325], "input": [21, 22, 81, 83, 206, 212, 295, 311, 325, 330, 331, 340], "listop": [21, 325], "whether": [22, 35, 59, 67, 69, 71, 72, 78, 89, 92, 93, 94, 97, 107, 115, 116, 137, 138, 146, 242, 244, 261, 272, 273, 289, 299, 300, 302, 308, 314, 315, 316, 318, 340], "solut": [22, 35, 62, 75, 76, 81, 86, 105, 106, 118, 124, 132, 133, 140, 148, 155, 157, 160, 182, 210, 331, 333, 334, 337, 338, 339], "feasibl": [22, 35, 62, 66, 133, 333, 334, 335], "along": 22, "violat": [22, 66], "ndarrai": [22, 35, 36, 39, 40, 44, 56, 75, 76, 79, 81, 103, 112, 118, 121, 129, 134, 140, 141, 152, 155, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 182, 183, 184, 187, 190, 191, 196, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 239, 243, 247, 251, 252, 254, 258, 259, 260, 262, 263, 266, 270, 271, 272, 274, 276, 277, 289, 300, 302, 307, 316, 340], "param": [22, 58, 210, 333, 336], "len": [22, 334, 335, 336, 338, 340], "total": [22, 24, 25, 26, 29, 187, 210, 301, 306, 317, 334, 337, 338, 339], "var": [22, 118, 224, 331, 339], "linearconstraint": [23, 36, 37], "correspond": [23, 30, 31, 106, 120, 128, 137, 153, 157, 164, 168, 178, 183, 200, 203, 207, 218, 253, 255, 260, 261, 264, 265, 267, 272, 273, 284, 323, 324, 325, 326, 327, 329, 330, 331, 334, 336, 337, 340], "indexerror": [23, 30, 48, 49, 119], "size": [23, 30, 66, 118, 163, 166, 331, 335, 337], "keyerror": [23, 30, 48, 49, 119], "doe": [23, 30, 47, 48, 49, 55, 62, 106, 228, 276, 277, 334], "exist": [23, 30, 36, 44, 47, 48, 49, 52, 228, 232, 328, 330, 334, 338], "vartyp": [29, 283, 284, 338], "specifi": [29, 58, 66, 69, 88, 92, 106, 110, 112, 118, 137, 145, 157, 163, 166, 170, 174, 181, 202, 205, 211, 217, 221, 251, 262, 289, 300, 302, 316, 329, 334, 337], "filter": [29, 331], "count": [29, 81, 85, 191, 289, 300, 301, 302, 306, 316, 317, 335, 336], "quadraticconstraint": [30, 44, 45], "sens": [36, 44, 221, 235, 236, 246, 251, 262, 274, 329, 330, 335, 340], "rh": [36, 44, 246, 251, 262, 329, 330, 335], "form": [36, 44, 88, 106, 137, 157, 238, 239, 241, 272, 273, 274, 331, 334, 335, 337, 340], "spmatrix": [36, 39, 40, 44, 251, 254, 262, 266, 274], "coeffici": [36, 39, 40, 44, 51, 224, 251, 254, 255, 260, 261, 262, 266, 267, 272, 273, 274, 325, 329, 330, 334], "left": [36, 247, 252, 253, 263, 264, 265, 330, 334], "hand": [36, 44, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265], "side": [36, 44, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265, 330, 340], "constraintsens": [36, 44, 246, 250, 251, 262, 329], "eq": [36, 44, 224, 329, 330], "denot": [36, 44, 329, 331, 335], "ge": [36, 44, 329, 330], "greater": [36, 44, 283, 334, 335], "l": [36, 44, 333, 335], "le": [36, 44, 329, 330], "right": [36, 44, 246, 249, 251, 262, 330, 336], "c0": [36, 329, 334, 337, 338, 339], "properti": [37, 38, 41, 42, 45, 46, 50, 53, 54, 57, 60, 70, 71, 75, 76, 81, 82, 83, 84, 85, 86, 87, 90, 93, 104, 105, 108, 111, 113, 120, 123, 124, 125, 126, 127, 128, 129, 135, 136, 140, 141, 142, 143, 144, 165, 172, 179, 195, 197, 213, 215, 223, 230, 234, 245, 248, 249, 250, 253, 256, 257, 264, 265, 268, 269, 275, 278, 279, 280, 282, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 321, 322, 333], "its": [38, 46, 54, 62, 140, 207, 254, 266, 289, 300, 302, 316, 331, 334, 335, 340], "part": [39, 40, 262, 274, 275, 278, 279, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tupl": [39, 40, 44, 51, 112, 134, 135, 136, 262, 266, 267, 273, 274, 284, 328, 331, 334, 340], "quadraticobject": 42, "wrap": [43, 66, 69, 92, 145, 331, 333], "80": 43, "pretti": [43, 122], "print": [43, 69, 71, 92, 93, 118, 122, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "text": [43, 231, 232, 329, 330, 340], "width": 43, "output": [43, 66, 69, 81, 84, 92, 145, 272, 273, 330, 338], "disabl": 43, "note": [43, 231, 323, 324, 329, 330, 334, 335, 337, 338, 339], "might": [43, 331], "exce": 43, "exampl": [43, 266, 330, 331, 332, 333, 334, 335, 337, 338, 340], "long": [43, 333], "won": 43, "t": [43, 158, 329, 333, 334, 335, 336, 337, 338], "non": [43, 72, 94, 326, 327, 339, 340], "printabl": 43, "q0": [44, 329], "filenam": [47, 55, 184, 208], "load": [47, 323, 324, 333, 335, 339, 340], "filenotfounderror": 47, "present": [47, 335], "pythonpath": 47, "remov": [48, 49, 329], "quadraticprogramstatu": [50, 329], "infeas": [50, 51, 139, 329, 331], "due": [50, 74, 91, 96, 139, 329, 335], "replac": [51, 66, 110, 134, 145, 330, 331, 340], "mean": [51, 193, 289, 300, 302, 316, 331], "weight": [51, 106, 134, 136, 159, 160, 177, 179, 208, 334, 335, 337, 340], "copi": [51, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "everyth": 51, "refer": [51, 58, 66, 137, 145, 157, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 231, 261, 273, 330, 331, 333, 334, 336], "make": [51, 163, 166, 329, 334, 335, 340], "sure": [51, 335], "indic": [51, 161, 164, 175, 178, 183, 203, 207, 218, 254, 261, 266, 267, 273, 323, 334], "match": [51, 118, 231, 276, 277], "correctli": 51, "updat": [51, 62, 63, 332, 339, 340], "accordingli": [51, 336], "y": [51, 62, 145, 160, 231, 232, 329, 330, 331, 332, 334, 335, 339, 340], "statu": [51, 56, 75, 81, 103, 118, 130, 134, 140, 145, 148, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340], "invalid": [51, 88, 106, 137], "multipl": [51, 331], "time": [51, 62, 329, 331, 333, 334, 335, 337, 338, 339, 340], "zero": [51, 66, 110, 145, 334, 335, 336, 340], "write": [55, 92, 335], "written": [55, 335], "directori": [55, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "my_problem": 55, "append": [55, 331, 335, 338, 340], "end": [55, 97, 131, 231, 232, 329, 332, 338, 339], "suffix": 55, "oserror": 55, "docplexexcept": 55, "fval": [56, 75, 81, 82, 103, 118, 134, 140, 148, 331, 333, 336, 338, 339], "state": [56, 63, 106, 137, 153, 154, 157, 191, 289, 292, 300, 301, 306, 315, 317, 318, 330, 331, 333, 334, 335, 338, 340], "admmoptim": [56, 333], "found": [56, 59, 62, 75, 78, 103, 115, 118, 120, 129, 134, 334, 335, 339, 340], "admm": [56, 58, 61, 62, 63], "admmstat": [56, 57], "intern": [56, 63, 88, 106, 137, 157, 254, 266, 336, 338], "comput": [56, 58, 62, 63, 79, 106, 157, 191, 210, 315, 318, 331, 333, 335, 338], "optimizationresultstatu": [56, 75, 81, 103, 118, 125, 134, 140, 151, 331, 339], "termin": [56, 75, 81, 103, 118, 125, 130, 134, 140, 333], "qubo_optim": [58, 333], "continuous_optim": [58, 333], "optimizationalgorithm": [58, 66, 69, 77, 88, 92, 106, 110, 137, 145, 157], "implement": [58, 59, 62, 63, 78, 110, 115, 116, 153, 157, 244, 331, 333, 334, 340], "heurist": [58, 289, 333, 334, 335, 340], "introduc": [58, 137, 220, 289, 300, 330, 331, 336, 337], "gambella": [58, 333], "c": [58, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "simonetto": [58, 333], "2020": [58, 333, 336, 340], "multi": [58, 66, 110, 112, 145, 333], "block": [58, 62, 333, 340], "mix": [58, 333, 335], "arxiv": [58, 137, 157, 193, 224, 231, 289, 300, 330, 331, 332, 333, 334, 335, 338], "preprint": [58, 331, 332, 333], "2001": [58, 333], "02069": [58, 333], "minimumeigenoptim": [58, 134, 135, 137, 157, 332, 333, 334, 335, 336, 337, 338, 339, 340], "initi": [58, 62, 63, 66, 69, 92, 106, 110, 137, 145, 153, 154, 155, 156, 157, 246, 281, 289, 292, 300, 302, 307, 316, 331, 332, 333, 334, 336, 338, 340], "numpyminimumeigensolv": [58, 137, 331, 332, 333, 334, 335, 336, 337, 338], "slsqpoptim": 58, "admmparamet": [58, 60, 333], "check": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244, 335, 337], "incompat": [59, 67, 68, 74, 78, 89, 91, 96, 107, 115, 117, 138, 139, 146, 147, 241, 242], "were": [59, 78, 115, 329, 330], "tri": [61, 68, 74, 91, 96, 109, 117, 139, 147, 158, 334], "admmoptimizationresult": 61, "appli": [61, 66, 68, 74, 91, 96, 106, 109, 112, 117, 137, 139, 145, 147, 157, 158, 330, 331, 336, 337, 338, 339, 340], "rho_initi": [62, 63, 333], "10000": 62, "factor_c": [62, 333], "100000": 62, "beta": [62, 333, 338, 340], "1000": [62, 66, 333, 334, 337, 339], "maxit": [62, 289, 300, 302, 316, 333, 334, 336, 339, 340], "10": [62, 224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tol": [62, 333], "0001": [62, 66], "max_tim": 62, "inf": 62, "three_block": [62, 333], "vary_rho": 62, "tau_incr": 62, "tau_decr": 62, "mu_r": 62, "mu_merit": 62, "warm_start": 62, "paramet": [62, 63, 66, 69, 70, 110, 137, 145, 153, 157, 289, 300, 302, 316, 319, 320, 333, 334, 335, 338, 339, 340], "rho": [62, 63, 333], "penal": [62, 333], "factor": [62, 88, 106, 137, 157, 227, 230, 231, 232, 234, 240, 245, 336], "when": [62, 66, 88, 106, 118, 137, 145, 153, 157, 163, 165, 166, 171, 289, 329, 338, 339, 340], "decis": [62, 297, 334, 335, 340], "maximum": [62, 66, 145, 159, 177, 181, 206, 212, 332, 337], "iter": [62, 81, 85, 88, 97, 99, 134, 135, 137, 140, 143, 145, 332, 333, 336, 340], "toler": [62, 66, 333], "residu": [62, 333], "converg": [62, 333, 334], "second": [62, 134, 135, 330, 335], "boolean": [62, 289, 340], "flag": [62, 289, 340], "select": [62, 88, 221, 335, 337], "rule": 62, "increas": 62, "each": [62, 63, 81, 85, 97, 101, 137, 145, 161, 214, 289, 300, 302, 316, 331, 332, 333, 334, 335, 336, 337, 340], "modifi": [62, 153, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "accord": [62, 80, 153, 157, 331], "primal": [62, 333], "dual": [62, 333], "update_rho_by_residu": 62, "boyd": [62, 333], "parikh": [62, 333], "n": [62, 193, 206, 212, 231, 232, 329, 332, 333, 334, 335, 336, 337, 338, 340], "chu": [62, 333], "peleato": [62, 333], "b": [62, 329, 330, 333, 334, 335, 339], "eckstein": [62, 333], "j": [62, 77, 157, 193, 231, 232, 267, 333, 334, 335, 336, 338, 340], "2011": [62, 333], "distribut": [62, 193, 289, 333, 334, 335, 338, 340], "statist": [62, 331, 333], "learn": [62, 333, 340], "altern": [62, 333, 335], "direct": [62, 333, 340], "multipli": [62, 333, 338], "foundat": [62, 333], "trend": [62, 333], "machin": [62, 333], "122": [62, 333], "merit": 62, "pre": [62, 157, 158, 335], "relax": [62, 155, 157], "first": [62, 66, 110, 134, 135, 145, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340], "guarante": [62, 66, 333, 335], "even": [62, 330, 333, 334, 335], "should": [62, 97, 110, 118, 153, 157, 326, 327, 331, 334, 340], "tune": 62, "help": [62, 331, 340], "consid": [62, 331, 334, 335, 336], "hint": 62, "where": [62, 160, 193, 211, 212, 213, 231, 232, 255, 267, 329, 330, 334, 335, 340], "process": [62, 339], "op": [63, 331, 337, 340], "keep": [63, 238, 290, 335], "track": 63, "variou": 63, "store": [63, 66, 97, 98, 99, 100, 137, 145, 254, 266, 289, 300, 302, 314, 316, 336], "dure": [63, 106, 289, 300, 302, 316, 335], "recreat": 63, "third": [63, 335], "abc": [64, 110, 114, 189, 237], "abstract": [64, 65, 110, 114, 115, 117, 170, 189, 190, 192, 237, 238, 239, 246, 247, 334], "aggreg": [64, 101, 157, 331], "minimumeigenoptimizationresult": [65, 102, 109, 134, 135, 158], "combin": [65, 102, 334, 335, 337], "solutionsampl": [65, 75, 81, 86, 102, 103, 105, 118, 124, 331, 339], "sampl": [65, 75, 81, 86, 101, 102, 103, 105, 118, 121, 148, 150, 151, 289, 334, 335, 338, 339, 340], "rhobeg": 66, "rhoend": 66, "maxfun": 66, "disp": [66, 69, 92, 339], "catol": 66, "0002": 66, "trial": [66, 110, 145, 334, 335], "clip": [66, 110, 145], "100": [66, 110, 145, 206, 212, 289, 300, 302, 316, 333, 335, 336, 339, 340], "multistartoptim": [66, 145], "scipi": [66, 140, 145], "cobyla": [66, 333, 336, 339], "fmin_cobyla": 66, "doc": [66, 69, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "14": [66, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gener": [66, 77, 80, 118, 145, 153, 193, 194, 329, 330, 331, 334, 335, 337, 339, 340], "argument": [66, 145, 333, 340], "pass": [66, 92, 145, 157, 227, 231, 240, 289, 298, 300, 302, 316, 338, 340], "constructor": [66, 145, 283], "c\u00e1c": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 331, 332, 333], "v\u00ed": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 332, 334], "d\u1ee5": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 332, 334], "qiskit_optim": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 300, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "import": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "here": [66, 69, 92, 106, 137, 145, 302, 331, 334, 335, 338, 340], "take": [66, 106, 137, 145, 331, 334, 335, 337, 340], "later": [66, 145, 333], "invok": [66, 134, 135, 145], "local": [66, 112, 145, 335, 340], "optimum": [66, 145, 334, 336], "consist": [66, 81, 106, 145, 262, 284, 338, 340], "onli": [66, 67, 77, 99, 106, 145, 146, 157, 221, 227, 235, 236, 289, 300, 302, 316, 324, 330, 331, 332, 334, 335, 339, 340], "reason": 66, "chang": [66, 153, 157, 338], "final": [66, 141, 145, 331, 334, 335, 336, 340], "accuraci": [66, 145], "precis": [66, 329], "trust": 66, "region": 66, "control": [66, 334, 335, 338], "frequenc": 66, "impli": 66, "evalu": [66, 259, 271, 277, 289, 300, 301, 302, 306, 315, 316, 317, 318, 334, 335, 336, 340], "absolut": 66, "guess": [66, 110, 145], "uniformli": [66, 110, 145, 193], "drawn": [66, 110, 145, 334], "potenti": [66, 110, 145, 334], "unbound": [66, 110, 145, 256, 268], "correspondingli": [66, 110, 145], "contain": [67, 75, 134, 146, 221, 225, 228, 256, 268, 289, 300, 302, 316, 319, 320, 323, 324, 326, 330, 331, 335, 340], "explain": [67, 89, 107, 138, 146, 242, 329, 330, 335], "describ": [67, 89, 107, 138, 140, 144, 146, 242, 309, 334, 340], "try": [68, 74, 91, 96, 109, 117, 139, 147, 158, 329, 331, 334, 335, 340], "cplex_paramet": [69, 339], "is_cplex_instal": 69, "www": [69, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "en": [69, 159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "ico": 69, "topic": 69, "displai": [71, 93, 329, 339], "inform": [71, 93, 118, 123, 145, 206, 212, 238, 239, 314, 319, 320, 331, 334, 340], "accept": [72, 94], "throw": 72, "determin": [72, 231, 261, 272, 273, 335, 340], "static": [73, 79, 95, 173, 182, 184, 191, 206, 208, 210, 212, 242], "depend": [74, 96, 334, 335, 338, 339], "sdp_solut": 75, "explor": [75, 332], "sdp": [75, 76], "num_cut": 77, "sort_cut": 77, "unique_cut": 77, "seed": [77, 173, 193, 206, 212, 334, 335, 336, 337], "max": [77, 80, 181, 183, 185, 335, 337], "cut": [77, 79, 80, 181, 183, 185, 330, 335, 337, 339, 340], "sum_": [77, 193, 231, 232, 334, 335], "w": [77, 329, 333, 334, 335, 336], "therefor": [77, 338, 340], "encod": [77, 80, 224, 329, 335, 339], "neg": [77, 332, 334, 340], "adjac": [77, 79, 184, 210, 340], "matrix": [77, 79, 121, 184, 210, 254, 266, 329, 334, 336, 338, 340], "sort": [77, 336, 338], "uniqu": 77, "thu": [77, 330, 331, 334, 336], "random": [77, 173, 193, 206, 212, 289, 300, 302, 316, 334, 335, 336, 337, 340], "adj_matrix": [79, 210, 334], "numpi": [79, 182, 184, 191, 193, 331, 333, 334, 335, 336, 337, 338, 340], "arrai": [79, 163, 170, 174, 181, 182, 184, 190, 202, 205, 211, 217, 231, 232, 254, 260, 266, 272, 329, 331, 335, 336, 338, 339, 340], "operation_count": 81, "n_input_qubit": 81, "n_output_qubit": 81, "intermediate_fv": 81, "threshold": [81, 137, 331, 332], "raw_sampl": [81, 103], "specif": [81, 140, 329, 334, 335], "perform": [81, 85], "per": [81, 85, 289, 300, 302, 316, 319, 320, 340], "intermedi": [81, 82, 97, 98, 100, 134, 135, 137, 289, 300, 302, 314, 316, 331, 336, 337], "minim": [81, 106, 112, 118, 145, 235, 236, 241, 274, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340], "expect": [81, 281, 289, 301, 306, 315, 317, 318, 334, 335, 336, 340], "probabl": [81, 101, 103, 148, 331, 334, 336, 338, 339, 340], "getter": [82, 83, 84, 87, 165, 172, 179, 195, 197, 213, 215], "raw": [86, 105], "num_value_qubit": 88, "num_iter": [88, 332], "quantum_inst": [88, 331, 332, 333, 334, 335, 336, 337, 338, 339], "penalti": [88, 106, 137, 157, 227, 231, 232, 240, 331, 334, 335, 336, 338], "ga": [88, 332], "minimum": [88, 103, 106, 108, 137, 206, 212, 289, 300, 301, 302, 306, 315, 316, 317, 318, 330, 331, 332, 333, 334, 335, 336, 337], "improv": [88, 336, 340], "quantuminst": [88, 90, 331, 334, 335, 337, 338, 339], "backend": [88, 289, 300, 301, 302, 306, 316, 317, 332, 334, 336, 337, 339, 340], "aer": [88, 334, 336, 337, 339], "statevector": [88, 336], "quadraticprogramconvert": [88, 106, 137, 157, 220, 224, 227, 231, 240], "By": [88, 106, 137, 157, 334], "quadraticprogramtoqubo": [88, 106, 137, 157, 330, 334, 337, 338], "typeerror": [88, 106, 119, 137, 281], "circuit": [90, 153, 154, 156, 157, 289, 300, 302, 316, 334, 335, 336, 338, 340], "attributeerror": 91, "been": [91, 300, 301, 306, 316, 317, 319, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "is_gurobi_instal": 92, "suppress": 92, "info": 92, "stdout": 92, "sy": [92, 335], "devnul": 92, "def": [92, 331, 334, 335, 336, 338, 340], "noop": 92, "arg": 92, "kwarg": 92, "close": [92, 334, 335, 340], "flush": 92, "writelin": 92, "enum": [97, 130], "recursiveminimumeigenoptim": 97, "last": [99, 134, 135, 331, 334, 335], "No": [100, 329, 330, 331, 332, 334, 337, 338, 340], "baseaggreg": [101, 157], "averag": [101, 102, 336], "min_eigen_solver_result": [103, 336, 337], "eigen": [103, 106, 134, 137, 330, 331, 333, 334, 337], "minimumeigensolv": [103, 104, 105, 106, 108, 302, 331, 333, 336], "minimumeigensolverresult": [103, 104, 301, 306, 317], "obtain": [103, 104, 118, 132, 134, 135, 155, 331, 334, 335, 338, 339, 340], "underli": [103, 330, 338], "min_eigen_solv": [106, 335, 337], "solver": [106, 137, 157, 158, 331, 333, 335, 338], "assum": [106, 334, 340], "thereof": 106, "expand": 106, "translat": [106, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 338], "whose": [106, 119, 164, 168, 178, 187, 200, 203, 207, 218, 334, 337, 340], "eigenst": [106, 301, 306, 315, 317, 318, 334, 336, 340], "ground": [106, 301, 306, 317, 330, 331, 338], "good": [106, 334], "outlin": [106, 137], "how": [106, 137, 329, 330, 331, 335, 336, 338, 340], "scale": [106, 137, 227, 231, 240, 298, 335, 336, 340], "todo": 106, "logic": [106, 157, 323], "eigensolv": [106, 108, 315, 318, 332, 334, 335, 336, 337], "valueerror": [110, 301, 306, 317], "smaller": [110, 289, 340], "callabl": [112, 289, 300, 302, 305, 316], "raw_result": 118, "_": [118, 335, 336, 338], "binary_var": [118, 329, 330, 331, 332, 333, 335, 338, 339, 340], "x1": [118, 331, 332, 338], "x2": [118, 331, 332, 338], "x3": [118, 338], "variable_nam": 118, "variables_dict": 118, "maintain": 118, "failur": [118, 129, 222, 226, 229, 233, 331], "neither": 119, "nor": 119, "zi": 121, "zj": 121, "correl": 121, "dump": 123, "leftov": 123, "succeed": 133, "histori": [134, 137, 319, 320, 322, 333, 336], "recurs": [134, 137, 139, 331], "either": [134, 136, 157, 261, 273, 329], "minimumeigenoptimizerresult": [134, 135], "step": [134, 135, 289, 300, 302, 316, 319, 320, 332, 334, 338], "min_num_vars_optim": [134, 135, 137, 331], "min_num_var": [137, 331], "intermediateresult": 137, "last_iter": 137, "meta": [137, 157], "top": [137, 283, 289, 329, 340], "call": [137, 301, 302, 306, 317, 331, 340], "internal_optim": 137, "bravyi": [137, 331], "et": [137, 157, 231, 335, 336], "al": [137, 157, 231, 335, 336], "2019": [137, 231, 331, 332], "obstacl": [137, 331], "prepar": [137, 331, 335, 336], "symmetri": [137, 331], "protect": [137, 331], "1910": [137, 331], "08980": [137, 331], "until": [137, 332, 333, 334, 335], "scheme": [137, 331], "onc": [137, 331, 334, 337, 338, 340], "reach": [137, 334, 335], "everi": [137, 227, 231, 240, 308, 334, 335], "after": [137, 330, 334, 339], "remain": [137, 332, 338], "num_min_var": 137, "fx": 140, "imod": 140, "smode": 140, "slsqp": [140, 145], "exit": [140, 142, 144], "mode": [140, 142, 144, 220, 221], "fmin_slsqp": [140, 145], "actual": [141, 335, 337], "acc": 145, "06": [145, 340], "iprint": 145, "full_output": 145, "13": [145, 329, 331, 333, 334, 335, 337, 338, 340], "continuous_var": [145, 329, 333], "maxim": [145, 163, 165, 166, 179, 235, 236, 329, 330, 334, 336, 337, 338, 339], "request": 145, "verbos": 145, "silent": 145, "summari": 145, "upon": 145, "func": 145, "epsilon": [153, 157, 338], "factori": [153, 157, 335], "produc": [153, 338], "overridden": 153, "behavior": [153, 338], "mixer": [153, 156, 157, 289, 300, 338], "warm": [153, 154, 155, 157, 158, 289, 300], "regular": [153, 157], "xi": [153, 157], "5": [153, 157, 224, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "initial_vari": [154, 156], "quantumcircuit": [154, 156, 289, 291, 292, 293, 300, 302, 303, 316, 338, 340], "evolv": [156, 289, 300], "ry": [156, 334, 338], "theta": [156, 334, 335, 338], "rz": [156, 338, 340], "2beta": 156, "pre_solv": [157, 338], "relax_for_pre_solv": [157, 338], "25": [157, 331, 335, 336, 339], "num_initial_solut": 157, "warm_start_factori": 157, "must": [157, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "own": [157, 311], "inherit": 157, "daniel": 157, "egger": [157, 338, 340], "2009": [157, 289, 300, 338], "10095": [157, 289, 300, 338], "For": [157, 266, 301, 306, 317, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340], "correct": [157, 330, 335], "circuit_factori": 157, "explicit": 157, "warmstartqaoacircuitfactori": 157, "ignor": [157, 315, 318, 334], "warmstartqaoafactori": 157, "sever": [157, 330, 340], "next": [158, 331, 332, 338], "presolv": 158, "max_weight": [159, 177, 337], "max_number_of_bin": 159, "optimizationappl": [159, 167, 170, 177, 186, 193, 199], "bin": [159, 160, 161, 162, 334], "pack": [159, 160, 162, 199, 201, 335, 337], "wikipedia": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "wiki": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "bin_packing_problem": 159, "item": [159, 161, 177, 178, 336, 337, 340], "capac": [159, 177, 337], "plot": [160, 333, 334, 335, 336, 340], "calcul": [160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 227, 231, 240], "sum": [160, 187, 266, 334, 335, 336, 338], "respect": [160, 330, 331, 332, 333, 334, 339], "fig": [160, 340], "items_in_bin": 161, "graphoptimizationappl": [163, 174, 181, 202, 205, 211, 217, 337], "networkx": [163, 170, 173, 174, 181, 202, 205, 211, 217, 334, 337], "theori": [163, 202], "clique_": 163, "graph_theori": [163, 202], "suitabl": [163, 170, 174, 181, 202, 205, 211, 217, 331, 335], "build": [163, 170, 174, 181, 202, 205, 211, 217, 338], "instead": [163, 166, 333], "node": [164, 171, 173, 175, 183, 203, 206, 207, 211, 212, 213, 218, 334, 335, 337, 339], "subset": [167, 168, 187, 199, 200, 334, 337], "exact": [167, 169, 331, 333, 334, 335], "exact_cov": 167, "po": [171, 334, 337], "without": [171, 339], "color": [171, 334, 335], "posit": [171, 266, 335, 338], "num_nod": 173, "num_edg": 173, "edg": [173, 208, 334, 335, 337, 340], "partit": [174, 176, 186, 188, 334, 337], "graph_partit": 174, "divid": 175, "two": [175, 183, 329, 331, 334, 335, 337, 339, 340], "group": [175, 340], "knapsack_problem": 177, "maximum_cut": 181, "gset": [182, 184], "2d": 184, "number_set": 186, "partition_problem": 186, "half": 187, "answer": [190, 334, 335], "understand": [190, 331, 340], "state_vector": 191, "most": [191, 335, 340], "like": [191, 330], "num_sit": 193, "rng_or_se": 193, "sherrington": 193, "kirkpatrick": 193, "sk": [193, 194, 198], "over": [193, 334, 336], "spin": [193, 196, 331], "h": [193, 334, 335, 340], "sqrt": [193, 338], "w_": [193, 334, 335], "x_ix_j": 193, "x_i": [193, 231, 232, 329, 330, 334, 338], "pm": [193, 334], "configur": [193, 196, 340], "disord": 193, "chosen": [193, 289, 334, 335, 340], "independ": [193, 202], "notic": [193, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "variant": 193, "normal": [193, 335], "varianc": 193, "dmitri": 193, "panchenko": 193, "overview": [193, 330], "ab": [193, 289, 300, 335, 336], "1211": 193, "1094": 193, "site": [193, 197], "pseudo": 193, "default_rng": 193, "rtype": [195, 197], "set_pack": 199, "stabl": [202, 204], "independent_set_": 202, "travel": [205, 206, 209, 335, 337], "salesman": [205, 206, 209, 335, 337], "travelling_salesman_problem": 205, "low": [206, 212], "coordin": [206, 212], "prospect": [207, 334], "cycl": [207, 334], "tsplib": 208, "euc_2d": 208, "data": [208, 289, 300, 302, 316, 335], "z": [210, 231, 329, 330, 331, 334, 335, 339, 340], "citi": [210, 334], "length": [210, 340], "num_vehicl": [211, 212], "depot": [211, 212, 335, 337], "vehicl": [211, 212, 213, 214, 215, 216, 337], "rout": [211, 212, 214, 216, 337], "vehicle_routing_problem": 211, "depart": [211, 212, 213], "vertex": [217, 219, 334], "vertex_cov": [217, 337], "auto": 220, "slack": [220, 223, 231, 330], "conv": [220, 224, 240, 337], "problem2": [220, 224, 240], "To": [220, 329, 330, 333, 334, 338, 339, 340], "choos": [220, 333, 334, 335, 340], "There": [220, 231, 334, 335], "unsupport": [221, 232, 323, 324], "propos": [224, 333, 334], "integer_var": [224, 329, 330, 339], "sahar": 224, "karimi": 224, "pooya": 224, "ronagh": 224, "2017": [224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "practic": [224, 333, 334], "anneal": [224, 334], "1706": [224, 330], "01945": [224, 330], "back": [226, 229, 233, 331, 335], "begin": [231, 232, 329, 332, 338], "leq": [231, 232, 329, 330, 333, 335], "rightarrow": [231, 232, 332, 334], "p": [231, 232, 289, 300, 333, 336, 337, 340], "geq": [231, 232, 329, 330], "x_j": [231, 232, 334], "suppli": 231, "pattern": [231, 232], "thei": [231, 315, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "kept": 231, "fred": 231, "glover": 231, "formul": [231, 323, 329, 330, 331, 334, 339], "1811": 231, "11538": 231, "_flipproblemsens": [235, 236], "unchang": [235, 236], "anoth": [238, 239, 329, 331], "quadratic_program": [246, 251, 254, 262, 266, 274, 281, 283, 326, 327, 329], "quadraticprogramel": [246, 254, 266, 274, 283], "parent": [246, 251, 254, 262, 266, 274, 281, 282, 283], "linearexpress": [253, 264, 278], "express": [253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 273, 323], "spars": [254, 266, 289, 329, 340], "dok_matrix": [254, 257, 266, 269], "address": [255, 267, 331], "expressionbound": [256, 268], "gradient": [259, 271, 277], "use_nam": [261, 273, 329], "quadraticexpress": [265, 279], "compress": 266, "wai": [266, 329, 334, 335, 338], "symmetr": [266, 272, 273, 329], "up": [266, 332], "triangl": [266, 340], "q": [270, 329, 332, 333, 335, 336, 340], "objsens": [274, 280], "shape": [276, 277], "expos": 283, "meant": 283, "extern": 283, "rep": [289, 300, 334, 336, 337, 340], "initial_st": [289, 300, 338], "initial_point": [289, 300, 302, 316, 331, 338, 340], "alpha": [289, 334, 336, 340], "shot": [289, 290, 300, 302, 308, 316, 336, 337, 339, 340], "1024": [289, 300, 302, 316, 340], "measurement_error_mitig": [289, 300, 302, 316, 340], "callback": [289, 300, 302, 316, 336], "store_intermedi": [289, 300, 302, 316], "use_swap_strategi": [289, 340], "use_initial_map": [289, 340], "use_pulse_effici": [289, 340], "optimization_level": [289, 340], "vqeclient": [289, 316, 320], "runtim": [289, 300, 301, 302, 306, 311, 316, 317, 321], "client": [289, 302, 316, 335], "spsa": [289, 300, 302, 316, 334, 335, 340], "qn": [289, 300, 302, 316], "1411": [289, 300, 334, 335], "4028": [289, 300, 334, 335], "prepend": [289, 300], "custom": [289, 300, 333], "subspac": [289, 300], "1709": [289, 300], "03489": [289, 300], "vqe": [289, 301, 302, 306, 317, 321, 330, 331, 332, 333, 334, 335], "fraction": [289, 290, 331, 340], "measur": [289, 300, 302, 308, 316, 340], "cvar": [289, 340], "interv": 289, "mitig": [289, 300, 302, 308, 316, 340], "access": [289, 300, 302, 316, 340], "four": [289, 300, 302, 316], "work": [289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "toward": [289, 300, 302, 316], "These": [289, 300, 302, 316, 330, 335, 340], "ansatz": [289, 300, 302, 316, 336, 340], "deviat": [289, 300, 302, 316, 331], "swap": [289, 294, 299, 340], "strategi": [289, 294, 299, 334, 340], "transpil": [289, 298, 299], "permut": [289, 297, 334, 340], "cost": [289, 335, 338, 340], "better": [289, 297, 331, 336, 340], "fit": [289, 297, 340], "coupl": [289, 340], "puls": [289, 298], "2105": 289, "01063": 289, "best": [290, 331, 334, 335, 336, 339, 340], "aux_oper": [295, 301, 306, 311, 315, 317, 318], "cr": [298, 340], "gate": [298, 334, 335, 340], "qaoaclient": [300, 302, 340], "deprec": [300, 316, 319], "renam": [300, 316, 319], "observ": [301, 306, 317, 338], "auxiliari": [301, 306, 315, 317, 318], "eigenvalu": [301, 306, 317, 334, 340], "main": [301, 306, 315, 317, 318, 340], "chemistri": [301, 306, 317, 331], "dipol": [301, 306, 317], "particl": [301, 306, 317], "so": [301, 306, 317, 330, 334, 335], "yet": [301, 306, 317], "runtimeerror": [301, 306, 317], "job": [301, 306, 317, 321, 340], "execut": [301, 306, 316, 317, 336, 340], "fail": [301, 306, 317], "equival": [302, 330, 331, 334], "natur": [302, 335, 340], "serv": [302, 335], "basi": [302, 334, 335], "parameter": [302, 316, 334, 335], "wave": [302, 316, 335], "featur": [302, 316, 323, 338, 340], "readout": [308, 340], "done": [308, 334, 340], "fitter": [308, 340], "calibr": [308, 340], "30": [308, 330, 334], "minut": 308, "id": [310, 321, 340], "overrid": 311, "classmethod": [315, 318], "reflect": 316, "vqeruntimeresult": 319, "vqeprogram": 319, "vqeresult": [319, 320], "addition": [319, 320], "associ": [321, 335], "indicator_big_m": 323, "mp": [323, 326, 329, 332, 333, 336, 338, 339], "logical_not": 323, "logical_and": 323, "logical_or": 323, "big": [323, 335, 339], "m": [323, 329, 330, 332, 334, 335, 336, 338, 339], "deriv": [323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "basic": [324, 330, 331, 335], "ys": 325, "imaginari": 325, "never": [326, 327], "happen": [326, 327, 335], "quad_prog": 328, "compris": [328, 335], "trang": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "01_quadratic_program": 329, "ipynb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ch\u00fang": [329, 332, 333, 334, 336, 337], "t\u00f4i": [329, 333, 334, 337], "ng\u1eafn": 329, "g\u1ecdn": 329, "v\u1ea5n": [329, 330, 331, 333, 336], "\u0111\u1ec1": [329, 330, 331, 333, 336], "t\u1ed1i": [329, 330], "\u01b0u": [329, 330], "h\u00f3a": [329, 330, 331, 332, 333], "l\u1edbp": [329, 333], "x\u00e1c": [329, 330, 332, 333, 337], "gi\u1ea3i": [329, 332, 334], "quy\u1ebft": [329, 333, 334], "b\u1ecb": [329, 330, 331, 332, 333], "d\u01b0\u1edbi": [329, 330, 332, 333], "align": [329, 334, 338], "quad": [329, 333, 335], "q_0": 329, "subject": [329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "q_i": [329, 335], "a_i": [329, 330, 332], "r_i": 329, "dot": [329, 335], "l_i": 329, "u_i": [329, 335], "dimension": 329, "thi\u1ebft": [329, 331, 332, 333], "b\u1ea1n": 329, "nh\u1eadp": 329, "\u0111un": [329, 334], "sau": [329, 330, 332, 333, 334, 336, 337], "from_docplex_mp": [329, 332, 333, 336, 338, 339], "section": [329, 332, 337, 339], "vi\u1ec7c": [329, 332, 334], "chuy\u1ec3n": [329, 334], "d\u00e0ng": [329, 337], "v\u1edbi": [329, 330, 331, 332, 333, 337], "t\u00ecm": [329, 333, 334, 337], "t\u00e0i": [329, 334], "li\u1ec7u": [329, 332, 334], "ibmdecisionoptim": 329, "io": 329, "d\u00f9ng": [329, 332, 337], "h\u00e0m": [329, 330, 332, 333, 334], "mdl": [329, 333, 336, 338], "lb": [329, 335, 339], "ub": [329, 335, 339], "add_constraint": [329, 333, 336, 338, 339], "export_as_lp_str": [329, 339], "iso": [329, 339], "8859": [329, 339], "obj": [329, 335, 336, 339], "c1": [329, 334, 337], "qc1": 329, "lt": [329, 330, 331, 333, 337, 338, 339], "prettyprint": [329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "comprehens": 329, "mod": 329, "39": [329, 330, 331, 333, 334, 337, 338, 339, 340], "gt": [329, 330, 331, 333, 337, 339], "th\u00edch": [329, 330, 333, 334], "b\u1eaft": [329, 334], "\u0111\u1ea7u": [329, 330, 332, 333, 334], "r\u1ed7ng": 329, "my": 329, "three": [329, 330], "bi\u00ea": 329, "th\u00ea": [329, 333], "lo\u1ea1i": [329, 330, 333], "gi\u01a1": 329, "h\u1ea1n": [329, 330, 332, 334], "d\u01b0\u01a1": 329, "ti\u00eau": [329, 330, 332, 333, 334], "g\u1ecdi": [329, 330, 332, 334], "h\u1eb1ng": 329, "c\u0169ng": [329, 330, 333], "h\u1ea1ng": [329, 330], "tuy\u1ebfn": [329, 330, 337], "thu\u1eadt": [329, 330, 332, 334], "ng\u1eef": [329, 334], "ma": [329, 333], "tr\u1eadn": [329, 333], "\u0111i\u1ec3n": [329, 334], "\u00fd": [329, 330, 332], "r\u1eb1ng": [329, 333, 334], "d\u1ea1ng": [329, 330], "ph\u1ea7n": [329, 332, 333], "t\u1ec9": 329, "l\u1ec7": 329, "h\u1ec7": [329, 330, 333, 334, 337], "chia": 329, "l\u1ea7n": [329, 332, 337], "n\u1eefa": 329, "ba": [329, 332], "b\u00f9": [329, 330], "qx": 329, "\u00f4": 329, "th\u1ea5y": [329, 332, 333, 334], "khai": [329, 332, 334], "b\u00e1o": 329, "\u0111\u1ed1i": [329, 333], "ph\u00edm": 329, "\u1ee9ng": [329, 330, 333, 334], "gi\u00e1": [329, 330, 333, 334, 337], "tr\u1ecb": [329, 330, 333, 334, 337], "nhau": [329, 332, 334, 337], "6": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "mathemat": [329, 334, 335], "declar": 329, "7": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "d\u00e0y": 329, "\u0111\u1eb7c": [329, 332, 333], "to_arrai": 329, "th\u01b0a": 329, "to_dict": 329, "v\u1eafn": 329, "t\u1eaft": 329, "x\u1ee9ng": [329, 333], "c\u1eb7p": 329, "8": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "c\u00e0i": [329, 333], "\u0111\u1eb7t": [329, 333], "ph\u01b0\u01a1ng": [329, 330, 332, 334], "b\u00ean": 329, "linear_constraint": [329, 330, 335, 339], "lin_eq": 329, "lin_leq": 329, "lin_geq": 329, "quadratic_constraint": 329, "quad_eq": 329, "quad_leq": 329, "quad_geq": 329, "11": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "get_linear_constraint": 329, "get_quadratic_constraint": 329, "b\u1ecf": [329, 330], "remove_linear_constraint": 329, "remove_quadatic_constraint": 329, "12": [329, 331, 333, 334, 335, 336, 337, 338, 340], "remove_quadratic_constraint": 329, "substitute_vari": 329, "deal": [329, 334, 338, 340], "leftarrow": 329, "k\u1ebft": [329, 330, 332, 334], "kh\u1ea3": [329, 331, 332], "th\u1ee9c": [329, 330, 332, 334], "tr\u1ea1ng": [329, 332, 333], "th\u00e1i": [329, 332, 333], "ta": [329, 332, 333, 334, 336], "c\u1ed1": 329, "g\u1eafng": 329, "nh\u01b0ng": [329, 332], "n\u1eb1m": [329, 334, 337], "ngo\u00e0i": 329, "v\u1eady": 329, "nhi\u1ec1u": [329, 330, 333, 334], "l\u1ed7i": 329, "h\u1ee3p": [329, 332, 333, 334, 336, 337], "15": [329, 331, 334, 335, 337, 338, 340], "itself": 329, "your": [329, 337, 340], "includ": [329, 330, 334], "ones": [329, 335], "charact": 329, "16": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "f": [329, 331, 335, 337, 338, 340], "_e": 329, "17": [329, 331, 334, 338, 340], "tool": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "jupyt": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit_version_t": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit_copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "softwareversionqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "terra0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "21": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dev0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dbd3961qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "aer0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ibmq": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "provider0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "19": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "1qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "optimization0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0system": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationpython": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "version3": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "compilergcc": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "buildmain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "2022": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "09": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "04": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "19oslinuxcpus4memori": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "577545166015625wed": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "18": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "03": [329, 330, 331, 332, 339], "27": 329, "jst": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "licens": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "under": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apach": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "mayobtain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "root": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tree": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "modif": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "retain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "thiscopyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "carri": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "indicatingthat": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "alter": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u0111\u01b0\u01a1": [330, 331, 332, 333, 334, 335, 336, 337, 338], "02_converters_for_quadratic_program": 330, "power": [330, 334], "certain": [330, 333], "our": [330, 332, 334, 335, 338], "handl": [330, 333], "opflow": [330, 336, 340], "commonli": 330, "known": [330, 333, 335], "routin": [330, 334], "offer": 330, "varieti": 330, "linearinequalitytopenalti": 330, "maximizetominim": 330, "minimizetomaxim": 330, "conveni": [330, 334], "inequalitytoequalityconvert": 330, "r\u00e0ng": [330, 333], "bu\u1ed9c": [330, 333], "b\u1ea5t": [330, 333], "b\u00ecnh": 330, "\u0111\u1eb3ng": 330, "sang": [330, 331], "bi\u1ebfn": [330, 332, 333], "gi\u1edbi": [330, 332, 337], "to\u00e1n": [330, 332], "v\u1ebf": 330, "tr\u00e1i": 330, "d\u1ea5u": 330, "t\u00f9y": [330, 332], "b\u00e0i": [330, 332, 333, 334], "\u0111a": [330, 332, 337], "nh\u1ecb": [330, 332, 333], "ph\u00e2n": [330, 332, 333, 334, 337], "nguy\u00ean": [330, 332, 337], "m\u00f4": [330, 332, 333, 334, 337], "h\u00ecnh": [330, 332, 333, 334], "vi\u1ebft": [330, 335], "qp": [330, 331, 332, 333, 334, 336, 337, 338, 339], "xyz_leq": 330, "xyz_geq": 330, "ineq2eq": 330, "qp_eq": 330, "int_slack": [330, 337], "look": [330, 338], "abov": [330, 332, 335, 338, 340], "As": 330, "xyz": 330, "_leg": 330, "_slack": 330, "_geq": 330, "let": [330, 335, 339], "abl": [330, 335], "satisfi": 330, "off": 330, "decim": 330, "approach": [330, 331, 335], "howev": [330, 334, 338, 340], "symbol": 330, "minu": 330, "th\u1eadp": 330, "ch\u1eb7n": 330, "m\u00e3": [330, 332], "ho\u00e1": [330, 334], "hi\u1ec3u": [330, 333], "r\u00f5": [330, 332], "\u0111\u1ecdc": 330, "link": [330, 335], "_leq": 330, "again": [330, 334, 335], "int2bin": 330, "qp_eq_bin": 330, "both": [330, 331, 334, 338, 339], "ch\u1ea5t": [330, 334], "t\u1ed5ng": [330, 331, 337], "con": [330, 333, 334, 337], "mi\u00eau": 330, "t\u1ea3": [330, 332], "ch\u1ea5p": 330, "nh\u1eadn": [330, 332], "ldot": [330, 333, 335], "g\u1ed1c": 330, "cung": [330, 334], "c\u1ea5p": [330, 334], "vai": 330, "tr\u00f2": 330, "ban": 330, "ph\u1ea1t": 330, "\u00e1nh": [330, 334], "x\u1ea1": [330, 334], "sum_i": [330, 334], "l\u1edbn": 330, "1e5": 330, "thi\u1ec3u": [330, 332, 334], "ph\u00e1p": [330, 332, 333, 334], "lineq2penalti": 330, "22": [330, 331, 334, 338, 339], "44": [330, 338], "66": 330, "88": 330, "176": 330, "132": [330, 335], "99": 330, "352": 330, "264": 330, "178": 330, "198": 330, "110": 330, "220": 330, "177": 330, "354": 330, "708": 330, "374": 330, "y\u1ebfu": 330, "t\u1ed1": 330, "math": [330, 332, 335], "l\u01b0\u1ee3ng": [330, 331, 332, 337], "t\u1eed": [330, 331, 332], "v\u00e2n": 330, "03_minimum_eigen_optim": 331, "physic": [331, 334], "illustr": [331, 338], "show": [331, 333, 335, 336, 338, 340], "mention": 331, "thrown": 331, "s\u00e2u": [331, 334], "m\u1ea1ch": [331, 334], "t\u0103ng": [331, 332, 334], "k\u00edch": [331, 332], "th\u01b0\u1edbc": [331, 332], "c\u1ea5m": 331, "kh\u00e1c": [331, 332, 333, 334, 337], "qu\u00e1t": 331, "kh\u00e1i": 331, "ni\u1ec7m": 331, "cu\u1ed1i": [331, 333], "luca": [331, 334], "front": 331, "phy": [331, 334, 340], "2014": [331, 334, 335], "kliesch": 331, "koenig": 331, "tang": 331, "basica": [331, 332, 333, 335, 338], "util": [331, 334, 335, 336, 337, 338, 339], "algorithm_glob": [331, 334, 335, 336, 337, 338], "plot_histogram": [331, 334], "account": [331, 340], "to_is": [331, 334, 336, 337], "iiz": 331, "izi": 331, "75": [331, 334, 340], "zii": 331, "izz": [331, 340], "ziz": [331, 340], "zzi": [331, 340], "sometim": 331, "from_is": 331, "want": [331, 337, 339, 340], "random_se": [331, 334, 335, 336, 337, 338], "10598": [331, 334, 335], "get_backend": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "statevector_simul": [331, 332, 333, 338], "seed_simul": [331, 334, 335, 337, 338], "seed_transpil": [331, 334, 335, 337, 338], "qaoa_m": [331, 338, 340], "exact_m": [331, 338], "Then": 331, "small": [331, 335, 338], "exact_result": [331, 332], "success": [331, 332, 333, 334, 336, 337, 338, 339, 340], "qaoa_result": [331, 338], "consolid": [331, 340], "singl": [331, 334, 335, 338, 339, 340], "12499999999999994": 331, "get_filtered_sampl": 331, "allowed_statu": 331, "filtered_sampl": 331, "005": 331, "perspect": 331, "std": 331, "9364916731037085": 331, "despit": 331, "crunch": 331, "usual": 331, "earli": [331, 334], "samples_for_plot": 331, "join": [331, 335, 338], "v": [331, 333, 334, 335], "enumer": [331, 338, 340], "reduc": [331, 340], "below": [331, 335, 338, 340], "rqaoa": 331, "rqaoa_result": 331, "33": [331, 335, 337], "04_grover_optim": 332, "\u0111\u00e3": [332, 333, 334], "kh\u00e1m": 332, "ph\u00e1": [332, 334], "t\u1ed5": [332, 334], "thi\u00ean": 332, "x\u1ea5p": 332, "x\u1ec9": 332, "\u00e1p": 332, "l\u1eb7p": 332, "\u0111i": [332, 337], "n\u1ed5i": 332, "ti\u1ebfng": 332, "ng\u01b0\u1ee1ng": 332, "\u0111o\u00e1n": [332, 334], "t\u1ea5t": 332, "c\u1ea3": [332, 333], "hi\u1ec7n": [332, 333], "gi\u1ea3m": [332, 334], "gian": [332, 334], "m\u1ed7i": [332, 334, 337], "\u0111\u1ebfn": [332, 334], "notebook": [332, 335, 336], "t\u1eebng": 332, "k\u1ef9": [332, 334], "b\u1eadc": [332, 333], "hai": [332, 333, 337], "gilliam": 332, "woerner": [332, 338, 340], "gonciulea": 332, "polynomi": [332, 334, 335], "1912": 332, "04088": 332, "chu\u1ea9n": [332, 334], "x\u00e2y": 332, "d\u1ef1ng": 332, "s\u1ef1": [332, 333, 334], "ch\u1ed3ng": 332, "ch\u1eadp": 332, "d\u1ef1": [332, 334], "o": 332, "li\u00ean": [332, 333], "quan": [332, 333, 334], "bi\u00ean": 332, "khu\u1ebfch": 332, "t\u00e1n": 332, "d": [332, 334, 335, 337, 338, 340], "rangle_n": [332, 338], "d\u00f9": 332, "c\u00f2n": 332, "bi\u1ec7t": [332, 333], "khung": [332, 334], "chung": [332, 333], "v\u1eabn": 332, "v\u1eadn": 332, "h\u00e0nh": 332, "b\u01b0\u1edbc": [332, 333], "quadraticprogramtonegativevalueoracl": 332, "sao": [332, 337], "thanh": 332, "ghi": [332, 334], "bi\u1ec3u": [332, 334], "di\u1ec5n": [332, 334], "rangle_m": 332, "\u00e2m": 332, "g\u1eafn": 332, "c\u1edd": 332, "b\u1edfi": 332, "o_i": 332, "th\u1ea3o": 332, "lu\u1eadn": [332, 333], "th\u1ef1c": [332, 333, 334], "\u0111\u1ed9c": 332, "l\u1eadp": [332, 333], "tui": [332, 334], "nhi\u00ean": [332, 334], "rangl": [332, 334, 335, 338], "At": [332, 335], "down": [332, 334], "context": 332, "decreas": 332, "space": [332, 334], "concret": 332, "\u0111\u01a1n": 332, "gi\u1ea3n": 332, "eqnarrai": 332, "min_": [332, 333, 335, 338], "2x_0x_2": 332, "x_1x_2": 332, "1x_0": 332, "2x_1": 332, "3x_2": 332, "docplex_model1": [332, 338], "t\u1ee5c": [332, 333], "d\u1eef": 332, "d\u1eebng": 332, "duy\u1ec7t": 332, "qua": [332, 337], "truy\u1ec1n": [332, 333], "ch\u1ee9a": [332, 334], "grover_optim": 332, "nghi\u1ec7m": 332, "x_0": [332, 334, 336, 337], "x_1": [332, 334, 336, 337], "x_2": [332, 334, 336, 337], "h\u1ea7u": 332, "h\u1ebft": 332, "th\u1eed": [332, 337], "ng\u1eabu": 332, "\u0111\u1ed3": [332, 334, 337], "th\u1ecb": [332, 333, 334, 337], "\u0111\u1ebfm": [332, 334], "ngai": 332, "tr\u1ee5c": 332, "101": 332, "\u00e1n": 332, "b\u1ea3ng": 332, "r\u1ef1c": 332, "m\u00e0u": 332, "su\u1ea5t": [332, 334, 337], "\u0111o": 332, "c\u00e0ng": 332, "cao": 332, "pha": 332, "\u1ea5y": 332, "ng\u00e0y": 332, "\u00edt": 332, "ph\u1ed1i": 332, "dui": 332, "b\u00e9": 332, "ho\u1ea1t": [332, 333, 334], "\u0111\u1ed9ng": [332, 333, 334], "exact_solv": 332, "53": 332, "05_admm_optim": 333, "tr\u1ed9n": 333, "l\u1eabn": [333, 334], "mbco": 333, "th\u01b0\u1eddng": [333, 334], "xu\u1ea5t": 333, "logist": [333, 335], "nghi\u00ean": 333, "c\u1ee9u": 333, "k\u1ebf": 333, "mathcal": 333, "u": [333, 339], "subseteq": 333, "mathbb": [333, 335], "varphi": 333, "ch\u1ecbu": 333, "mathrm": [333, 334, 335], "ell": 333, "gi\u1ea3": [333, 334], "t\u1ee9c": 333, "interc": 333, "vu\u00f4ng": 333, "v\u00e9c": 333, "t\u01a1": 333, "x_": [333, 334, 335, 336], "foral": [333, 334, 335], "\u00e9p": 333, "l\u1ed3i": 333, "mbo": 333, "split": 333, "assumpt": 333, "hold": 333, "procedur": 333, "devis": 333, "decomposit": [333, 340], "subproblem": 333, "k": [333, 335], "s\u1eb5n": 333, "th\u1ed1ng": [333, 334], "\u0111\u00f4i": [333, 334], "m\u1ea5t": [333, 334], "m\u00e1t": [333, 334], "cu\u1ed9c": 333, "tranh": 333, "ki\u1ec7n": 333, "h\u1ed9i": 333, "t\u1ee5": 333, "kh\u1ed1i": [333, 334], "t\u1ea3i": 333, "pyplot": [333, 334, 335, 336, 340], "plt": [333, 334, 335, 336, 340], "cobylaoptim": 333, "admm_optim": 333, "uncom": 333, "line": 333, "full": 333, "plan": 333, "simpl": [333, 334], "report": 333, "ex6": 333, "cons1": 333, "cons2": 333, "cons3": 333, "quo": 333, "nh\u1ecf": [333, 337], "k\u1ef3": 333, "n\u00e0o": [333, 334], "ch\u1ee9ng": [333, 334], "minh": [333, 334], "1001": 333, "gx": 333, "900": 333, "theorem": 333, "becaus": 333, "alwai": [333, 337], "activ": [333, 335], "admm_param": 333, "0e": 333, "l\u1ea5y": 333, "t\u00e1ch": 333, "v\u00ea": 333, "l\u01a1": 333, "convex_optim": 333, "tr\u1ef1c": 333, "thu\u00f4": 333, "bao": [333, 337], "g\u1ed3m": [333, 334], "tr": 333, "kh\u00e1ch": 333, "th\u00f4": 333, "ng": 333, "k\u00ea": [333, 334], "c\u00e2": 333, "tr\u01b0\u01a1": 333, "hi\u00ea": 333, "hi\u1ec3n": 333, "m\u1eb7t": [333, 337], "d\u01b0": 333, "s\u01a1": 333, "xlabel": [333, 336], "ylabel": [333, 336], "ph\u1ecfng": 333, "ng\u01b0\u1eddi": [333, 334, 337], "ch\u1ecdn": [333, 334], "m\u00e1y": [333, 334, 337], "b\u1ecdc": [333, 337], "admm_q": 333, "result_q": 333, "\u0111\u1ea1i": 333, "di\u1ec7n": 333, "clf": 333, "51": 333, "06_examples_max_cut_and_tsp": 334, "l\u0129nh": 334, "v\u1ef1c": 334, "c\u1ed1t": 334, "l\u00f5i": 334, "ph\u1ee9c": 334, "t\u1ea1p": 334, "chi\u1ebfn": 334, "l\u01b0\u1ee3c": 334, "ki\u1ebfm": 334, "v\u00f4": 334, "ti\u1ec1m": 334, "chi": 334, "ph\u00ed": 334, "kho\u1ea3ng": 334, "qu\u00e3ng": [334, 337], "\u0111\u01b0\u1eddng": [334, 337], "di": 334, "th\u1eddi": 334, "x\u1eed": 334, "l\u00fd": 334, "v\u1eadt": 334, "th\u1ee5": 334, "l\u1ee3i": 334, "nhu\u1eadn": 334, "\u00edch": 334, "s\u1ee9c": 334, "n\u00f3i": 334, "t\u1ebf": 334, "\u0111\u1ea7y": 334, "\u0111\u1ee7": 334, "c\u1ee5m": 334, "khoa": 334, "h\u1ecdc": 334, "m\u1ea1ng": 334, "n\u1eafm": 334, "th\u1ebf": 334, "x\u00e9t": 334, "t\u00e1c": 334, "\u1ea3nh": 334, "h\u01b0\u1edfng": 334, "c\u00e1": 334, "\u0111\u1ec9nh": 334, "h\u1ecd": 334, "n\u1ed1i": 334, "gi\u1eefa": 334, "c\u1ea1nh": 334, "dung": 334, "r\u1ea5t": 334, "mua": 334, "ki\u1ebfn": 334, "t\u1edbi": 334, "m\u1ea1nh": 334, "m\u1ee9c": 334, "g\u00e1n": 334, "s\u1ea3n": 334, "ph\u1ea9m": 334, "mi\u1ec5n": 334, "doanh": 334, "undirect": [334, 337], "ij": [334, 335], "ji": [334, 335], "connect": [334, 335, 337, 340], "cross": [334, 340], "assign": 334, "global": [334, 335], "profit": 334, "summat": 334, "tild": 334, "textbf": 334, "market": 334, "person": 334, "bui": 334, "product": [334, 339], "free": [334, 339], "principl": 334, "individu": [334, 335], "futur": 334, "revenu": 334, "extens": 334, "themselv": 334, "regard": 334, "likelihood": 334, "grant": 334, "With": 334, "becom": [334, 338], "w_i": 334, "z_i": [334, 335], "frac": 334, "z_j": 334, "const": 334, "\u0111\u01b0\u01a1ng": 334, "z_iz_j": 334, "extent": 334, "\u0111\u00e1ng": 334, "k\u1ec3": 334, "t\u00e2m": 334, "c\u1ed5": 334, "t\u1ed1c": 334, "t\u1ed1t": 334, "\u0111\u1ea3m": 334, "b\u1ea3o": 334, "t\u1ea7m": 334, "c\u1eadn": 334, "d\u1ef1a": 334, "farhi": [334, 335], "goldston": [334, 335], "gutmann": [334, 335], "\u0111\u00f3ng": 334, "c\u1ea3nh": 334, "target": [334, 335], "higher": [334, 338], "ch\u00fa": 334, "psi": [334, 335], "boldsymbol": [334, 335], "built": [334, 335, 338], "made": [334, 335], "phase": [334, 335], "rotat": [334, 335, 338], "compon": [334, 335, 337], "\u0111\u00e1nh": 334, "langl": [334, 335], "outcom": [334, 335], "togeth": [334, 335], "around": [334, 335], "estim": [334, 335], "enough": [334, 335, 338], "belief": 334, "difficulti": 334, "come": 334, "choic": [334, 335], "wavefunct": [334, 335], "could": [334, 335, 338], "entangl": [334, 335], "simpli": 334, "u_": [334, 335], "collect": [334, 335, 337, 340], "fulli": [334, 335, 340], "prod_": [334, 335], "theta_": [334, 335], "depth": [334, 335, 340], "motiv": 334, "exploit": 334, "faster": 334, "One": 334, "advantag": 334, "compar": [334, 338, 339], "adiabat": 334, "hardwar": [334, 340], "limit": [334, 335, 339], "z_iz_jz_k": 334, "wherea": 334, "impract": 334, "frontier": 334, "wecker": 334, "hast": 334, "troyer": 334, "rev": [334, 340], "94": 334, "022309": 334, "2016": 334, "neven": 334, "1703": 334, "06199": 334, "page": [334, 337, 339, 340], "ax": [334, 340], "nx": [334, 337], "librari": [334, 335, 336, 340], "twoloc": [334, 335], "maxcut": [334, 340], "tsp": 334, "add_nodes_from": 334, "arang": 334, "elist": 334, "add_weighted_edges_from": 334, "spring_layout": [334, 337], "draw_graph": 334, "default_ax": 334, "frameon": 334, "draw_networkx": 334, "node_color": 334, "node_s": 334, "600": 334, "edge_label": 334, "get_edge_attribut": 334, "draw_networkx_edge_label": 334, "temp": 334, "get_edge_data": 334, "071509e": 334, "best_cost_brut": 334, "revers": [334, 336], "zfill": 334, "xbest_brut": 334, "nbest": 334, "max_cut": 334, "to_quadratic_program": [334, 337], "x_3": [334, 336, 337], "qubitop": 334, "iizz": 334, "iziz": 334, "izzi": 334, "ziiz": 334, "zzii": 334, "wa": [334, 339, 340], "cast": 334, "lowest": 334, "eigenvector": 334, "ee": 334, "compute_minimum_eigenvalu": 334, "sample_most_lik": 334, "energi": [334, 340], "feedback": 334, "loop": [334, 336, 340], "123": [334, 336, 337], "aer_simulator_statevector": [334, 336], "300": 334, "num_qubit": [334, 337, 340], "cz": 334, "optimizer_tim": [334, 337], "49968614555873": 334, "9054765701293945": 334, "99968614555873": 334, "vqe_optim": 334, "notori": 334, "attent": 334, "scientist": 334, "mathematician": 334, "centuri": 334, "bear": 334, "financ": 334, "suggest": 334, "colloqui": 334, "speak": [334, 335], "goe": 334, "sell": 334, "merchandis": 334, "shortest": 334, "path": [334, 335], "would": [334, 335, 336], "visit": [334, 335], "hometown": 334, "he": 334, "sale": 334, "least": [334, 337], "hard": [334, 335, 338], "ubiquit": 334, "combinatori": [334, 335], "aris": 334, "analysi": [334, 336], "hamilton": 334, "19th": 334, "ask": [334, 337], "through": [334, 340], "unknown": 334, "distanc": [334, 335, 337], "occur": 334, "appear": [334, 338], "whenev": 334, "summand": 334, "notin": 334, "boundari": 334, "condit": [334, 336], "equiv": 334, "sum_p": 334, "ensur": [334, 338], "create_random_inst": 334, "to_numpy_matrix": 334, "48": [334, 338, 339], "91": 334, "63": 334, "itertool": 334, "brute_force_tsp": 334, "last_best_dist": 334, "1e10": 334, "pre_j": 334, "best_ord": 334, "best_dist": 334, "draw_tsp_solut": 334, "g2": 334, "digraph": 334, "add_edg": 334, "edge_color": 334, "font_color": 334, "202": 334, "x_0_0": 334, "x_1_1": 334, "x_1_2": 334, "x_2_1": 334, "x_2_2": 334, "x_0_1": 334, "x_1_0": 334, "x_2_0": 334, "x_0_2": 334, "c2": [334, 337], "c3": [334, 337], "c4": [334, 337], "c5": [334, 337], "qp2qubo": 334, "7581": 334, "1282": 334, "iiiiiiiiz": [334, 337], "iiiiiiizi": [334, 337], "iiiiiizii": [334, 337], "1268": 334, "iiiiiziii": [334, 337], "iiiiziiii": [334, 337], "iiiziiiii": [334, 337], "1290": 334, "iiziiiiii": [334, 337], "iziiiiiii": [334, 337], "ziiiiiiii": [334, 337], "606": 334, "iiiiiiizz": [334, 337], "iiiiiiziz": [334, 337], "iiiiiizzi": [334, 337], "iiiiiziiz": [334, 337], "iiiiizizi": [334, 337], "iiiiizzii": [334, 337], "iiiiziiiz": [334, 337], "iiiiziizi": [334, 337], "iiiizizii": [334, 337], "iiiizziii": [334, 337], "iiiziiiiz": [334, 337], "iiiziiizi": [334, 337], "iiiziizii": [334, 337], "iiiziziii": [334, 337], "iiizziiii": [334, 337], "iiziiiiiz": [334, 337], "iiziiiizi": [334, 337], "iiziiizii": [334, 337], "iiziiziii": [334, 337], "iiziziiii": [334, 337], "iizziiiii": [334, 337], "iziiiiiiz": [334, 337], "iziiiiizi": [334, 337], "iziiiizii": [334, 337], "iziiiziii": [334, 337], "iziiziiii": [334, 337], "iziziiiii": [334, 337], "izziiiiii": [334, 337], "ziiiiiiiz": [334, 337], "ziiiiiizi": [334, 337], "ziiiiizii": [334, 337], "ziiiiziii": [334, 337], "ziiiziiii": [334, 337], "ziiziiiii": [334, 337], "ziziiiiii": [334, 337], "zziiiiiii": [334, 337], "is_feas": 334, "tsp_valu": 334, "7379": 334, "7326": 334, "024699521837": 334, "199239253997803": 334, "warn": [334, 335], "filterwarn": 334, "categori": 334, "userwarn": 334, "05": [334, 335, 336, 337, 338, 339], "07_examples_vehicle_rout": 335, "major": 335, "industri": 335, "usd": 335, "8183": 335, "billion": 335, "2015": 335, "servic": 335, "truck": 335, "ship": 335, "overnight": 335, "locat": 335, "dai": 335, "computation": 335, "challeng": 335, "mile": 335, "spent": 335, "similar": 335, "formal": 335, "ideal": 335, "showcas": 335, "overal": 335, "workflow": [335, 340], "demonstr": [335, 340], "establish": 335, "ahead": 335, "deliveri": 335, "databas": 335, "randomli": 335, "pair": 335, "wise": 335, "euclidean": 335, "crow": 335, "fli": 335, "perhap": 335, "simplest": 335, "twice": [335, 340], "hybrid": 335, "partli": 335, "simplist": 335, "requisit": 335, "vrp": 335, "wherein": 335, "sought": 335, "appleg": 335, "2006": 335, "mtz": 335, "miller": 335, "tucker": 335, "zemlin": 335, "1960": 335, "segment": 335, "convent": 335, "distinct": 335, "sim": 335, "delta": 335, "similarli": 335, "elimin": 335, "tour": 335, "0i": 335, "j0": 335, "u_j": 335, "q_j": 335, "neq": 335, "particular": [335, 340], "weigh": 335, "arch": 335, "typic": [335, 340], "enforc": 335, "exactli": [335, 337], "branch": [335, 339], "milp": 335, "sake": 335, "notat": 335, "bf": 335, "01": 335, "02": 335, "dimens": 335, "stress": 335, "emploi": [335, 340], "discuss": [335, 340], "speed": 335, "investig": [335, 340], "worthwhil": 335, "summar": 335, "transform": 335, "necessari": [335, 336, 337], "throughout": 335, "notabl": 335, "augment": 335, "lagrangian": 335, "ih": 335, "_i": [335, 338], "otim": 335, "_n": 335, "_0": 335, "That": 335, "2an": 335, "2ak": 335, "stack": 335, "acm": 335, "326": 335, "329": 335, "doi": 335, "1145": 335, "321043": 335, "321046": 335, "bixbi": 335, "chv\u00e1tal": 335, "cook": 335, "princeton": 335, "univers": 335, "press": 335, "isbn": 335, "978": 335, "691": 335, "12993": 335, "latest": [335, 339], "version_info": 335, "pleas": 335, "cplexerror": 335, "quantum_info": 335, "place": 335, "plane": 335, "__init__": 335, "generate_inst": 335, "1543": [335, 336], "xc": 335, "rand": 335, "yc": 335, "ii": 335, "jj": 335, "classicaloptim": 335, "compute_allowed_combin": 335, "cplex_solut": 335, "refactor": 335, "my_obj": 335, "reshap": 335, "my_ub": 335, "my_lb": 335, "my_ctyp": 335, "my_rh": 335, "my_sens": 335, "my_prob": 335, "populatebyrow": 335, "exc": 335, "get_valu": 335, "get_objective_valu": 335, "prob": [335, 337], "set_sens": 335, "set_log_stream": 335, "set_error_stream": 335, "set_warning_stream": 335, "set_results_stream": 335, "row": 335, "col": 335, "coef": 335, "lin_expr": 335, "classical_optim": 335, "fashion": 335, "classical_cost": 335, "miss": 335, "visualize_solut": 335, "title_str": 335, "figur": [335, 336], "scatter": 335, "200": 335, "annot": 335, "ms": 335, "grid": 335, "ix": 335, "iy": 335, "arrow": 335, "length_includes_head": 335, "head_width": 335, "titl": 335, "star": 335, "quantumoptim": 335, "insid": 335, "binary_represent": 335, "algebra": 335, "construct_problem": 335, "solve_problem": 335, "previou": [335, 337], "minimuneigenoptim": 335, "x_sol": 335, "instance_vec": 335, "w_list": 335, "id_n": 335, "ey": 335, "im_n_1": 335, "iv_n_1": 335, "iv_n": 335, "neg_iv_n_1": 335, "vn": 335, "axi": 335, "interact": 335, "kron": 335, "contribut": 335, "fun": 335, "lambda": [335, 336, 338], "qasm_simul": [335, 336, 337], "quantum_optim": 335, "saniti": 335, "yield": 335, "binary_cost": 335, "verifi": 335, "unavail": 335, "nameerror": 335, "cell": 335, "11148115684045": 335, "1114811568365": 335, "hour": 335, "log": 335, "what": [335, 340], "quantum_solut": 335, "quantum_cost": 335, "x_quantum": 335, "kk": 335, "comparison": 335, "coincid": 335, "ilp": 335, "mind": 335, "though": 335, "optima": 335, "harder": 335, "turn": 335, "stronger": 335, "08_cvar_optim": 336, "risk": 336, "particularli": 336, "shown": [336, 338], "setup": 336, "confid": 336, "tradeoff": 336, "focus": 336, "smoothen": 336, "landscap": 336, "barkoutso": [336, 340], "256": [336, 340], "realamplitud": 336, "pauliexpect": [336, 340], "cvarexpect": [336, 340], "linearequalitytopenalti": 336, "123456": 336, "asset": 336, "budget": 336, "mu": [336, 338], "7313": 336, "9893": 336, "2725": 336, "8750": 336, "7667": 336, "3622": 336, "sigma": [336, 338], "7312": 336, "6233": 336, "4689": 336, "5452": 336, "0082": 336, "3809": 336, "4732": 336, "7538": 336, "4659": 336, "0733": 336, "8945": 336, "4095": 336, "0007": 336, "4301": 336, "5067": 336, "2012": 336, "0922": 336, "6231": 336, "1509": 336, "8992": 336, "portfolio": 336, "random_model": 336, "covari": 336, "portfolio_optim": 336, "binary_var_list": 336, "opt_result": 336, "27835": 336, "x_4": [336, 337], "x_5": [336, 337], "further": [336, 340], "linear2penalti": 336, "num_paramet": 336, "backend_nam": [336, 340], "qasm": 336, "simlat": 336, "50": 336, "progress": 336, "stddev": 336, "cvar_alpha": 336, "cvar_exp": 336, "compute_vari": 336, "fix": 336, "pr": 336, "1373": 336, "opt_alg": 336, "2783500000000174": 336, "figsiz": [336, 340], "linewidth": 336, "label": [336, 340], "2f": 336, "legend": 336, "loc": 336, "fontsiz": 336, "xlim": 336, "xtick": 336, "ytick": 336, "objective_valu": 336, "x_bin": 336, "sb": 336, "ind": 336, "argsort": 336, "val": [336, 340], "probabilitii": 336, "4f": 336, "00": [336, 339], "0084": 336, "0314": 336, "1278": 336, "09_application_class": 337, "thi\u1ec7u": 337, "t\u00e2": 337, "h\u01a1": 337, "ph\u1ee7": 337, "l\u00e2": 337, "h\u00e0ng": 337, "tr\u1ecdng": 337, "c\u00f4ng": 337, "v\u00f9ng": 337, "d\u01b0\u01a1ng": 337, "subcollect": 337, "pairwis": 337, "disjoint": 337, "cliqu": 337, "induc": 337, "subgraph": 337, "\u1ed5n": 337, "b\u00e1n": 337, "ph\u1ed1": 337, "\u0111\u00fang": 337, "xe": 337, "endpoint": 337, "beforehand": 337, "vertexcov": 337, "qin": [337, 339], "random_regular_graph": 337, "c6": 337, "c7": 337, "c8": 337, "meo": [337, 339], "nsolut": 337, "ntime": 337, "20122742652893066": 337, "5723414421081543": 337, "26": 337, "104": 337, "208": 337, "156": 337, "416": 337, "312": 337, "624": 337, "234": [337, 338], "520": 337, "468": 337, "780": 337, "936": 337, "832": 337, "1040": 337, "1248": 337, "260": [337, 338], "650": 337, "1560": 337, "2080": 337, "1043": 337, "1564": 337, "2085": 337, "2606": 337, "3127": 337, "2600": 337, "num": 337, "1417": 337, "258": [337, 338], "388": 337, "517": 337, "647": 337, "776": 337, "130": 337, "390": 337, "78": 337, "195": 337, "52": 337, "65": 337, "117": 337, "10_warm_start_qaoa": 338, "often": 338, "tx": 338, "diagon": 338, "easier": 338, "semi": 338, "definit": 338, "now": [338, 340], "Such": 338, "marecek": 338, "quadratic_program_to_qubo": 338, "create_problem": 338, "relax_problem": 338, "relaxed_problem": 338, "deepcopi": 338, "418": 338, "0913": 338, "2415": 338, "4436": 338, "892": 338, "4051": 338, "07978412": 338, "00768914": 338, "11227606": 338, "06842969": 338, "01016793": 338, "00839765": 338, "10922887": 338, "03043424": 338, "0020045": 338, "00670929": 338, "0147937": 338, "985353": 338, "02307313": 338, "05249785": 338, "00904119": 338, "6043817": 338, "03740115": 338, "00945322": 338, "79839634": 338, "07616951": 338, "08464544": 338, "15956824": 338, "03075656": 338, "44910424": 338, "27371876": 338, "04067172": 338, "x4": 338, "0335906": 338, "x5": 338, "21845774": 338, "12173696": 338, "008018": 338, "02683716": 338, "0591748": 338, "970706": 338, "09229252": 338, "2099914": 338, "03616476": 338, "2087634": 338, "1496046": 338, "03781288": 338, "59679268": 338, "30467804": 338, "16929088": 338, "7689322": 338, "longer": 338, "848800180000005": 338, "85": 338, "40922044000001": 338, "82756812000001": 338, "10474512000002": 338, "33779216000002": 338, "34487328000002": 338, "42": 338, "907689680000004": 338, "25672692": 338, "37044588": 338, "40530104000001": 338, "43763868000002": 338, "659937940000006": 338, "47075640000001": 338, "16847248000002": 338, "41462864000002": 338, "43": 338, "89799534000001": 338, "52806848000002": 338, "34065100000001": 338, "286024620000006": 338, "68314192000001": 338, "858522820000005": 338, "259": 338, "55339164000003": 338, "22669164": 338, "262": 338, "37689164": 338, "57899164": 338, "267": 338, "02739164": 338, "54049164": 338, "384": 338, "20308746000006": 338, "sol": 338, "012055025682855": 338, "1752499576180142": 338, "4803888163988428e": 338, "07": 338, "9709053264087596": 338, "7384168677494174": 338, "9999999916475085": 338, "14438904470168756": 338, "c_star": 338, "12345": 338, "768932200000002": 338, "phi": 338, "bigotimes_": 338, "r_y": 338, "theta_i": 338, "angl": 338, "arcsin": 338, "init_qc": 338, "idx": [338, 340], "mpl": [338, 340], "chose": 338, "h_": 338, "ws": 338, "pmatrix": 338, "2c_i": 338, "c_i": 338, "exponenti": 338, "\u03b2": 338, "ws_mixer": 338, "ws_qaoa_m": 338, "ws_qaoa": 338, "ws_qaoa_result": 338, "give": 338, "much": 338, "format_qaoa_sampl": 338, "max_len": 338, "qaoa_r": 338, "3f": 338, "1e2": 338, "1f": 338, "001110": 338, "769": 338, "011010": 338, "744": 338, "001011": 338, "671": 338, "101010": 338, "626": 338, "010110": 338, "100110": 338, "953": 338, "000111": 338, "349": 338, "110010": 338, "410": 338, "010011": 338, "013": 338, "100011": 338, "559": 338, "warmstartqaoaoptim": 338, "ws_result": 338, "23": [338, 340], "11_using_classical_optimization_solvers_and_model": 339, "api": 339, "save": 339, "juli": 339, "2021": [339, 340], "cplex_result": 339, "gurobi_result": 339, "restrict": 339, "expir": 339, "2023": 339, "thread": 339, "timelimit": 339, "identifi": 339, "54982fbec": 339, "cpxparam_read_datacheck": 339, "cpxparam_thread": 339, "cpxparam_timelimit": 339, "10000000000000001": 339, "incumb": 339, "000000": 339, "sec": 339, "tick": 339, "amp": [339, 340], "sequenti": 339, "aer_simul": 339, "ndisplai": 339, "421": 339, "103": 339, "033": 339, "038": 339, "docplex_model": 339, "dvar": 339, "gp": 339, "gurobipy_model": 339, "addvar": 339, "vtype": 339, "grb": 339, "setobject": 339, "addconstr": 339, "quadexpr": 339, "r0": 339, "linexpr": 339, "ident": 339, "from_gurobipi": 339, "docpblex": 339, "qp2": 339, "too": 339, "to_gurobipi": 339, "to_docplex_mp": 339, "gmod": 339, "dmod": 339, "nconvert": 339, "ind_mod": 339, "add_ind": 339, "lc1": 339, "nativ": 339, "ncplex": 339, "12_qaoa_runtim": 340, "permit": 340, "entir": 340, "load_account": 340, "get_provid": 340, "hub": 340, "inspect": 340, "know": 340, "program_id": 340, "qaoa_program": 340, "parameternamespac": 340, "descript": 340, "optimizati": 340, "use_initia": 340, "use_pulse_": 340, "measuremen": 340, "tensor": 340, "repetit": 340, "aux_operat": 340, "paulisumop": 340, "initial_po": 340, "smallest": 340, "rate": 340, "use_swap_": 340, "elabor": 340, "far": 340, "wish": 340, "zz": 340, "from_list": 340, "nois": 340, "layer": 340, "gamma": 340, "gamma_1": 340, "beta_1": 340, "gamma_2": 340, "beta_2": 340, "gather": 340, "tensoredmeasfitt": 340, "dedic": 340, "commut": 340, "cartan": 340, "kak": 340, "rzxgate": 340, "reson": 340, "kl": 340, "nannicini": 340, "robert": 340, "tavernelli": 340, "earnest": 340, "tornow": 340, "research": 340, "043088": 340, "five": 340, "seamlessli": 340, "job_monitor": 340, "noisi": 340, "environ": 340, "programm": 340, "ibmq_qasm_simul": 340, "runtime_input": 340, "echo": 340, "successfulli": 340, "job_id": 340, "bob": 340, "c9qh9mekcirf2adkkhvg": 340, "jobstatu": 340, "retriev": 340, "Of": 340, "defaultdict": 340, "op_adj_mat": 340, "extract": 340, "adj_mat": 340, "coeff": 340, "primit": 340, "to_list": 340, "get_cost": 340, "bit_str": 340, "bit": 340, "get_cut_distribut": 340, "state_result": 340, "cut_val": 340, "subplot": 340, "optimizer_histori": 340, "bar": 340, "set_xlabel": 340, "set_ylabel": 340, "methodolog": 340, "system": 340, "manag": 340, "passmanag": 340, "standard_g": 340, "equivalence_librari": 340, "standardequivalencelibrari": 340, "std_eqlib": 340, "collect2qblock": 340, "consolidateblock": 340, "unrollcustomdefinit": 340, "basistransl": 340, "optimize1qgatesdecomposit": 340, "builder": 340, "rzxcalibrationbuildernoecho": 340, "echo_rzx_weyl_decomposit": 340, "echorzxweyldecomposit": 340, "mock": 340, "fakebelem": 340, "knowledg": 340, "attach": 340, "schedul": 340, "cnot": 340, "inst_map": 340, "instruction_schedule_map": 340, "channel_map": 340, "qubit_channel_map": 340, "rzx_basi": 340, "rzx": 340, "sx": 340, "pulse_effici": 340, "consecut": 340, "basis_g": 340, "rxx": 340, "rewrit": 340, "weyl": 340, "decompos": 340, "simplifi": 340, "arbitrari": 340, "circ": 340, "cx": 340, "rx": 340, "fold": 340, "cffbb84qiskit": 340, "577533721923828fri": 340, "31": 340}, "objects": {"": [[0, 0, 0, "-", "qiskit_optimization"]], "qiskit_optimization": [[10, 1, 1, "", "INFINITY"], [11, 2, 1, "", "QiskitOptimizationError"], [12, 4, 1, "", "QuadraticProgram"], [1, 0, 0, "-", "algorithms"], [2, 0, 0, "-", "applications"], [3, 0, 0, "-", "converters"], [4, 0, 0, "-", "problems"], [5, 0, 0, "-", "runtime"], [6, 0, 0, "-", "translators"]], "qiskit_optimization.QiskitOptimizationError": [[11, 3, 1, "", "with_traceback"]], "qiskit_optimization.QuadraticProgram": [[13, 3, 1, "", "binary_var"], [14, 3, 1, "", "binary_var_dict"], [15, 3, 1, "", "binary_var_list"], [16, 3, 1, "", "clear"], [17, 3, 1, "", "continuous_var"], [18, 3, 1, "", "continuous_var_dict"], [19, 3, 1, "", "continuous_var_list"], [20, 3, 1, "", "export_as_lp_string"], [21, 3, 1, "", "from_ising"], [22, 3, 1, "", "get_feasibility_info"], [23, 3, 1, "", "get_linear_constraint"], [24, 3, 1, "", "get_num_binary_vars"], [25, 3, 1, "", "get_num_continuous_vars"], [26, 3, 1, "", "get_num_integer_vars"], [27, 3, 1, "", "get_num_linear_constraints"], [28, 3, 1, "", "get_num_quadratic_constraints"], [29, 3, 1, "", "get_num_vars"], [30, 3, 1, "", "get_quadratic_constraint"], [31, 3, 1, "", "get_variable"], [32, 3, 1, "", "integer_var"], [33, 3, 1, "", "integer_var_dict"], [34, 3, 1, "", "integer_var_list"], [35, 3, 1, "", "is_feasible"], [36, 3, 1, "", "linear_constraint"], [37, 5, 1, "", "linear_constraints"], [38, 5, 1, "", "linear_constraints_index"], [39, 3, 1, "", "maximize"], [40, 3, 1, "", "minimize"], [41, 5, 1, "", "name"], [42, 5, 1, "", "objective"], [43, 3, 1, "", "prettyprint"], [44, 3, 1, "", "quadratic_constraint"], [45, 5, 1, "", "quadratic_constraints"], [46, 5, 1, "", "quadratic_constraints_index"], [47, 3, 1, "", "read_from_lp_file"], [48, 3, 1, "", "remove_linear_constraint"], [49, 3, 1, "", "remove_quadratic_constraint"], [50, 5, 1, "", "status"], [51, 3, 1, "", "substitute_variables"], [52, 3, 1, "", "to_ising"], [53, 5, 1, "", "variables"], [54, 5, 1, "", "variables_index"], [55, 3, 1, "", "write_to_lp_file"]], "qiskit_optimization.algorithms": [[56, 4, 1, "", "ADMMOptimizationResult"], [58, 4, 1, "", "ADMMOptimizer"], [62, 4, 1, "", "ADMMParameters"], [63, 4, 1, "", "ADMMState"], [64, 4, 1, "", "BaseAggregator"], [66, 4, 1, "", "CobylaOptimizer"], [69, 4, 1, "", "CplexOptimizer"], [75, 4, 1, "", "GoemansWilliamsonOptimizationResult"], [77, 4, 1, "", "GoemansWilliamsonOptimizer"], [81, 4, 1, "", "GroverOptimizationResult"], [88, 4, 1, "", "GroverOptimizer"], [92, 4, 1, "", "GurobiOptimizer"], [97, 4, 1, "", "IntermediateResult"], [101, 4, 1, "", "MeanAggregator"], [103, 4, 1, "", "MinimumEigenOptimizationResult"], [106, 4, 1, "", "MinimumEigenOptimizer"], [110, 4, 1, "", "MultiStartOptimizer"], [114, 4, 1, "", "OptimizationAlgorithm"], [118, 4, 1, "", "OptimizationResult"], [130, 4, 1, "", "OptimizationResultStatus"], [134, 4, 1, "", "RecursiveMinimumEigenOptimizationResult"], [137, 4, 1, "", "RecursiveMinimumEigenOptimizer"], [140, 4, 1, "", "SlsqpOptimizationResult"], [145, 4, 1, "", "SlsqpOptimizer"], [148, 4, 1, "", "SolutionSample"], [153, 4, 1, "", "WarmStartQAOAFactory"], [157, 4, 1, "", "WarmStartQAOAOptimizer"]], "qiskit_optimization.algorithms.ADMMOptimizationResult": [[57, 5, 1, "", "state"]], "qiskit_optimization.algorithms.ADMMOptimizer": [[59, 3, 1, "", "get_compatibility_msg"], [60, 5, 1, "", "parameters"], [61, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.BaseAggregator": [[65, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.CobylaOptimizer": [[67, 3, 1, "", "get_compatibility_msg"], [68, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.CplexOptimizer": [[70, 5, 1, "", "cplex_parameters"], [71, 5, 1, "", "disp"], [72, 3, 1, "", "get_compatibility_msg"], [73, 3, 1, "", "is_cplex_installed"], [74, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult": [[76, 5, 1, "", "sdp_solution"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer": [[78, 3, 1, "", "get_compatibility_msg"], [79, 3, 1, "", "max_cut_value"], [80, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GroverOptimizationResult": [[82, 5, 1, "", "intermediate_fval"], [83, 5, 1, "", "n_input_qubits"], [84, 5, 1, "", "n_output_qubits"], [85, 5, 1, "", "operation_counts"], [86, 5, 1, "", "raw_samples"], [87, 5, 1, "", "threshold"]], "qiskit_optimization.algorithms.GroverOptimizer": [[89, 3, 1, "", "get_compatibility_msg"], [90, 5, 1, "", "quantum_instance"], [91, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GurobiOptimizer": [[93, 5, 1, "", "disp"], [94, 3, 1, "", "get_compatibility_msg"], [95, 3, 1, "", "is_gurobi_installed"], [96, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.IntermediateResult": [[98, 6, 1, "", "ALL_ITERATIONS"], [99, 6, 1, "", "LAST_ITERATION"], [100, 6, 1, "", "NO_ITERATIONS"]], "qiskit_optimization.algorithms.MeanAggregator": [[102, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.MinimumEigenOptimizationResult": [[104, 5, 1, "", "min_eigen_solver_result"], [105, 5, 1, "", "raw_samples"]], "qiskit_optimization.algorithms.MinimumEigenOptimizer": [[107, 3, 1, "", "get_compatibility_msg"], [108, 5, 1, "", "min_eigen_solver"], [109, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.MultiStartOptimizer": [[111, 5, 1, "", "clip"], [112, 3, 1, "", "multi_start_solve"], [113, 5, 1, "", "trials"]], "qiskit_optimization.algorithms.OptimizationAlgorithm": [[115, 3, 1, "", "get_compatibility_msg"], [116, 3, 1, "", "is_compatible"], [117, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.OptimizationResult": [[119, 3, 1, "", "__getitem__"], [120, 5, 1, "", "fval"], [121, 3, 1, "", "get_correlations"], [122, 3, 1, "", "prettyprint"], [123, 5, 1, "", "raw_results"], [124, 5, 1, "", "samples"], [125, 5, 1, "", "status"], [126, 5, 1, "", "variable_names"], [127, 5, 1, "", "variables"], [128, 5, 1, "", "variables_dict"], [129, 5, 1, "", "x"]], "qiskit_optimization.algorithms.OptimizationResultStatus": [[131, 6, 1, "", "FAILURE"], [132, 6, 1, "", "INFEASIBLE"], [133, 6, 1, "", "SUCCESS"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult": [[135, 5, 1, "", "history"], [136, 5, 1, "", "replacements"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer": [[138, 3, 1, "", "get_compatibility_msg"], [139, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SlsqpOptimizationResult": [[141, 5, 1, "", "fx"], [142, 5, 1, "", "imode"], [143, 5, 1, "", "its"], [144, 5, 1, "", "smode"]], "qiskit_optimization.algorithms.SlsqpOptimizer": [[146, 3, 1, "", "get_compatibility_msg"], [147, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SolutionSample": [[149, 6, 1, "", "fval"], [150, 6, 1, "", "probability"], [151, 6, 1, "", "status"], [152, 6, 1, "", "x"]], "qiskit_optimization.algorithms.WarmStartQAOAFactory": [[154, 3, 1, "", "create_initial_state"], [155, 3, 1, "", "create_initial_variables"], [156, 3, 1, "", "create_mixer"]], "qiskit_optimization.algorithms.WarmStartQAOAOptimizer": [[158, 3, 1, "", "solve"]], "qiskit_optimization.applications": [[159, 4, 1, "", "BinPacking"], [163, 4, 1, "", "Clique"], [167, 4, 1, "", "ExactCover"], [170, 4, 1, "", "GraphOptimizationApplication"], [174, 4, 1, "", "GraphPartition"], [177, 4, 1, "", "Knapsack"], [181, 4, 1, "", "Maxcut"], [186, 4, 1, "", "NumberPartition"], [189, 4, 1, "", "OptimizationApplication"], [193, 4, 1, "", "SKModel"], [199, 4, 1, "", "SetPacking"], [202, 4, 1, "", "StableSet"], [205, 4, 1, "", "Tsp"], [211, 4, 1, "", "VehicleRouting"], [217, 4, 1, "", "VertexCover"]], "qiskit_optimization.applications.BinPacking": [[160, 3, 1, "", "get_figure"], [161, 3, 1, "", "interpret"], [162, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Clique": [[164, 3, 1, "", "interpret"], [165, 5, 1, "", "size"], [166, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.ExactCover": [[168, 3, 1, "", "interpret"], [169, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphOptimizationApplication": [[171, 3, 1, "", "draw"], [172, 5, 1, "", "graph"], [173, 3, 1, "", "random_graph"]], "qiskit_optimization.applications.GraphPartition": [[175, 3, 1, "", "interpret"], [176, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Knapsack": [[178, 3, 1, "", "interpret"], [179, 5, 1, "", "max_weight"], [180, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Maxcut": [[182, 3, 1, "", "get_gset_result"], [183, 3, 1, "", "interpret"], [184, 3, 1, "", "parse_gset_format"], [185, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.NumberPartition": [[187, 3, 1, "", "interpret"], [188, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.OptimizationApplication": [[190, 3, 1, "", "interpret"], [191, 3, 1, "", "sample_most_likely"], [192, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SKModel": [[194, 3, 1, "", "disorder"], [195, 5, 1, "", "graph"], [196, 3, 1, "", "interpret"], [197, 5, 1, "", "num_sites"], [198, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SetPacking": [[200, 3, 1, "", "interpret"], [201, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.StableSet": [[203, 3, 1, "", "interpret"], [204, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Tsp": [[206, 3, 1, "", "create_random_instance"], [207, 3, 1, "", "interpret"], [208, 3, 1, "", "parse_tsplib_format"], [209, 3, 1, "", "to_quadratic_program"], [210, 3, 1, "", "tsp_value"]], "qiskit_optimization.applications.VehicleRouting": [[212, 3, 1, "", "create_random_instance"], [213, 5, 1, "", "depot"], [214, 3, 1, "", "interpret"], [215, 5, 1, "", "num_vehicles"], [216, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.VertexCover": [[218, 3, 1, "", "interpret"], [219, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.converters": [[220, 4, 1, "", "InequalityToEquality"], [224, 4, 1, "", "IntegerToBinary"], [227, 4, 1, "", "LinearEqualityToPenalty"], [231, 4, 1, "", "LinearInequalityToPenalty"], [235, 4, 1, "", "MaximizeToMinimize"], [236, 4, 1, "", "MinimizeToMaximize"], [237, 4, 1, "", "QuadraticProgramConverter"], [240, 4, 1, "", "QuadraticProgramToQubo"]], "qiskit_optimization.converters.InequalityToEquality": [[221, 3, 1, "", "convert"], [222, 3, 1, "", "interpret"], [223, 5, 1, "", "mode"]], "qiskit_optimization.converters.IntegerToBinary": [[225, 3, 1, "", "convert"], [226, 3, 1, "", "interpret"]], "qiskit_optimization.converters.LinearEqualityToPenalty": [[228, 3, 1, "", "convert"], [229, 3, 1, "", "interpret"], [230, 5, 1, "", "penalty"]], "qiskit_optimization.converters.LinearInequalityToPenalty": [[232, 3, 1, "", "convert"], [233, 3, 1, "", "interpret"], [234, 5, 1, "", "penalty"]], "qiskit_optimization.converters.QuadraticProgramConverter": [[238, 3, 1, "", "convert"], [239, 3, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramToQubo": [[241, 3, 1, "", "convert"], [242, 3, 1, "", "get_compatibility_msg"], [243, 3, 1, "", "interpret"], [244, 3, 1, "", "is_compatible"], [245, 5, 1, "", "penalty"]], "qiskit_optimization.problems": [[246, 4, 1, "", "Constraint"], [251, 4, 1, "", "LinearConstraint"], [254, 4, 1, "", "LinearExpression"], [262, 4, 1, "", "QuadraticConstraint"], [266, 4, 1, "", "QuadraticExpression"], [274, 4, 1, "", "QuadraticObjective"], [281, 4, 1, "", "QuadraticProgramElement"], [283, 4, 1, "", "Variable"]], "qiskit_optimization.problems.Constraint": [[247, 3, 1, "", "evaluate"], [248, 5, 1, "", "name"], [249, 5, 1, "", "rhs"], [250, 5, 1, "", "sense"]], "qiskit_optimization.problems.LinearConstraint": [[252, 3, 1, "", "evaluate"], [253, 5, 1, "", "linear"]], "qiskit_optimization.problems.LinearExpression": [[255, 3, 1, "", "__getitem__"], [256, 5, 1, "", "bounds"], [257, 5, 1, "", "coefficients"], [258, 3, 1, "", "evaluate"], [259, 3, 1, "", "evaluate_gradient"], [260, 3, 1, "", "to_array"], [261, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticConstraint": [[263, 3, 1, "", "evaluate"], [264, 5, 1, "", "linear"], [265, 5, 1, "", "quadratic"]], "qiskit_optimization.problems.QuadraticExpression": [[267, 3, 1, "", "__getitem__"], [268, 5, 1, "", "bounds"], [269, 5, 1, "", "coefficients"], [270, 3, 1, "", "evaluate"], [271, 3, 1, "", "evaluate_gradient"], [272, 3, 1, "", "to_array"], [273, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticObjective": [[275, 5, 1, "", "constant"], [276, 3, 1, "", "evaluate"], [277, 3, 1, "", "evaluate_gradient"], [278, 5, 1, "", "linear"], [279, 5, 1, "", "quadratic"], [280, 5, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticProgramElement": [[282, 5, 1, "", "quadratic_program"]], "qiskit_optimization.problems.Variable": [[284, 3, 1, "", "as_tuple"], [285, 5, 1, "", "lowerbound"], [286, 5, 1, "", "name"], [287, 5, 1, "", "upperbound"], [288, 5, 1, "", "vartype"]], "qiskit_optimization.runtime": [[289, 4, 1, "", "QAOAClient"], [300, 4, 1, "", "QAOAProgram"], [302, 4, 1, "", "VQEClient"], [316, 4, 1, "", "VQEProgram"], [319, 4, 1, "", "VQEProgramResult"], [320, 4, 1, "", "VQERuntimeResult"]], "qiskit_optimization.runtime.QAOAClient": [[290, 5, 1, "", "alpha"], [291, 5, 1, "", "ansatz"], [292, 5, 1, "", "initial_state"], [293, 5, 1, "", "mixer"], [294, 5, 1, "", "optimization_level"], [295, 3, 1, "", "program_inputs"], [296, 5, 1, "", "reps"], [297, 5, 1, "", "use_initial_mapping"], [298, 5, 1, "", "use_pulse_efficient"], [299, 5, 1, "", "use_swap_strategies"]], "qiskit_optimization.runtime.QAOAProgram": [[301, 3, 1, "", "compute_minimum_eigenvalue"]], "qiskit_optimization.runtime.VQEClient": [[303, 5, 1, "", "ansatz"], [304, 5, 1, "", "backend"], [305, 5, 1, "", "callback"], [306, 3, 1, "", "compute_minimum_eigenvalue"], [307, 5, 1, "", "initial_point"], [308, 5, 1, "", "measurement_error_mitigation"], [309, 5, 1, "", "optimizer"], [310, 5, 1, "", "program_id"], [311, 3, 1, "", "program_inputs"], [312, 5, 1, "", "provider"], [313, 5, 1, "", "shots"], [314, 5, 1, "", "store_intermediate"], [315, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQEProgram": [[317, 3, 1, "", "compute_minimum_eigenvalue"], [318, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQERuntimeResult": [[321, 5, 1, "", "job_id"], [322, 5, 1, "", "optimizer_history"]], "qiskit_optimization.translators": [[323, 7, 1, "", "from_docplex_mp"], [324, 7, 1, "", "from_gurobipy"], [325, 7, 1, "", "from_ising"], [326, 7, 1, "", "to_docplex_mp"], [327, 7, 1, "", "to_gurobipy"], [328, 7, 1, "", "to_ising"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:exception", "3": "py:method", "4": "py:class", "5": "py:property", "6": "py:attribute", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python m\u00f4-\u0111un"], "1": ["py", "data", "Python d\u1eef li\u1ec7u"], "2": ["py", "exception", "Python ngo\u1ea1i l\u1ec7"], "3": ["py", "method", "Python ph\u01b0\u01a1ng th\u1ee9c"], "4": ["py", "class", "Python l\u1edbp"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python thu\u1ed9c t\u00ednh"], "7": ["py", "function", "Python h\u00e0m"]}, "titleterms": {"qiskit": [0, 5, 8, 339, 340], "optim": [0, 1, 2, 3, 4, 5, 8, 309, 338, 339, 340], "api": 0, "refer": [0, 332, 335, 338, 340], "s": 0, "modul": 0, "qiskit_optim": [0, 1, 2, 3, 4, 5, 6], "submodul": 0, "algorithm": 1, "base": [1, 2, 3], "class": [1, 2, 3], "result": 1, "applic": 2, "convert": [3, 221, 225, 228, 232, 238, 241], "problem": [4, 334, 337], "quadrat": [4, 6, 265, 279], "program": [4, 6, 340], "runtim": [5, 340], "translat": [6, 339], "b\u1eaft": 7, "\u0111\u1ea7u": 7, "c\u00e0i": 7, "\u0111\u1eb7t": 7, "c\u00e1c": [7, 329, 330, 334, 337], "t\u00f9y": 7, "ch\u1ecdn": 7, "b\u1ea1n": 7, "\u0111\u00e3": 7, "s\u1eb5n": 7, "s\u00e0ng": 7, "kh\u1edfi": [7, 333], "h\u00e0nh": 7, "overview": 8, "next": 8, "step": [8, 335], "releas": 9, "note": 9, "infin": 10, "qiskitoptimizationerror": 11, "quadraticprogram": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 329, 339], "binary_var": 13, "binary_var_dict": 14, "binary_var_list": 15, "clear": 16, "continuous_var": 17, "continuous_var_dict": 18, "continuous_var_list": 19, "export_as_lp_str": 20, "from_is": [21, 325], "get_feasibility_info": 22, "get_linear_constraint": 23, "get_num_binary_var": 24, "get_num_continuous_var": 25, "get_num_integer_var": 26, "get_num_linear_constraint": 27, "get_num_quadratic_constraint": 28, "get_num_var": 29, "get_quadratic_constraint": 30, "get_vari": 31, "integer_var": 32, "integer_var_dict": 33, "integer_var_list": 34, "is_feas": 35, "linear_constraint": [36, 37], "linear_constraints_index": 38, "maxim": 39, "minim": 40, "name": [41, 248, 286], "object": 42, "prettyprint": [43, 122], "quadratic_constraint": [44, 45], "quadratic_constraints_index": 46, "read_from_lp_fil": 47, "remove_linear_constraint": 48, "remove_quadratic_constraint": 49, "statu": [50, 125, 151], "substitute_vari": 51, "to_is": [52, 328], "variabl": [53, 127, 283, 284, 285, 286, 287, 288], "variables_index": 54, "write_to_lp_fil": 55, "admmoptimizationresult": [56, 57], "state": 57, "admmoptim": [58, 59, 60, 61], "get_compatibility_msg": [59, 67, 72, 78, 89, 94, 107, 115, 138, 146, 242], "paramet": 60, "solv": [61, 68, 74, 80, 91, 96, 109, 117, 139, 147, 158, 331], "admmparamet": 62, "admmstat": 63, "baseaggreg": [64, 65], "aggreg": [65, 102], "cobylaoptim": [66, 67, 68], "cplexoptim": [69, 70, 71, 72, 73, 74], "cplex_paramet": 70, "disp": [71, 93], "is_cplex_instal": 73, "goemanswilliamsonoptimizationresult": [75, 76], "sdp_solut": 76, "goemanswilliamsonoptim": [77, 78, 79, 80], "max_cut_valu": 79, "groveroptimizationresult": [81, 82, 83, 84, 85, 86, 87], "intermediate_fv": 82, "n_input_qubit": 83, "n_output_qubit": 84, "operation_count": 85, "raw_sampl": [86, 105], "threshold": 87, "groveroptim": [88, 89, 90, 91, 332], "quantum_inst": 90, "gurobioptim": [92, 93, 94, 95, 96], "is_gurobi_instal": 95, "intermediateresult": [97, 98, 99, 100], "all_iter": 98, "last_iter": 99, "no_iter": 100, "meanaggreg": [101, 102], "minimumeigenoptimizationresult": [103, 104, 105], "min_eigen_solver_result": 104, "minimumeigenoptim": [106, 107, 108, 109, 331], "min_eigen_solv": 108, "multistartoptim": [110, 111, 112, 113], "clip": 111, "multi_start_solv": 112, "trial": 113, "optimizationalgorithm": [114, 115, 116, 117], "is_compat": [116, 244], "optimizationresult": [118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "__getitem__": [119, 255, 267], "fval": [120, 149], "get_correl": 121, "raw_result": 123, "sampl": [124, 331], "variable_nam": 126, "variables_dict": 128, "x": [129, 152], "optimizationresultstatu": [130, 131, 132, 133], "failur": 131, "infeas": 132, "success": 133, "recursiveminimumeigenoptimizationresult": [134, 135, 136], "histori": 135, "replac": 136, "recursiveminimumeigenoptim": [137, 138, 139, 331], "slsqpoptimizationresult": [140, 141, 142, 143, 144], "fx": 141, "imod": 142, "its": 143, "smode": 144, "slsqpoptim": [145, 146, 147], "solutionsampl": [148, 149, 150, 151, 152], "probabl": 150, "warmstartqaoafactori": [153, 154, 155, 156], "create_initial_st": 154, "create_initial_vari": 155, "create_mix": 156, "warmstartqaoaoptim": [157, 158], "binpack": [159, 160, 161, 162], "get_figur": 160, "interpret": [161, 164, 168, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 239, 243], "to_quadratic_program": [162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219], "cliqu": [163, 164, 165, 166], "size": 165, "exactcov": [167, 168, 169], "graphoptimizationappl": [170, 171, 172, 173], "draw": 171, "graph": [172, 195], "random_graph": 173, "graphpartit": [174, 175, 176], "knapsack": [177, 178, 179, 180, 337], "max_weight": 179, "maxcut": [181, 182, 183, 184, 185], "get_gset_result": 182, "parse_gset_format": 184, "numberpartit": [186, 187, 188], "optimizationappl": [189, 190, 191, 192], "sample_most_lik": 191, "skmodel": [193, 194, 195, 196, 197, 198], "disord": 194, "num_sit": 197, "setpack": [199, 200, 201], "stableset": [202, 203, 204], "tsp": [205, 206, 207, 208, 209, 210], "create_random_inst": [206, 212], "parse_tsplib_format": 208, "tsp_valu": 210, "vehiclerout": [211, 212, 213, 214, 215, 216], "depot": 213, "num_vehicl": 215, "vertexcov": [217, 218, 219], "inequalitytoequ": [220, 221, 222, 223, 330], "mode": 223, "integertobinari": [224, 225, 226, 330], "linearequalitytopenalti": [227, 228, 229, 230, 330], "penalti": [230, 234, 245], "linearinequalitytopenalti": [231, 232, 233, 234], "maximizetominim": 235, "minimizetomaxim": 236, "quadraticprogramconvert": [237, 238, 239], "quadraticprogramtoqubo": [240, 241, 242, 243, 244, 245], "constraint": [246, 247, 248, 249, 250, 339], "evalu": [247, 252, 258, 263, 270, 276], "rh": 249, "sens": [250, 280], "linearconstraint": [251, 252, 253], "linear": [253, 264, 278], "linearexpress": [254, 255, 256, 257, 258, 259, 260, 261], "bound": [256, 268], "coeffici": [257, 269], "evaluate_gradi": [259, 271, 277], "to_arrai": [260, 272], "to_dict": [261, 273], "quadraticconstraint": [262, 263, 264, 265], "quadraticexpress": [266, 267, 268, 269, 270, 271, 272, 273], "quadraticobject": [274, 275, 276, 277, 278, 279, 280], "constant": 275, "quadraticprogramel": [281, 282], "quadratic_program": 282, "as_tupl": 284, "lowerbound": 285, "upperbound": 287, "vartyp": 288, "qaoaclient": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "alpha": 290, "ansatz": [291, 303], "initial_st": 292, "mixer": 293, "optimization_level": 294, "program_input": [295, 311], "rep": 296, "use_initial_map": 297, "use_pulse_effici": 298, "use_swap_strategi": 299, "qaoaprogram": [300, 301], "compute_minimum_eigenvalu": [301, 306, 317], "vqeclient": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "backend": 304, "callback": 305, "initial_point": 307, "measurement_error_mitig": 308, "program_id": 310, "provid": 312, "shot": 313, "store_intermedi": 314, "supports_aux_oper": [315, 318], "vqeprogram": [316, 317, 318], "vqeprogramresult": 319, "vqeruntimeresult": [320, 321, 322], "job_id": 321, "optimizer_histori": 322, "from_docplex_mp": 323, "from_gurobipi": 324, "to_docplex_mp": 326, "to_gurobipi": 327, "b\u00e0i": [329, 337], "to\u00e1n": [329, 331, 333, 334, 336, 337], "l\u1eadp": 329, "tr\u00ecnh": [329, 330], "b\u1eadc": [329, 330], "hai": [329, 330], "gi\u1edbi": [329, 331, 333, 335, 336], "thi\u1ec7u": [329, 331, 333, 335, 336], "load": 329, "from": [329, 335], "an": 329, "lp": 329, "file": 329, "t\u1ea3i": 329, "m\u1ed9t": [329, 331, 332], "t\u1eeb": 329, "m\u00f4": [329, 331, 335], "h\u00ecnh": [329, 335], "docplex": [329, 339], "x\u00e2y": 329, "d\u1ef1ng": 329, "tr\u1ef1c": 329, "ti\u1ebfp": 329, "th\u00eam": 329, "x\u00f3a": 329, "r\u00e0ng": 329, "bu\u1ed9c": 329, "v\u00e0": 329, "thai": 329, "th\u1ebf": [329, 337], "bi\u1ebfn": [329, 336], "b\u1ed9": [330, 331, 332, 333], "chuy\u1ec3n": 330, "\u0111\u1ed5i": 330, "cho": [330, 334, 337], "ch\u01b0\u01a1ng": 330, "t\u1ed1i": [331, 332, 333, 334, 336, 337, 341], "\u01b0u": [331, 332, 333, 334, 336, 337, 341], "ho\u00e1": [331, 332, 333], "tr\u1ecb": [331, 332, 336], "ri\u00eang": [331, 336], "nh\u1ecf": [331, 336], "nh\u1ea5t": [331, 336], "t\u00e0i": [331, 333, 336], "li\u1ec7u": [331, 333, 336], "tham": [331, 333, 336], "kh\u1ea3o": [331, 333, 336], "chuy\u00ea": 331, "n": 331, "\u0111\u00f4": 331, "i": 331, "qubo": [331, 332, 338], "th\u00e0nh": 331, "t": 331, "t\u01b0": 331, "analysi": [331, 338], "grover": 332, "introduct": [332, 334, 337, 338], "t\u00ecm": 332, "ki\u1ebfm": 332, "th\u00edch": 332, "\u1ee9ng": [332, 337], "c\u1ef1c": 332, "ti\u1ec3u": 332, "c\u1ee7a": [332, 333], "v\u1ea5n": [332, 334, 337], "\u0111\u1ec1": [332, 334, 337], "s\u1eed": [332, 336], "d\u1ee5ng": [332, 334, 336, 337], "ki\u1ec3m": [332, 337], "tra": [332, 337], "r\u1eb1ng": 332, "ra": 332, "gi\u00e1": 332, "\u0111\u00fang": 332, "admm": 333, "t\u1ea1o": 333, "v\u00ed": 333, "d\u1ee5": 333, "l\u1eddi": 333, "gi\u1ea3i": [333, 335], "c\u1ed5": [333, 335], "\u0111i\u1ec3n": [333, 335], "s\u1ed1": 333, "g\u1ecdi": 333, "thu\u1eadt": [333, 336], "3": [333, 335], "h": 333, "k\u1ebft": 333, "qu\u1ea3": 333, "ph\u00e9p": 333, "l\u01b0\u1ee3ng": [333, 334, 335, 336], "t\u1eed": [333, 334, 335, 336, 337], "max": 334, "cut": 334, "travel": 334, "salesman": 334, "c\u1eaft": 334, "\u0111a": 334, "v\u1edbi": 334, "tr\u1ecdng": 334, "x\u1ea5p": 334, "x\u1ec9": 334, "t\u00ednh": 334, "ph\u1ed5": 334, "qu\u00e1t": 334, "h\u00f3a": [334, 336, 337, 341], "l\u01a1": 334, "p": 334, "\u01b0": 334, "ng": 334, "brute": 334, "forc": 334, "approach": 334, "map": 334, "Ising": [334, 335], "check": 334, "full": 334, "hamiltonian": [334, 335], "give": 334, "right": 334, "cost": 334, "run": [334, 340], "quantum": [334, 335, 338], "comput": 334, "vehicl": 335, "rout": 335, "ph\u1ea7n": 335, "ph\u01b0\u01a1ng": 335, "ph\u00e1p": 335, "construct": 335, "qp": 335, "formul": 335, "initi": 335, "classic": [335, 339], "solut": 335, "us": [335, 339], "ibm": 335, "ilog": 335, "cplex": 335, "ground": 335, "up": 335, "1": 335, "2": 335, "4": 335, "5": 335, "c\u1ea3i": 336, "thi\u1ec7n": 336, "thi\u00ean": 336, "b\u1eb1ng": 336, "c\u00e1ch": 336, "cvar": 336, "danh": 336, "m\u1ee5c": 336, "vqe": 336, "l\u1edbp": 337, "vertex": 337, "cover": 337, "l\u00e0m": 337, "n\u00e0o": 337, "\u0111\u1ec3": 337, "hamilton": 337, "warm": 338, "start": 338, "preliminari": [338, 340], "relax": 338, "qaoa": [338, 340], "standard": 338, "solver": 339, "model": 339, "cplexsolv": 339, "gurobisolv": 339, "between": 339, "gurobipi": 339, "indic": 339, "appendix": 340, "A": 340, "puls": 340, "effici": 340, "transpil": 340, "h\u01b0\u1ee1ng": 341, "d\u1eabn": 341}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 56}})