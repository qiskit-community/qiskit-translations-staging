Search.setIndex({"docnames": ["apidocs/qiskit_optimization", "apidocs/qiskit_optimization.algorithms", "apidocs/qiskit_optimization.applications", "apidocs/qiskit_optimization.converters", "apidocs/qiskit_optimization.problems", "apidocs/qiskit_optimization.runtime", "apidocs/qiskit_optimization.translators", "getting_started", "index", "release_notes", "stubs/qiskit_optimization.INFINITY", "stubs/qiskit_optimization.QiskitOptimizationError", "stubs/qiskit_optimization.QuadraticProgram", "stubs/qiskit_optimization.QuadraticProgram.binary_var", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list", "stubs/qiskit_optimization.QuadraticProgram.clear", "stubs/qiskit_optimization.QuadraticProgram.continuous_var", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string", "stubs/qiskit_optimization.QuadraticProgram.from_ising", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_variable", "stubs/qiskit_optimization.QuadraticProgram.integer_var", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list", "stubs/qiskit_optimization.QuadraticProgram.is_feasible", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.maximize", "stubs/qiskit_optimization.QuadraticProgram.minimize", "stubs/qiskit_optimization.QuadraticProgram.name", "stubs/qiskit_optimization.QuadraticProgram.objective", "stubs/qiskit_optimization.QuadraticProgram.prettyprint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.status", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables", "stubs/qiskit_optimization.QuadraticProgram.to_ising", "stubs/qiskit_optimization.QuadraticProgram.variables", "stubs/qiskit_optimization.QuadraticProgram.variables_index", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state", "stubs/qiskit_optimization.algorithms.ADMMOptimizer", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve", "stubs/qiskit_optimization.algorithms.ADMMParameters", "stubs/qiskit_optimization.algorithms.ADMMState", "stubs/qiskit_optimization.algorithms.BaseAggregator", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate", "stubs/qiskit_optimization.algorithms.CobylaOptimizer", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve", "stubs/qiskit_optimization.algorithms.CplexOptimizer", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold", "stubs/qiskit_optimization.algorithms.GroverOptimizer", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve", "stubs/qiskit_optimization.algorithms.GurobiOptimizer", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve", "stubs/qiskit_optimization.algorithms.IntermediateResult", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS", "stubs/qiskit_optimization.algorithms.MeanAggregator", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve", "stubs/qiskit_optimization.algorithms.OptimizationResult", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples", "stubs/qiskit_optimization.algorithms.OptimizationResult.status", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict", "stubs/qiskit_optimization.algorithms.OptimizationResult.x", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve", "stubs/qiskit_optimization.algorithms.SolutionSample", "stubs/qiskit_optimization.algorithms.SolutionSample.fval", "stubs/qiskit_optimization.algorithms.SolutionSample.probability", "stubs/qiskit_optimization.algorithms.SolutionSample.status", "stubs/qiskit_optimization.algorithms.SolutionSample.x", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve", "stubs/qiskit_optimization.applications.BinPacking", "stubs/qiskit_optimization.applications.BinPacking.get_figure", "stubs/qiskit_optimization.applications.BinPacking.interpret", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.Clique", "stubs/qiskit_optimization.applications.Clique.interpret", "stubs/qiskit_optimization.applications.Clique.size", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program", "stubs/qiskit_optimization.applications.ExactCover", "stubs/qiskit_optimization.applications.ExactCover.interpret", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program", "stubs/qiskit_optimization.applications.GraphOptimizationApplication", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph", "stubs/qiskit_optimization.applications.GraphPartition", "stubs/qiskit_optimization.applications.GraphPartition.interpret", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.Knapsack", "stubs/qiskit_optimization.applications.Knapsack.interpret", "stubs/qiskit_optimization.applications.Knapsack.max_weight", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program", "stubs/qiskit_optimization.applications.Maxcut", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result", "stubs/qiskit_optimization.applications.Maxcut.interpret", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program", "stubs/qiskit_optimization.applications.NumberPartition", "stubs/qiskit_optimization.applications.NumberPartition.interpret", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.OptimizationApplication", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program", "stubs/qiskit_optimization.applications.SKModel", "stubs/qiskit_optimization.applications.SKModel.disorder", "stubs/qiskit_optimization.applications.SKModel.graph", "stubs/qiskit_optimization.applications.SKModel.interpret", "stubs/qiskit_optimization.applications.SKModel.num_sites", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program", "stubs/qiskit_optimization.applications.SetPacking", "stubs/qiskit_optimization.applications.SetPacking.interpret", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.StableSet", "stubs/qiskit_optimization.applications.StableSet.interpret", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp", "stubs/qiskit_optimization.applications.Tsp.create_random_instance", "stubs/qiskit_optimization.applications.Tsp.interpret", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp.tsp_value", "stubs/qiskit_optimization.applications.VehicleRouting", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance", "stubs/qiskit_optimization.applications.VehicleRouting.depot", "stubs/qiskit_optimization.applications.VehicleRouting.interpret", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program", "stubs/qiskit_optimization.applications.VertexCover", "stubs/qiskit_optimization.applications.VertexCover.interpret", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program", "stubs/qiskit_optimization.converters.InequalityToEquality", "stubs/qiskit_optimization.converters.InequalityToEquality.convert", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret", "stubs/qiskit_optimization.converters.InequalityToEquality.mode", "stubs/qiskit_optimization.converters.IntegerToBinary", "stubs/qiskit_optimization.converters.IntegerToBinary.convert", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty", "stubs/qiskit_optimization.converters.MaximizeToMinimize", "stubs/qiskit_optimization.converters.MinimizeToMaximize", "stubs/qiskit_optimization.converters.QuadraticProgramConverter", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty", "stubs/qiskit_optimization.problems.Constraint", "stubs/qiskit_optimization.problems.Constraint.evaluate", "stubs/qiskit_optimization.problems.Constraint.name", "stubs/qiskit_optimization.problems.Constraint.rhs", "stubs/qiskit_optimization.problems.Constraint.sense", "stubs/qiskit_optimization.problems.LinearConstraint", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate", "stubs/qiskit_optimization.problems.LinearConstraint.linear", "stubs/qiskit_optimization.problems.LinearExpression", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__", "stubs/qiskit_optimization.problems.LinearExpression.bounds", "stubs/qiskit_optimization.problems.LinearExpression.coefficients", "stubs/qiskit_optimization.problems.LinearExpression.evaluate", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.LinearExpression.to_array", "stubs/qiskit_optimization.problems.LinearExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticConstraint", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic", "stubs/qiskit_optimization.problems.QuadraticExpression", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticObjective", "stubs/qiskit_optimization.problems.QuadraticObjective.constant", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticObjective.linear", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic", "stubs/qiskit_optimization.problems.QuadraticObjective.sense", "stubs/qiskit_optimization.problems.QuadraticProgramElement", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program", "stubs/qiskit_optimization.problems.Variable", "stubs/qiskit_optimization.problems.Variable.as_tuple", "stubs/qiskit_optimization.problems.Variable.lowerbound", "stubs/qiskit_optimization.problems.Variable.name", "stubs/qiskit_optimization.problems.Variable.upperbound", "stubs/qiskit_optimization.problems.Variable.vartype", "stubs/qiskit_optimization.runtime.QAOAClient", "stubs/qiskit_optimization.runtime.QAOAClient.alpha", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state", "stubs/qiskit_optimization.runtime.QAOAClient.mixer", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs", "stubs/qiskit_optimization.runtime.QAOAClient.reps", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies", "stubs/qiskit_optimization.runtime.QAOAProgram", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient", "stubs/qiskit_optimization.runtime.VQEClient.ansatz", "stubs/qiskit_optimization.runtime.VQEClient.backend", "stubs/qiskit_optimization.runtime.VQEClient.callback", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient.initial_point", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation", "stubs/qiskit_optimization.runtime.VQEClient.optimizer", "stubs/qiskit_optimization.runtime.VQEClient.program_id", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs", "stubs/qiskit_optimization.runtime.VQEClient.provider", "stubs/qiskit_optimization.runtime.VQEClient.shots", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgram", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgramResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history", "stubs/qiskit_optimization.translators.from_docplex_mp", "stubs/qiskit_optimization.translators.from_gurobipy", "stubs/qiskit_optimization.translators.from_ising", "stubs/qiskit_optimization.translators.to_docplex_mp", "stubs/qiskit_optimization.translators.to_gurobipy", "stubs/qiskit_optimization.translators.to_ising", "tutorials/01_quadratic_program", "tutorials/02_converters_for_quadratic_programs", "tutorials/03_minimum_eigen_optimizer", "tutorials/04_grover_optimizer", "tutorials/05_admm_optimizer", "tutorials/06_examples_max_cut_and_tsp", "tutorials/07_examples_vehicle_routing", "tutorials/08_cvar_optimization", "tutorials/09_application_classes", "tutorials/10_warm_start_qaoa", "tutorials/11_using_classical_optimization_solvers_and_models", "tutorials/12_qaoa_runtime", "tutorials/index"], "filenames": ["apidocs/qiskit_optimization.rst", "apidocs/qiskit_optimization.algorithms.rst", "apidocs/qiskit_optimization.applications.rst", "apidocs/qiskit_optimization.converters.rst", "apidocs/qiskit_optimization.problems.rst", "apidocs/qiskit_optimization.runtime.rst", "apidocs/qiskit_optimization.translators.rst", "getting_started.rst", "index.rst", "release_notes.rst", "stubs/qiskit_optimization.INFINITY.rst", "stubs/qiskit_optimization.QiskitOptimizationError.rst", "stubs/qiskit_optimization.QuadraticProgram.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.clear.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string.rst", "stubs/qiskit_optimization.QuadraticProgram.from_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info.rst", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_variable.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.is_feasible.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.maximize.rst", "stubs/qiskit_optimization.QuadraticProgram.minimize.rst", "stubs/qiskit_optimization.QuadraticProgram.name.rst", "stubs/qiskit_optimization.QuadraticProgram.objective.rst", "stubs/qiskit_optimization.QuadraticProgram.prettyprint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.status.rst", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables.rst", "stubs/qiskit_optimization.QuadraticProgram.to_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.variables.rst", "stubs/qiskit_optimization.QuadraticProgram.variables_index.rst", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.ADMMParameters.rst", "stubs/qiskit_optimization.algorithms.ADMMState.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.status.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.x.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.fval.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.probability.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.status.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.x.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve.rst", "stubs/qiskit_optimization.applications.BinPacking.rst", "stubs/qiskit_optimization.applications.BinPacking.get_figure.rst", "stubs/qiskit_optimization.applications.BinPacking.interpret.rst", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Clique.rst", "stubs/qiskit_optimization.applications.Clique.interpret.rst", "stubs/qiskit_optimization.applications.Clique.size.rst", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.ExactCover.rst", "stubs/qiskit_optimization.applications.ExactCover.interpret.rst", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph.rst", "stubs/qiskit_optimization.applications.GraphPartition.rst", "stubs/qiskit_optimization.applications.GraphPartition.interpret.rst", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Knapsack.rst", "stubs/qiskit_optimization.applications.Knapsack.interpret.rst", "stubs/qiskit_optimization.applications.Knapsack.max_weight.rst", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Maxcut.rst", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result.rst", "stubs/qiskit_optimization.applications.Maxcut.interpret.rst", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format.rst", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.NumberPartition.rst", "stubs/qiskit_optimization.applications.NumberPartition.interpret.rst", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SKModel.rst", "stubs/qiskit_optimization.applications.SKModel.disorder.rst", "stubs/qiskit_optimization.applications.SKModel.graph.rst", "stubs/qiskit_optimization.applications.SKModel.interpret.rst", "stubs/qiskit_optimization.applications.SKModel.num_sites.rst", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SetPacking.rst", "stubs/qiskit_optimization.applications.SetPacking.interpret.rst", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.StableSet.rst", "stubs/qiskit_optimization.applications.StableSet.interpret.rst", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.rst", "stubs/qiskit_optimization.applications.Tsp.create_random_instance.rst", "stubs/qiskit_optimization.applications.Tsp.interpret.rst", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format.rst", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.tsp_value.rst", "stubs/qiskit_optimization.applications.VehicleRouting.rst", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance.rst", "stubs/qiskit_optimization.applications.VehicleRouting.depot.rst", "stubs/qiskit_optimization.applications.VehicleRouting.interpret.rst", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles.rst", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.VertexCover.rst", "stubs/qiskit_optimization.applications.VertexCover.interpret.rst", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.convert.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.mode.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.convert.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.MaximizeToMinimize.rst", "stubs/qiskit_optimization.converters.MinimizeToMaximize.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty.rst", "stubs/qiskit_optimization.problems.Constraint.rst", "stubs/qiskit_optimization.problems.Constraint.evaluate.rst", "stubs/qiskit_optimization.problems.Constraint.name.rst", "stubs/qiskit_optimization.problems.Constraint.rhs.rst", "stubs/qiskit_optimization.problems.Constraint.sense.rst", "stubs/qiskit_optimization.problems.LinearConstraint.rst", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.LinearConstraint.linear.rst", "stubs/qiskit_optimization.problems.LinearExpression.rst", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.LinearExpression.bounds.rst", "stubs/qiskit_optimization.problems.LinearExpression.coefficients.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_array.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.constant.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.linear.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.sense.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program.rst", "stubs/qiskit_optimization.problems.Variable.rst", "stubs/qiskit_optimization.problems.Variable.as_tuple.rst", "stubs/qiskit_optimization.problems.Variable.lowerbound.rst", "stubs/qiskit_optimization.problems.Variable.name.rst", "stubs/qiskit_optimization.problems.Variable.upperbound.rst", "stubs/qiskit_optimization.problems.Variable.vartype.rst", "stubs/qiskit_optimization.runtime.QAOAClient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.alpha.rst", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz.rst", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state.rst", "stubs/qiskit_optimization.runtime.QAOAClient.mixer.rst", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level.rst", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.QAOAClient.reps.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.rst", "stubs/qiskit_optimization.runtime.VQEClient.ansatz.rst", "stubs/qiskit_optimization.runtime.VQEClient.backend.rst", "stubs/qiskit_optimization.runtime.VQEClient.callback.rst", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.initial_point.rst", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation.rst", "stubs/qiskit_optimization.runtime.VQEClient.optimizer.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_id.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.VQEClient.provider.rst", "stubs/qiskit_optimization.runtime.VQEClient.shots.rst", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate.rst", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgram.rst", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgramResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history.rst", "stubs/qiskit_optimization.translators.from_docplex_mp.rst", "stubs/qiskit_optimization.translators.from_gurobipy.rst", "stubs/qiskit_optimization.translators.from_ising.rst", "stubs/qiskit_optimization.translators.to_docplex_mp.rst", "stubs/qiskit_optimization.translators.to_gurobipy.rst", "stubs/qiskit_optimization.translators.to_ising.rst", "tutorials/01_quadratic_program.ipynb", "tutorials/02_converters_for_quadratic_programs.ipynb", "tutorials/03_minimum_eigen_optimizer.ipynb", "tutorials/04_grover_optimizer.ipynb", "tutorials/05_admm_optimizer.ipynb", "tutorials/06_examples_max_cut_and_tsp.ipynb", "tutorials/07_examples_vehicle_routing.ipynb", "tutorials/08_cvar_optimization.ipynb", "tutorials/09_application_classes.ipynb", "tutorials/10_warm_start_qaoa.ipynb", "tutorials/11_using_classical_optimization_solvers_and_models.ipynb", "tutorials/12_qaoa_runtime.ipynb", "tutorials/index.rst"], "titles": ["Qiskit Optimization API Reference", "Optimization algorithms (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms</span></code>)", "Optimization applications (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.applications</span></code>)", "Optimization converters (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.converters</span></code>)", "Optimization problems (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.problems</span></code>)", "Qiskit Optimization Runtime (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.runtime</span></code>)", "Quadratic program translators (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.translators</span></code>)", "Primeiros passos", "Qiskit Optimization overview", "Release Notes", "INFINITY", "QiskitOptimizationError", "QuadraticProgram", "QuadraticProgram.binary_var", "QuadraticProgram.binary_var_dict", "QuadraticProgram.binary_var_list", "QuadraticProgram.clear", "QuadraticProgram.continuous_var", "QuadraticProgram.continuous_var_dict", "QuadraticProgram.continuous_var_list", "QuadraticProgram.export_as_lp_string", "QuadraticProgram.from_ising", "QuadraticProgram.get_feasibility_info", "QuadraticProgram.get_linear_constraint", "QuadraticProgram.get_num_binary_vars", "QuadraticProgram.get_num_continuous_vars", "QuadraticProgram.get_num_integer_vars", "QuadraticProgram.get_num_linear_constraints", "QuadraticProgram.get_num_quadratic_constraints", "QuadraticProgram.get_num_vars", "QuadraticProgram.get_quadratic_constraint", "QuadraticProgram.get_variable", "QuadraticProgram.integer_var", "QuadraticProgram.integer_var_dict", "QuadraticProgram.integer_var_list", "QuadraticProgram.is_feasible", "QuadraticProgram.linear_constraint", "QuadraticProgram.linear_constraints", "QuadraticProgram.linear_constraints_index", "QuadraticProgram.maximize", "QuadraticProgram.minimize", "QuadraticProgram.name", "QuadraticProgram.objective", "QuadraticProgram.prettyprint", "QuadraticProgram.quadratic_constraint", "QuadraticProgram.quadratic_constraints", "QuadraticProgram.quadratic_constraints_index", "QuadraticProgram.read_from_lp_file", "QuadraticProgram.remove_linear_constraint", "QuadraticProgram.remove_quadratic_constraint", "QuadraticProgram.status", "QuadraticProgram.substitute_variables", "QuadraticProgram.to_ising", "QuadraticProgram.variables", "QuadraticProgram.variables_index", "QuadraticProgram.write_to_lp_file", "ADMMOptimizationResult", "ADMMOptimizationResult.state", "ADMMOptimizer", "ADMMOptimizer.get_compatibility_msg", "ADMMOptimizer.parameters", "ADMMOptimizer.solve", "ADMMParameters", "ADMMState", "BaseAggregator", "BaseAggregator.aggregate", "CobylaOptimizer", "CobylaOptimizer.get_compatibility_msg", "CobylaOptimizer.solve", "CplexOptimizer", "CplexOptimizer.cplex_parameters", "CplexOptimizer.disp", "CplexOptimizer.get_compatibility_msg", "CplexOptimizer.is_cplex_installed", "CplexOptimizer.solve", "GoemansWilliamsonOptimizationResult", "GoemansWilliamsonOptimizationResult.sdp_solution", "GoemansWilliamsonOptimizer", "GoemansWilliamsonOptimizer.get_compatibility_msg", "GoemansWilliamsonOptimizer.max_cut_value", "GoemansWilliamsonOptimizer.solve", "GroverOptimizationResult", "GroverOptimizationResult.intermediate_fval", "GroverOptimizationResult.n_input_qubits", "GroverOptimizationResult.n_output_qubits", "GroverOptimizationResult.operation_counts", "GroverOptimizationResult.raw_samples", "GroverOptimizationResult.threshold", "GroverOptimizer", "GroverOptimizer.get_compatibility_msg", "GroverOptimizer.quantum_instance", "GroverOptimizer.solve", "GurobiOptimizer", "GurobiOptimizer.disp", "GurobiOptimizer.get_compatibility_msg", "GurobiOptimizer.is_gurobi_installed", "GurobiOptimizer.solve", "IntermediateResult", "IntermediateResult.ALL_ITERATIONS", "IntermediateResult.LAST_ITERATION", "IntermediateResult.NO_ITERATIONS", "MeanAggregator", "MeanAggregator.aggregate", "MinimumEigenOptimizationResult", "MinimumEigenOptimizationResult.min_eigen_solver_result", "MinimumEigenOptimizationResult.raw_samples", "MinimumEigenOptimizer", "MinimumEigenOptimizer.get_compatibility_msg", "MinimumEigenOptimizer.min_eigen_solver", "MinimumEigenOptimizer.solve", "MultiStartOptimizer", "MultiStartOptimizer.clip", "MultiStartOptimizer.multi_start_solve", "MultiStartOptimizer.trials", "OptimizationAlgorithm", "OptimizationAlgorithm.get_compatibility_msg", "OptimizationAlgorithm.is_compatible", "OptimizationAlgorithm.solve", "OptimizationResult", "OptimizationResult.__getitem__", "OptimizationResult.fval", "OptimizationResult.get_correlations", "OptimizationResult.prettyprint", "OptimizationResult.raw_results", "OptimizationResult.samples", "OptimizationResult.status", "OptimizationResult.variable_names", "OptimizationResult.variables", "OptimizationResult.variables_dict", "OptimizationResult.x", "OptimizationResultStatus", "OptimizationResultStatus.FAILURE", "OptimizationResultStatus.INFEASIBLE", "OptimizationResultStatus.SUCCESS", "RecursiveMinimumEigenOptimizationResult", "RecursiveMinimumEigenOptimizationResult.history", "RecursiveMinimumEigenOptimizationResult.replacements", "RecursiveMinimumEigenOptimizer", "RecursiveMinimumEigenOptimizer.get_compatibility_msg", "RecursiveMinimumEigenOptimizer.solve", "SlsqpOptimizationResult", "SlsqpOptimizationResult.fx", "SlsqpOptimizationResult.imode", "SlsqpOptimizationResult.its", "SlsqpOptimizationResult.smode", "SlsqpOptimizer", "SlsqpOptimizer.get_compatibility_msg", "SlsqpOptimizer.solve", "SolutionSample", "SolutionSample.fval", "SolutionSample.probability", "SolutionSample.status", "SolutionSample.x", "WarmStartQAOAFactory", "WarmStartQAOAFactory.create_initial_state", "WarmStartQAOAFactory.create_initial_variables", "WarmStartQAOAFactory.create_mixer", "WarmStartQAOAOptimizer", "WarmStartQAOAOptimizer.solve", "BinPacking", "BinPacking.get_figure", "BinPacking.interpret", "BinPacking.to_quadratic_program", "Clique", "Clique.interpret", "Clique.size", "Clique.to_quadratic_program", "ExactCover", "ExactCover.interpret", "ExactCover.to_quadratic_program", "GraphOptimizationApplication", "GraphOptimizationApplication.draw", "GraphOptimizationApplication.graph", "GraphOptimizationApplication.random_graph", "GraphPartition", "GraphPartition.interpret", "GraphPartition.to_quadratic_program", "Knapsack", "Knapsack.interpret", "Knapsack.max_weight", "Knapsack.to_quadratic_program", "Maxcut", "Maxcut.get_gset_result", "Maxcut.interpret", "Maxcut.parse_gset_format", "Maxcut.to_quadratic_program", "NumberPartition", "NumberPartition.interpret", "NumberPartition.to_quadratic_program", "OptimizationApplication", "OptimizationApplication.interpret", "OptimizationApplication.sample_most_likely", "OptimizationApplication.to_quadratic_program", "SKModel", "SKModel.disorder", "SKModel.graph", "SKModel.interpret", "SKModel.num_sites", "SKModel.to_quadratic_program", "SetPacking", "SetPacking.interpret", "SetPacking.to_quadratic_program", "StableSet", "StableSet.interpret", "StableSet.to_quadratic_program", "Tsp", "Tsp.create_random_instance", "Tsp.interpret", "Tsp.parse_tsplib_format", "Tsp.to_quadratic_program", "Tsp.tsp_value", "VehicleRouting", "VehicleRouting.create_random_instance", "VehicleRouting.depot", "VehicleRouting.interpret", "VehicleRouting.num_vehicles", "VehicleRouting.to_quadratic_program", "VertexCover", "VertexCover.interpret", "VertexCover.to_quadratic_program", "InequalityToEquality", "InequalityToEquality.convert", "InequalityToEquality.interpret", "InequalityToEquality.mode", "IntegerToBinary", "IntegerToBinary.convert", "IntegerToBinary.interpret", "LinearEqualityToPenalty", "LinearEqualityToPenalty.convert", "LinearEqualityToPenalty.interpret", "LinearEqualityToPenalty.penalty", "LinearInequalityToPenalty", "LinearInequalityToPenalty.convert", "LinearInequalityToPenalty.interpret", "LinearInequalityToPenalty.penalty", "MaximizeToMinimize", "MinimizeToMaximize", "QuadraticProgramConverter", "QuadraticProgramConverter.convert", "QuadraticProgramConverter.interpret", "QuadraticProgramToQubo", "QuadraticProgramToQubo.convert", "QuadraticProgramToQubo.get_compatibility_msg", "QuadraticProgramToQubo.interpret", "QuadraticProgramToQubo.is_compatible", "QuadraticProgramToQubo.penalty", "Constraint", "Constraint.evaluate", "Constraint.name", "Constraint.rhs", "Constraint.sense", "LinearConstraint", "LinearConstraint.evaluate", "LinearConstraint.linear", "LinearExpression", "LinearExpression.__getitem__", "LinearExpression.bounds", "LinearExpression.coefficients", "LinearExpression.evaluate", "LinearExpression.evaluate_gradient", "LinearExpression.to_array", "LinearExpression.to_dict", "QuadraticConstraint", "QuadraticConstraint.evaluate", "QuadraticConstraint.linear", "QuadraticConstraint.quadratic", "QuadraticExpression", "QuadraticExpression.__getitem__", "QuadraticExpression.bounds", "QuadraticExpression.coefficients", "QuadraticExpression.evaluate", "QuadraticExpression.evaluate_gradient", "QuadraticExpression.to_array", "QuadraticExpression.to_dict", "QuadraticObjective", "QuadraticObjective.constant", "QuadraticObjective.evaluate", "QuadraticObjective.evaluate_gradient", "QuadraticObjective.linear", "QuadraticObjective.quadratic", "QuadraticObjective.sense", "QuadraticProgramElement", "QuadraticProgramElement.quadratic_program", "Variable", "Variable.as_tuple", "Variable.lowerbound", "Variable.name", "Variable.upperbound", "Variable.vartype", "QAOAClient", "QAOAClient.alpha", "QAOAClient.ansatz", "QAOAClient.initial_state", "QAOAClient.mixer", "QAOAClient.optimization_level", "QAOAClient.program_inputs", "QAOAClient.reps", "QAOAClient.use_initial_mapping", "QAOAClient.use_pulse_efficient", "QAOAClient.use_swap_strategies", "QAOAProgram", "QAOAProgram.compute_minimum_eigenvalue", "VQEClient", "VQEClient.ansatz", "VQEClient.backend", "VQEClient.callback", "VQEClient.compute_minimum_eigenvalue", "VQEClient.initial_point", "VQEClient.measurement_error_mitigation", "VQEClient.optimizer", "VQEClient.program_id", "VQEClient.program_inputs", "VQEClient.provider", "VQEClient.shots", "VQEClient.store_intermediate", "VQEClient.supports_aux_operators", "VQEProgram", "VQEProgram.compute_minimum_eigenvalue", "VQEProgram.supports_aux_operators", "VQEProgramResult", "VQERuntimeResult", "VQERuntimeResult.job_id", "VQERuntimeResult.optimizer_history", "from_docplex_mp", "from_gurobipy", "from_ising", "to_docplex_mp", "to_gurobipy", "to_ising", "Programas Quadr\u00e1ticos", "Conversores para Programas Quadr\u00e1ticos", "Otimizador Eigen m\u00ednimo", "Otimizador de Grover", "Otimizador ADMM", "Max-Cut e Problema do Caixeiro Viajante", "Roteamento de Ve\u00edculos", "Melhorando a Otimiza\u00e7\u00e3o Qu\u00e2ntica Variacional usando o CVaR", "Classes de Aplica\u00e7\u00e3o para Problemas de Otimiza\u00e7\u00e3o", "Otimiza\u00e7\u00e3o qu\u00e2ntica de warm-start", "Utilizando Modelos e Solucionadores de Otimiza\u00e7\u00e3o Cl\u00e1ssicos com o Qiskit Optimization", "Runtime QAOA", "Tutoriais de Otimiza\u00e7\u00e3o"], "terms": {"0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341], "covers": [0, 8], "the": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "whol": [0, 8], "rang": [0, 8, 48, 49, 119, 153, 157, 334, 335, 336, 338, 340], "from": [0, 7, 8, 21, 47, 66, 69, 79, 92, 99, 103, 104, 106, 110, 118, 121, 123, 137, 140, 142, 144, 145, 155, 157, 162, 166, 169, 176, 180, 182, 184, 185, 188, 191, 193, 198, 201, 204, 206, 208, 209, 212, 216, 219, 220, 224, 229, 233, 240, 323, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "high": [0, 8, 206, 212], "level": [0, 8, 283, 289, 294, 335, 340], "modeling": [0, 8], "of": [0, 3, 4, 5, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 65, 66, 68, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 96, 97, 101, 102, 103, 104, 105, 106, 109, 110, 112, 113, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 139, 140, 141, 143, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 177, 178, 179, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 199, 200, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 220, 222, 223, 226, 229, 231, 232, 233, 237, 239, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 297, 300, 301, 302, 306, 308, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "problems": [0, 1, 2, 8, 58, 66, 69, 72, 92, 94, 106, 137, 145, 220, 224, 240, 329, 331, 332, 333, 334, 335, 338, 339, 340], "with": [0, 8, 22, 51, 55, 58, 59, 61, 62, 66, 67, 68, 72, 74, 78, 81, 88, 89, 91, 94, 96, 107, 110, 115, 116, 117, 118, 137, 138, 140, 145, 146, 147, 161, 171, 193, 221, 224, 225, 227, 228, 231, 241, 242, 244, 260, 261, 272, 273, 276, 277, 281, 289, 300, 301, 306, 308, 317, 321, 329, 333, 334, 335, 340], "automatic": [0, 8, 340], "conversion": [0, 3, 8, 227, 230, 231, 234, 239, 240, 245], "to": [0, 3, 4, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 29, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 47, 50, 51, 52, 54, 55, 59, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 77, 78, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 94, 96, 97, 102, 106, 107, 109, 112, 115, 116, 117, 118, 119, 120, 133, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 163, 170, 174, 181, 183, 190, 202, 205, 207, 211, 217, 220, 221, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 238, 240, 241, 242, 244, 247, 252, 253, 255, 258, 259, 260, 261, 263, 264, 265, 267, 270, 271, 272, 273, 276, 277, 283, 284, 289, 290, 294, 297, 298, 300, 301, 302, 306, 308, 311, 314, 316, 317, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "different": [0, 3, 8, 88, 106, 137, 140, 157, 336], "required": [0, 8, 238, 335, 340], "representations": [0, 3, 8], "suit": [0, 8], "easy": [0, 8, 190], "use": [0, 8, 66, 88, 106, 137, 145, 157, 220, 261, 273, 289, 294, 299, 300, 302, 308, 316, 329, 333, 334, 335, 336, 339, 340], "quantum": [0, 8, 58, 90, 91, 153, 154, 156, 157, 224, 289, 300, 332, 333, 335, 336, 338, 340], "algorithms": [0, 5, 8, 66, 69, 92, 106, 114, 118, 137, 145, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "that": [0, 5, 8, 38, 43, 46, 51, 54, 58, 63, 65, 72, 80, 81, 94, 102, 110, 112, 118, 137, 140, 153, 154, 157, 193, 221, 222, 225, 227, 228, 229, 231, 233, 240, 243, 254, 266, 281, 289, 300, 302, 315, 316, 318, 323, 324, 329, 335, 340], "are": [0, 4, 8, 14, 15, 18, 19, 21, 22, 29, 33, 34, 51, 52, 62, 63, 66, 98, 99, 100, 110, 137, 145, 193, 220, 227, 231, 232, 240, 266, 289, 294, 300, 302, 316, 325, 328, 329, 335, 340], "ready": [0, 8], "run": [0, 8, 90, 158, 289, 297, 298, 300, 302, 316, 333, 334, 335, 336, 340], "on": [0, 3, 8, 29, 58, 66, 74, 96, 137, 163, 174, 181, 202, 205, 211, 217, 227, 231, 240, 289, 300, 302, 316, 333, 334, 336, 340], "classical": [0, 8, 58, 289, 300, 302, 316, 331, 333, 334, 335, 336, 340], "simulators": [0, 8], "well": [0, 8, 12, 16, 106, 289, 300], "real": [0, 8, 334, 337, 339, 340], "devic": [0, 8, 297], "via": [0, 8, 14, 15, 18, 19, 33, 34, 62, 66, 134, 135, 145, 254, 266, 333, 335, 339], "this": [0, 3, 12, 43, 47, 52, 55, 58, 59, 62, 66, 67, 69, 72, 74, 78, 89, 91, 92, 94, 96, 106, 107, 110, 111, 113, 115, 116, 119, 122, 137, 138, 145, 146, 150, 151, 153, 157, 163, 166, 224, 231, 232, 242, 244, 283, 284, 289, 300, 302, 311, 316, 319, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "enabl": [0, 8], "efficient": [0, 8, 289, 298, 340], "using": [0, 8, 51, 61, 68, 72, 74, 91, 94, 96, 109, 117, 139, 147, 157, 158, 190, 231, 239, 261, 273, 289, 308, 329, 331, 333, 334, 336, 338, 340], "docplex": [0, 8, 323, 326, 332, 333, 336, 338], "A": [0, 7, 8, 14, 15, 18, 19, 20, 33, 34, 43, 58, 64, 77, 80, 81, 89, 106, 107, 112, 118, 121, 122, 137, 138, 140, 148, 153, 154, 155, 156, 157, 159, 160, 161, 163, 167, 168, 170, 172, 173, 174, 175, 177, 178, 181, 182, 186, 187, 195, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 231, 242, 284, 289, 302, 316, 328, 329, 330, 331, 332, 333, 334, 335, 338], "uniform": [0, 8, 289], "interfac": [0, 5, 8, 281], "between": [0, 3, 6, 8, 153, 157, 335], "probl": [0, 3, 4, 8, 21, 43, 51, 52, 56, 59, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 80, 81, 88, 89, 91, 92, 94, 96, 103, 106, 107, 109, 112, 115, 116, 117, 118, 126, 127, 134, 137, 138, 139, 140, 145, 146, 147, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 190, 192, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 289, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "allows": [0, 8, 118, 289, 300], "users": [0, 8, 118, 157, 231], "solv": [0, 8, 58, 66, 69, 77, 92, 94, 106, 112, 118, 137, 145, 157, 331, 332, 334, 335, 336, 337, 338, 339, 340], "larg": [0, 8], "set": [0, 3, 8, 11, 62, 91, 199, 201, 202, 204, 289, 300, 301, 302, 306, 316, 317, 336, 340], "variational": [0, 8, 137, 331, 332, 335, 336, 340], "such": [0, 8, 22, 35, 106, 319, 320, 329], "approximat": [0, 8, 77, 106, 301, 306, 317], "algorithm": [0, 8, 56, 58, 61, 75, 77, 80, 81, 87, 88, 90, 103, 106, 112, 118, 123, 125, 130, 131, 132, 133, 134, 137, 140, 157, 289, 332, 336, 340], "qao": [0, 8, 106, 137, 153, 154, 155, 156, 157, 289, 295, 300, 330, 331, 332, 333, 334, 337, 339], "grov": [0, 8, 81, 87, 88, 91], "adaptiv": [0, 8, 88, 332], "search": [0, 8, 88, 332], "groveroptimiz": [0, 8, 86, 330, 331, 332, 333], "leveraging": [0, 8, 340], "fundamental": [0, 8, 330, 331, 338], "provided": [0, 8, 22, 35, 106], "by": [0, 8, 11, 43, 51, 56, 62, 77, 88, 101, 102, 103, 106, 110, 118, 134, 135, 137, 140, 157, 159, 220, 224, 231, 254, 266, 283, 289, 300, 302, 316, 329, 335, 339, 340], "terr": [0, 8, 21, 52, 289, 325, 328], "furthermor": [0, 8], "design": [0, 8], "it": [0, 8, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 43, 44, 50, 51, 106, 153, 157, 163, 170, 174, 181, 202, 205, 211, 217, 235, 236, 289, 300, 302, 315, 316, 318, 323, 333], "be": [0, 4, 8, 29, 39, 40, 43, 47, 50, 58, 59, 61, 62, 65, 66, 67, 68, 69, 72, 74, 77, 78, 81, 88, 89, 91, 92, 94, 96, 97, 102, 106, 107, 109, 110, 115, 116, 117, 118, 119, 137, 138, 139, 140, 145, 146, 147, 153, 156, 157, 158, 163, 170, 174, 181, 202, 205, 211, 217, 220, 221, 225, 227, 228, 231, 232, 240, 241, 242, 244, 247, 252, 254, 255, 258, 259, 263, 266, 267, 270, 271, 276, 277, 283, 289, 300, 301, 302, 306, 315, 316, 317, 318, 323, 324, 326, 327, 328, 333, 335, 336, 340], "easily": [0, 8], "extended": [0, 8], "and": [0, 3, 5, 6, 8, 11, 12, 14, 15, 18, 19, 21, 33, 34, 36, 44, 47, 51, 58, 62, 66, 67, 75, 79, 81, 89, 97, 103, 106, 107, 110, 118, 119, 128, 134, 136, 137, 138, 145, 146, 153, 157, 160, 193, 208, 231, 232, 238, 242, 254, 256, 262, 266, 268, 284, 289, 300, 301, 302, 306, 308, 316, 317, 319, 320, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "facilitat": [0, 5, 8], "rapid": [0, 8, 334], "development": [0, 8], "testing": [0, 8], "new": [0, 8, 118, 194, 224, 225, 240, 241, 254, 266, 283], "compatibl": [0, 8, 61, 67, 89, 107, 109, 116, 138, 146, 158, 242, 244, 335], "optimizers": [0, 8, 110, 334, 335, 336, 339, 340], "also": [0, 8, 94, 302, 333], "validation": [0, 8], "benchmarking": [0, 8, 333], "supports": [0, 12, 231, 302, 316, 323, 324], "quadratically": [0, 12], "constrained": [0, 12, 289, 300, 332], "quadratic": [0, 12, 13, 16, 17, 20, 21, 28, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 77, 80, 106, 145, 237, 251, 262, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 338, 339, 340], "programs": [0, 5, 237], "simplicity": 0, "we": [0, 266, 301, 306, 317, 336, 340], "ref": [0, 261, 273], "them": [0, 66, 102, 145], "just": [0, 75], "binary": [0, 12, 13, 14, 15, 24, 52, 58, 62, 79, 106, 182, 190, 191, 224, 225, 226, 231, 232, 323, 324, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "integ": [0, 12, 26, 32, 33, 34, 106, 119, 220, 224, 225, 226, 289, 300, 323, 324, 328, 329, 330, 335, 339, 340], "continuous": [0, 12, 17, 18, 19, 25, 58, 62, 66, 67, 145, 146, 157, 220, 283, 323, 324, 328, 329, 333, 338], "variabl": [0, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 29, 31, 32, 33, 34, 43, 50, 51, 52, 54, 56, 62, 63, 66, 67, 75, 81, 103, 106, 110, 118, 119, 126, 128, 129, 134, 136, 137, 139, 140, 145, 146, 152, 153, 154, 155, 156, 157, 164, 168, 178, 200, 203, 218, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 247, 252, 254, 255, 256, 258, 259, 261, 263, 266, 267, 268, 270, 271, 273, 276, 277, 297, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "equality": [0, 12, 36, 44, 62, 106, 137, 220, 221, 227, 228, 231, 240], "inequality": [0, 12, 220, 221, 228, 231, 232], "constraints": [0, 12, 16, 22, 27, 28, 37, 45, 52, 62, 106, 137, 220, 221, 227, 228, 231, 232, 240, 241, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "class": [0, 4, 7, 11, 12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 311, 316, 319, 320, 329, 330, 331, 333, 335, 338], "has": [0, 14, 15, 18, 19, 33, 34, 91, 106, 110, 119, 289, 300, 301, 306, 316, 317, 319, 325, 329, 339, 340], "vast": 0, "amount": 0, "relevant": [0, 63], "applications": [0, 170, 189, 334, 337, 340], "whil": 0, "still": [0, 51], "being": [0, 63, 134, 136, 140, 141, 335], "efficiently": 0, "representabl": 0, "matric": 0, "vectors": 0, "som": [0, 43, 231, 330, 334, 335, 337], "very": 0, "interesting": 0, "sub": [0, 110, 311, 329, 335, 337], "convex": [0, 72, 74, 94, 96, 333, 338], "which": [0, 22, 231], "can": [0, 50, 58, 59, 62, 66, 67, 72, 78, 89, 94, 107, 115, 116, 119, 137, 138, 145, 146, 153, 158, 163, 170, 174, 181, 202, 205, 211, 217, 242, 244, 254, 255, 266, 267, 289, 300, 301, 302, 306, 311, 315, 316, 317, 318, 333, 340], "solved": [0, 59, 61, 63, 66, 67, 68, 72, 74, 78, 89, 91, 94, 96, 107, 109, 110, 115, 116, 117, 118, 138, 139, 145, 146, 147, 158, 221, 225, 228, 232, 241, 242, 244], "unconstrained": [0, 106, 227, 228, 332, 336], "qub": [0, 58, 62, 81, 88, 89, 91, 103, 106, 107, 138, 231, 240, 241, 242, 330, 333, 334, 335, 337, 340], "cov": [0, 167, 169, 217, 219, 337], "many": [0, 331], "np": [0, 190, 193, 331, 333, 334, 335, 336, 338, 340], "complet": [0, 308, 335, 337, 340], "i": [0, 16, 21, 23, 30, 31, 48, 49, 52, 67, 77, 89, 107, 138, 146, 193, 231, 232, 242, 255, 266, 267, 289, 300, 302, 316, 325, 328, 329, 331, 333, 334, 335, 336, 338, 340], "classically": [0, 336], "intractabl": 0, "representation": [0, 12, 195, 251, 254, 262, 266, 274, 283, 329, 335, 336], "progr": [0, 12, 13, 16, 17, 20, 21, 32, 36, 37, 41, 44, 45, 47, 50, 53, 55, 77, 251, 262, 274, 295, 302, 310, 311, 316, 323, 324, 325, 326, 327, 333, 334, 338, 340], "supporting": 0, "in": [0, 5, 21, 22, 35, 47, 52, 58, 62, 66, 72, 75, 79, 81, 88, 90, 110, 114, 118, 120, 129, 131, 134, 137, 140, 145, 153, 156, 157, 161, 173, 182, 184, 190, 193, 207, 208, 222, 224, 226, 229, 230, 233, 234, 237, 241, 245, 266, 272, 273, 283, 289, 300, 301, 302, 306, 316, 317, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "addition": 0, "standard": [0, 153, 157, 289, 300, 302, 316, 340], "python": [0, 7, 335, 339], "errors": [0, 11], "will": [0, 58, 62, 88, 94, 106, 137, 157, 220, 227, 231, 240, 289, 298, 299, 315, 318, 335, 340], "rais": [0, 74, 91, 96, 335], "error": [0, 11, 289, 300, 302, 308, 316, 329, 335, 340], "if": [0, 10, 13, 14, 15, 17, 18, 19, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 43, 44, 47, 48, 49, 51, 52, 55, 58, 59, 61, 62, 66, 68, 69, 73, 74, 77, 78, 91, 92, 95, 96, 106, 109, 110, 115, 116, 117, 118, 119, 137, 145, 147, 153, 157, 158, 208, 220, 221, 225, 227, 228, 229, 231, 232, 233, 235, 236, 240, 244, 256, 268, 276, 277, 283, 289, 294, 297, 298, 300, 301, 302, 306, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 340], "circumstanc": 0, "cannot": [0, 55, 91, 329], "proceed": 0, "completion": [0, 145], "constant": [0, 21, 39, 40, 51, 52, 274, 325, 328, 329, 331, 335], "infinity": [0, 329], "common": 2, "is": [3, 8, 13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 35, 36, 43, 44, 48, 49, 51, 52, 55, 58, 59, 61, 62, 63, 66, 67, 68, 69, 72, 73, 74, 77, 78, 81, 88, 89, 91, 92, 95, 96, 106, 107, 110, 115, 116, 117, 119, 134, 135, 136, 137, 138, 145, 146, 147, 153, 157, 158, 164, 166, 168, 171, 178, 187, 193, 200, 203, 208, 218, 221, 224, 225, 227, 228, 231, 232, 235, 236, 240, 242, 244, 272, 273, 283, 289, 300, 302, 308, 315, 316, 318, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "having": 3, "convert": [3, 10, 88, 162, 166, 169, 176, 180, 185, 188, 190, 192, 198, 201, 204, 209, 216, 219, 220, 222, 223, 224, 226, 227, 229, 231, 233, 235, 236, 240, 243, 323, 330, 332, 334, 336, 337, 338, 339], "functionality": 3, "go": 3, "given": [3, 23, 30, 31, 59, 61, 67, 68, 72, 74, 77, 78, 89, 91, 94, 96, 107, 109, 112, 115, 116, 117, 138, 139, 146, 147, 158, 193, 222, 226, 229, 233, 240, 242, 244, 247, 252, 258, 259, 263, 270, 271, 276, 277, 289, 301, 306, 317, 336, 340], "quadraticprogr": [3, 4, 6, 59, 61, 63, 66, 67, 68, 69, 72, 74, 78, 80, 89, 91, 92, 94, 96, 106, 107, 109, 112, 115, 116, 117, 118, 137, 138, 139, 145, 146, 147, 158, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 224, 225, 228, 232, 238, 240, 241, 242, 244, 246, 254, 266, 281, 282, 283, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340], "interpret": [3, 82, 238, 330, 334, 337], "result": [3, 22, 35, 56, 61, 65, 66, 68, 69, 74, 81, 91, 92, 96, 102, 103, 104, 106, 109, 112, 117, 118, 122, 123, 134, 137, 139, 140, 145, 147, 158, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 238, 239, 243, 301, 306, 317, 319, 320, 329, 330, 332, 334, 335, 337, 338, 339, 340], "based": [3, 58, 163, 174, 181, 202, 205, 211, 217, 334, 336, 340], "original": [3, 81, 103, 106, 118, 123, 171, 222, 226, 229, 233, 243, 329, 330, 334, 336], "befor": [3, 82, 157, 339], "return": [3, 11, 52, 106, 118, 119, 123, 145, 208, 291, 294, 295, 303, 309, 310, 311, 312, 313, 328, 331, 334, 335, 338, 340], "an": [3, 4, 8, 22, 32, 35, 48, 49, 51, 55, 56, 58, 66, 69, 72, 74, 75, 76, 79, 88, 91, 92, 94, 96, 106, 110, 114, 118, 119, 130, 132, 134, 135, 137, 145, 148, 154, 156, 157, 163, 166, 169, 170, 171, 174, 181, 184, 189, 190, 193, 198, 202, 205, 211, 217, 221, 225, 228, 232, 237, 241, 254, 260, 261, 266, 272, 273, 289, 300, 302, 315, 316, 318, 325, 328, 336, 340], "appropriat": 3, "optimizationresult": [3, 56, 68, 74, 75, 81, 91, 96, 103, 112, 117, 134, 135, 139, 140, 147, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 331, 333], "structur": 4, "defining": [4, 335], "following": [4, 231, 232, 323], "not": [4, 22, 23, 30, 35, 36, 43, 47, 48, 49, 52, 55, 58, 61, 62, 66, 69, 71, 74, 91, 92, 93, 96, 106, 109, 118, 153, 157, 158, 208, 221, 225, 228, 231, 272, 273, 276, 277, 283, 289, 294, 299, 300, 301, 302, 306, 308, 314, 316, 317, 323, 324, 329, 330, 334, 335, 336, 338, 339, 340], "intended": 4, "instantiated": 4, "directly": [4, 163, 170, 174, 181, 202, 205, 211, 217, 329, 339], "objects": [4, 6, 65, 102, 281, 319, 320], "thes": [4, 289, 300, 301, 302, 306, 316, 317], "types": [4, 335], "availabl": 4, "within": [4, 66, 69, 92, 106, 145], "embed": 5, "algorithmic": [5, 66, 145], "usag": [5, 193], "scripts": 5, "cloud": [5, 316], "other": [6, 51, 62, 110, 193], "optimization": [6, 7, 11, 51, 56, 58, 59, 62, 63, 66, 67, 68, 69, 72, 74, 75, 78, 81, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 145, 146, 147, 148, 157, 158, 159, 163, 166, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 237, 240, 242, 244, 274, 289, 294, 300, 302, 314, 316, 331, 332, 333, 336, 337, 338, 340], "models": [6, 231], "or": [6, 10, 13, 14, 15, 17, 18, 19, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 44, 48, 49, 51, 62, 66, 69, 71, 92, 93, 106, 110, 118, 119, 129, 134, 136, 145, 157, 158, 163, 170, 174, 181, 190, 191, 193, 202, 205, 211, 217, 222, 225, 226, 229, 231, 233, 254, 255, 261, 266, 267, 272, 273, 289, 299, 300, 302, 308, 314, 316, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "O": [7, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340], "qiskit": [7, 11, 21, 52, 66, 69, 92, 106, 114, 137, 145, 237, 289, 302, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "depend": [7, 330, 334, 335, 338], "pacot": [7, 333, 335, 337], "principal": [7, 332], "pr\u00f3pri": [7, 334], "getting": [7, 8, 334], "started": [7, 8], "detalh": [7, 330, 331, 334, 339, 340], "op\u00e7\u00f5": 7, "ambient": 7, "plataform": 7, "suport": [7, 329, 331, 333, 334, 339], "voc": [7, 329, 335, 337, 339], "dev": [7, 329, 330, 331, 332, 334, 335, 338, 340], "refer": [7, 332, 334], "Em": [7, 330, 331, 332, 333, 334, 335, 336, 338], "segu": [7, 330, 331, 332, 333, 335, 336, 337, 338, 339], "inform": [7, 331, 332, 334, 340], "aqu": [7, 331, 333, 334, 335, 338, 340], "pod": [7, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "ser": [7, 329, 330, 331, 332, 333, 334, 335, 338, 340], "qua": [7, 330, 335, 340], "concentr": 7, "adicional": [7, 330], "espec\u00edf": [7, 332, 333, 335], "algum": [7, 329, 334, 335, 336, 339], "fun\u00e7\u00f5": [7, 329, 334, 335], "torn": [7, 332, 334, 335, 338], "onde": [7, 329, 330, 332, 334, 335, 340], "c\u00f3dig": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 95, 96, 97, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 130, 134, 137, 138, 139, 140, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 284, 289, 295, 300, 301, 302, 306, 311, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328], "dependent": [7, 339], "program": [7, 331, 335, 338], "s": [7, 11, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 62, 88, 114, 163, 235, 236, 237, 302, 331, 332, 333, 334, 335, 338, 340], "n\u00e3": [7, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340], "s\u00e3": [7, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "padr\u00e3": [7, 330, 331, 336, 340], "Esses": 7, "ibm": [7, 69, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "cplex": [7, 47, 69, 70, 71, 72, 73, 329, 331, 333, 339], "cvxpy": 7, "matplotlib": [7, 333, 334, 335, 336, 337, 340], "vej": [7, 330, 332, 339], "inic": [7, 331, 332, 340], "local": [7, 66, 112, 145, 340], "maneir": [7, 329, 334, 338, 340], "simpl": [7, 331, 332, 333, 334, 335], "\u00e9": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gui": 7, "virtual": 7, "simples": [7, 334], "adicion": [7, 330, 331, 334, 335, 338], "list": [7, 15, 19, 22, 23, 30, 34, 35, 36, 37, 39, 40, 44, 45, 53, 56, 65, 75, 79, 80, 81, 86, 88, 102, 103, 105, 106, 118, 124, 126, 127, 134, 135, 137, 140, 154, 155, 156, 157, 159, 161, 163, 164, 167, 168, 170, 174, 175, 177, 178, 181, 183, 186, 187, 196, 199, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 258, 259, 262, 263, 266, 270, 271, 274, 276, 277, 301, 306, 317, 329, 331, 333, 334, 335, 340], "extra": 7, "semelh": [7, 335], "visualization": [7, 331, 334], "sej": [7, 330, 332, 333, 334, 335, 337, 338], "pip": [7, 339], "install": [7, 339], "val": [7, 334, 335, 336], "pen": [7, 334, 335], "ressalt": 7, "usu\u00e1ri": [7, 337], "zsh": 7, "shell": 7, "vers\u00f5": [7, 339], "recent": [7, 339], "mac": 7, "vai": [7, 334, 335], "precis": [7, 329, 330, 332, 333, 334, 335, 337, 339], "coloc": [7, 335], "aspas": 7, "font": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 95, 96, 97, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 130, 134, 137, 138, 139, 140, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 284, 289, 295, 300, 301, 302, 306, 311, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328], "permit": [7, 331, 334, 335, 340], "acess": [7, 329, 333, 340], "vers\u00e3": [7, 335, 339, 340], "atualiz": [7, 332, 333], "desenvolv": 7, "vez": [7, 329, 330, 331, 332, 334, 335, 337, 338, 340], "usar": [7, 329, 331, 333, 339, 340], "reposit\u00f3ri": 7, "packag": [7, 334, 335], "index": [7, 14, 15, 18, 19, 23, 30, 31, 33, 34, 38, 46, 48, 49, 54, 118, 119, 211, 212, 213, 255, 261, 273, 329, 335, 340], "pypi": [7, 69, 339], "Isso": [7, 330, 331, 334, 340], "dar": [7, 338], "capac": [7, 334, 337], "inspecion": [7, 340], "estend": [7, 335], "eficient": [7, 333, 334], "Uma": [7, 330, 331, 333, 334, 338, 340], "\u00faltim": [7, 331, 334, 335], "mudanc": 7, "exig": [7, 334], "recurs": [7, 331, 335, 340], "nov": [7, 329, 330, 333, 334, 335], "modific": [7, 334, 335], "instru\u00e7\u00f5": 7, "sourc": [7, 8, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "installing": 7, "usand": [7, 329, 331, 333, 334, 338, 340], "mesm": [7, 329, 330, 331, 333, 334, 335, 338, 339], "clon": 7, "otimiz": [7, 329, 330, 335], "git": 7, "https": [7, 21, 52, 66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 289, 300, 325, 328, 329, 339], "github": [7, 21, 52, 325, 328, 329], "clonag": 7, "cri": [7, 331, 332, 333, 334, 338], "past": 7, "cham": [7, 329, 330, 331, 334, 340], "cd": 7, "Se": [7, 329, 331, 333, 335, 337, 339, 340], "quis": [7, 339], "execut": [7, 333, 335, 336], "test": [7, 333, 334, 335, 340], "an\u00e1lis": [7, 334], "requisit": [7, 332, 335], "desenvolvedor": 7, "r": [7, 331, 332, 333, 334, 335, 336], "requirements": 7, "txt": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "lo": [7, 334, 339], "mod": [7, 140, 142, 144, 220, 221, 329, 335, 337, 339], "edit": 7, "signif": [7, 333, 334], "alter": 7, "projet": [7, 333, 335], "requ": [7, 47, 340], "reinstal": 7, "aplic": [7, 330, 331, 332, 336, 338, 339, 340], "faz": [7, 329, 334, 335, 338, 340], "leitur": [7, 340], "arquiv": 7, "lp": [7, 20, 47, 55], "uso": [7, 332, 334, 335, 340], "cplexoptimiz": [7, 118, 333, 338, 339], "wrapp": [7, 66, 69, 92, 106, 145], "atual": [7, 330, 332, 335], "3": [7, 62, 66, 88, 118, 220, 266, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340], "9": [7, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "nest": [7, 329, 330, 332, 333, 334, 335, 337, 340], "cas": [7, 72, 118, 129, 137, 157, 222, 226, 229, 233, 241, 329, 330, 331, 332, 333, 334, 335, 336], "comando": 7, "ter": [7, 338], "efeit": 7, "cvx": 7, "send": [7, 329, 331, 332, 334, 335], "algoritm": [7, 330, 331, 332, 334, 335, 336, 338, 340], "goemans": [7, 75, 77, 80], "williamson": [7, 75, 77, 80], "goemanswilliamsonoptimiz": 7, "possibilit": [7, 334], "m\u00e9tod": [7, 329, 330, 331, 333, 334, 335], "draw": [7, 337, 338, 340], "gr\u00e1fic": [7, 332, 335], "gurobipy": [7, 92, 324, 327], "gurob": [7, 92, 93, 94, 95, 339], "gurobioptimiz": [7, 339], "div": 7, "into": [7, 14, 15, 18, 19, 33, 34, 88, 106, 137, 157, 162, 166, 169, 175, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 222, 224, 225, 228, 231, 232, 238, 239, 241, 243, 323, 324], "tutorials": [7, 8, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "find": [7, 66, 88, 106, 133, 145, 340], "out": [7, 23, 30, 48, 49, 119, 163, 170, 174, 181, 202, 205, 211, 217], "about": [7, 118], "open": [8, 55, 340], "framework": [8, 332], "modul": [8, 11, 66, 69, 92, 106, 114, 145, 237], "1e": [10, 17, 18, 19, 32, 33, 34, 145, 283], "20": [10, 17, 18, 19, 32, 33, 34, 69, 283, 331, 333, 334, 335, 338, 339, 340], "string": [10, 20, 43, 55, 67, 72, 94, 119, 122, 146, 182, 191, 329, 340], "numb": [10, 14, 15, 18, 19, 24, 25, 26, 27, 28, 29, 33, 34, 62, 66, 77, 81, 83, 84, 88, 110, 113, 137, 140, 143, 145, 157, 159, 173, 186, 188, 193, 197, 206, 211, 212, 215, 229, 233, 276, 277, 289, 300, 302, 308, 313, 316, 334, 335, 336, 340], "floating": 10, "point": [10, 289, 300, 302, 307, 316, 340], "possibl": [10, 75, 220], "exception": [11, 72, 74, 91, 96, 335], "messag": [11, 59, 67, 78, 89, 107, 115, 138, 140, 144, 146, 242], "returned": [11, 22, 35, 63, 97, 140, 301, 306, 317], "with_traceback": 11, "tb": 11, "self": [11, 308, 335], "__traceback__": 11, "nam": [12, 13, 14, 15, 16, 17, 18, 19, 23, 30, 31, 32, 33, 34, 36, 38, 43, 44, 46, 48, 49, 51, 54, 55, 118, 119, 126, 128, 145, 184, 208, 224, 246, 251, 254, 255, 261, 262, 266, 267, 273, 283, 284, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "bas": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320, 331, 333, 334, 335, 340], "object": [12, 62, 63, 81, 104, 112, 118, 123, 140, 148, 153, 281, 319, 320, 340], "par\u00e2metr": [12, 13, 14, 15, 17, 18, 19, 21, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 72, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 96, 102, 103, 106, 107, 109, 110, 112, 115, 116, 117, 118, 119, 134, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 186, 187, 190, 191, 193, 196, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 289, 300, 301, 302, 306, 316, 317, 323, 324, 325, 326, 327, 328, 334, 335, 339, 340], "str": [12, 13, 14, 15, 17, 18, 19, 20, 23, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 54, 55, 59, 67, 69, 70, 72, 78, 81, 85, 89, 94, 107, 115, 119, 122, 126, 128, 134, 136, 138, 140, 144, 146, 184, 208, 220, 223, 242, 246, 247, 248, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 286, 289, 295, 300, 302, 309, 310, 311, 316, 321, 322, 334, 335, 338, 340], "attribut": [12, 56, 58, 66, 69, 75, 81, 88, 92, 97, 103, 106, 110, 118, 130, 134, 140, 145, 148, 157, 163, 170, 174, 177, 181, 193, 202, 205, 211, 217, 220, 227, 231, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "methods": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 101, 103, 106, 110, 114, 118, 119, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 232, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "non": [13, 14, 15, 16, 17, 18, 19, 21, 29, 32, 33, 34, 36, 39, 40, 43, 44, 47, 48, 49, 51, 55, 58, 66, 69, 72, 75, 81, 88, 92, 94, 103, 106, 118, 119, 129, 137, 140, 157, 159, 163, 165, 166, 171, 173, 193, 194, 206, 212, 227, 231, 240, 274, 289, 295, 300, 301, 302, 306, 311, 316, 317, 323, 326, 327, 335, 339, 340], "adds": [13, 17, 32, 36, 44], "optional": [13, 14, 15, 17, 18, 19, 29, 32, 33, 34, 36, 44, 51, 58, 66, 69, 70, 75, 76, 81, 86, 88, 103, 105, 106, 118, 120, 129, 137, 140, 141, 142, 143, 144, 157, 159, 163, 165, 171, 173, 206, 212, 227, 230, 231, 234, 240, 245, 289, 291, 292, 294, 300, 301, 302, 304, 306, 307, 312, 316, 317, 322, 323, 333], "empty": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 55, 59, 72, 78, 94, 115, 329], "default": [13, 14, 15, 17, 18, 19, 21, 32, 33, 34, 36, 43, 44, 62, 88, 106, 137, 145, 157, 159, 163, 289, 300, 302, 316, 325, 329, 334, 340], "g": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 51, 106, 137, 193, 289, 300, 302, 316, 329, 333, 334, 335, 340], "x0": [13, 14, 15, 17, 18, 19, 32, 33, 34, 331, 332, 338], "used": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 58, 62, 66, 69, 81, 83, 84, 88, 90, 92, 106, 137, 145, 156, 157, 223, 224, 230, 234, 245, 247, 283, 289, 294, 300, 302, 316, 323, 333, 340], "tip": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 338, 340], "retorn": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 340], "added": [13, 17, 32, 36, 44, 227, 231, 240], "levant": [13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 36, 43, 44, 47, 48, 49, 51, 52, 55, 61, 68, 74, 88, 91, 96, 106, 109, 110, 117, 118, 119, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 281, 283, 289, 301, 306, 317, 323, 324, 325, 326, 327, 328], "qiskitoptimizationerror": [13, 14, 15, 17, 18, 19, 21, 22, 32, 33, 34, 36, 43, 44, 51, 52, 61, 68, 74, 91, 96, 106, 109, 117, 118, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 283, 289, 323, 324, 325, 326, 327, 328, 329, 331], "already": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 154, 156], "occupied": [13, 17, 32], "keys": [14, 15, 18, 19, 33, 34, 254, 261, 266, 273, 289, 300, 302, 316, 340], "key_format": [14, 15, 18, 19, 33, 34], "uses": [14, 15, 18, 19, 33, 34, 88, 157, 254, 266], "var_dict": [14, 18, 33], "construct": [14, 15, 18, 19, 33, 34, 231, 289, 333, 334, 340], "dictionary": [14, 18, 33, 38, 46, 54, 128, 134, 136, 254, 261, 266, 273, 289, 300, 302, 309, 316], "format": [14, 15, 18, 19, 20, 33, 34, 163, 170, 174, 181, 182, 184, 190, 202, 205, 208, 211, 217, 241, 329, 330, 331, 336], "union": [14, 15, 17, 18, 19, 22, 23, 30, 31, 32, 33, 34, 35, 36, 39, 40, 44, 48, 49, 51, 75, 81, 88, 103, 106, 118, 119, 134, 137, 140, 157, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 183, 187, 190, 191, 193, 196, 200, 202, 203, 205, 207, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 293, 300, 302, 309, 316], "int": [14, 15, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 48, 49, 51, 54, 62, 66, 77, 81, 83, 84, 85, 88, 110, 113, 119, 134, 136, 137, 140, 142, 143, 145, 157, 159, 163, 164, 165, 167, 168, 171, 173, 175, 177, 178, 179, 182, 183, 186, 187, 193, 196, 197, 199, 200, 203, 206, 207, 210, 211, 212, 213, 214, 215, 218, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 294, 296, 300, 302, 313, 316, 330, 331, 334, 335, 336, 338, 339, 340], "sequenc": [14, 15, 18, 19, 33, 34], "interpreted": [14, 15, 18, 19, 33, 34], "otherwis": [14, 15, 18, 19, 33, 34, 35, 51, 67, 89, 107, 116, 138, 145, 146, 220, 231, 235, 236, 242, 244, 315, 318, 325, 336], "elements": [14, 15, 18, 19, 33, 34, 323, 324, 326, 327], "converted": [14, 15, 18, 19, 33, 34, 89, 91, 107, 138, 221, 222, 224, 225, 226, 228, 229, 231, 232, 233, 241, 242, 243], "strings": [14, 15, 18, 19, 33, 34, 43], "substituted": [14, 15, 18, 19, 33, 34, 51, 134, 136, 329], "dict": [14, 18, 33, 36, 38, 39, 40, 44, 46, 51, 54, 69, 70, 81, 85, 128, 134, 136, 171, 182, 191, 247, 251, 252, 254, 258, 259, 261, 262, 263, 266, 270, 271, 273, 274, 276, 277, 289, 295, 300, 302, 309, 311, 316, 322, 329, 340], "mapping": [14, 18, 33, 62, 224], "instanc": [14, 15, 18, 19, 33, 34, 58, 88, 90, 91, 104, 106, 110, 134, 135, 137, 157, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 206, 208, 209, 212, 216, 219, 281, 301, 306, 317, 335, 336, 337], "taken": [14, 15, 18, 19, 33, 34], "less": [14, 15, 18, 19, 33, 34, 36, 44, 77], "than": [14, 15, 18, 19, 21, 33, 34, 36, 44, 66, 77, 110, 145, 283, 289, 325], "one": [14, 15, 18, 19, 33, 34, 66, 75, 88, 106, 110, 137, 145, 157, 221, 224, 241], "instantiation": [14, 15, 18, 19, 33, 34], "attempted": [14, 15, 18, 19, 33, 34], "mor": [14, 15, 18, 19, 21, 33, 34, 66, 110, 145, 325], "substitution": [14, 15, 18, 19, 33, 34, 50, 51, 139, 329], "nested": [14, 15, 18, 19, 33, 34], "var_list": [15, 19, 34], "clears": 16, "delet": 16, "all": [16, 29, 62, 72, 75, 94, 98, 211, 212, 213, 220, 281, 289, 336, 338, 340], "objectiv": [16, 39, 40, 81, 103, 106, 118, 120, 140, 141, 145, 149, 227, 231, 232, 240, 274, 275, 276, 277, 278, 279, 280, 323, 324, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "function": [16, 56, 66, 75, 81, 88, 103, 106, 118, 120, 134, 140, 141, 145, 149, 231, 232, 274, 275, 276, 277, 278, 279, 280, 302, 316, 319, 320, 323, 324, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "lowerbound": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 329, 330, 339], "upperbound": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 329, 330, 339], "float": [17, 18, 19, 21, 22, 32, 33, 34, 35, 36, 39, 40, 44, 51, 56, 62, 63, 66, 75, 79, 81, 82, 87, 88, 103, 106, 110, 111, 118, 119, 120, 128, 134, 137, 140, 145, 149, 150, 153, 154, 155, 156, 157, 210, 222, 226, 227, 229, 230, 231, 233, 234, 240, 243, 245, 246, 247, 249, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 275, 276, 277, 283, 284, 285, 287, 289, 290, 300, 302, 316, 323, 325, 328, 331, 340], "low": [18, 19, 33, 34, 51, 66, 110, 145, 206, 212, 256, 268, 285, 329, 336], "bound": [18, 19, 33, 34, 66, 110, 145, 256, 268, 285, 329, 335], "upper": [18, 19, 33, 34, 51, 66, 110, 145, 256, 266, 268, 329], "returns": [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 38, 41, 42, 43, 45, 46, 53, 54, 57, 59, 60, 67, 70, 71, 72, 73, 76, 77, 78, 80, 86, 89, 93, 94, 95, 104, 105, 107, 108, 111, 113, 115, 116, 119, 120, 122, 124, 125, 126, 127, 128, 129, 135, 136, 138, 141, 142, 143, 144, 146, 157, 195, 197, 223, 230, 234, 242, 244, 245, 248, 249, 250, 253, 255, 256, 257, 260, 261, 264, 265, 267, 268, 269, 272, 273, 275, 278, 279, 280, 282, 284, 285, 286, 287, 288, 292, 293, 296, 304, 305, 307, 308, 314, 326, 327, 336, 340], "representing": [20, 43, 106, 122, 163, 170, 174, 181, 202, 205, 211, 217], "qubit_op": [21, 52, 325, 328], "offset": [21, 39, 40, 52, 274, 325, 328, 329, 331, 334, 335, 336, 337], "lin": [21, 23, 27, 36, 37, 38, 39, 40, 44, 48, 106, 118, 137, 145, 231, 241, 251, 254, 256, 257, 258, 259, 260, 261, 262, 274, 323, 324, 325, 330, 331, 333, 334, 335, 337, 338, 339, 340], "fals": [21, 35, 62, 69, 92, 116, 145, 244, 261, 272, 273, 289, 300, 302, 315, 316, 318, 325, 333, 340], "creat": [21, 154, 155, 156, 157, 206, 212, 254, 266, 283, 325, 331, 334, 336], "qubit": [21, 52, 301, 306, 317, 325, 328, 332, 334, 335, 337, 338, 340], "operator": [21, 52, 289, 295, 301, 306, 311, 315, 317, 318, 325, 328, 331, 335, 340], "shift": [21, 325], "valu": [21, 22, 35, 43, 52, 56, 62, 63, 66, 75, 77, 79, 81, 82, 88, 97, 103, 110, 111, 118, 119, 120, 128, 129, 130, 134, 136, 137, 140, 141, 145, 149, 152, 155, 157, 177, 206, 210, 212, 231, 247, 252, 254, 258, 259, 263, 266, 270, 271, 276, 277, 289, 300, 301, 302, 306, 315, 316, 317, 318, 319, 320, 323, 325, 328, 331, 332, 333, 334, 336, 337, 338, 339, 340], "mapped": [21, 52, 325, 328], "qubits": [21, 52, 81, 83, 84, 88, 325, 328, 332, 334, 335, 337, 340], "sam": [21, 22, 51, 52, 319, 320, 325, 328, 337], "order": [21, 52, 118, 207, 325, 328, 331, 334], "th": [21, 52, 255, 325, 328], "see": [21, 52, 69, 140, 289, 325, 328], "issu": [21, 52, 59, 78, 115, 325, 328], "1148": [21, 52, 325, 328], "details": [21, 52, 69, 325, 328], "operatorbas": [21, 289, 293, 300, 301, 306, 317, 325, 328], "ising": [21, 52, 106, 325, 328, 330, 331, 336], "hamiltonian": [21, 52, 106, 193, 289, 300, 325, 328, 330, 331, 338, 340], "bool": [21, 35, 62, 69, 71, 77, 92, 93, 116, 145, 157, 244, 261, 272, 273, 289, 297, 298, 299, 300, 302, 308, 314, 315, 316, 318, 325, 339], "tru": [21, 35, 62, 73, 77, 95, 116, 157, 244, 289, 297, 298, 315, 318, 325, 329, 331, 333, 334, 335, 338, 339, 340], "x": [21, 22, 35, 36, 44, 51, 56, 75, 77, 79, 81, 103, 118, 121, 134, 140, 145, 148, 160, 182, 193, 222, 224, 226, 229, 231, 232, 233, 239, 243, 247, 252, 258, 259, 263, 270, 271, 274, 276, 277, 325, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340], "2": [21, 51, 62, 66, 98, 118, 132, 145, 211, 212, 231, 232, 266, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "treated": [21, 325], "term": [21, 77, 231, 232, 262, 325, 329, 330, 331, 333, 334, 335, 336, 338, 340], "sinc": [21, 72, 94, 325], "1": [21, 58, 62, 66, 69, 77, 99, 110, 118, 131, 134, 136, 137, 145, 153, 157, 159, 163, 164, 167, 168, 174, 177, 178, 181, 186, 193, 199, 200, 202, 203, 205, 211, 217, 218, 224, 231, 232, 266, 289, 300, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "else": [21, 69, 92, 334, 335, 336], "ther": [21, 43, 77, 88, 137, 193, 220, 231, 325], "paul": [21, 289, 325, 331, 334, 335, 340], "xs": [21, 325], "any": [21, 69, 70, 112, 118, 123, 231, 246, 251, 254, 256, 262, 266, 268, 274, 283, 289, 295, 300, 302, 309, 311, 316, 322, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "zs": [21, 325], "notimplementederror": [21, 325], "input": [21, 22, 81, 83, 206, 212, 325], "listop": [21, 325], "wheth": [22, 35, 59, 67, 69, 71, 72, 78, 89, 92, 93, 94, 97, 107, 115, 116, 137, 138, 146, 242, 244, 261, 272, 273, 289, 299, 300, 302, 308, 314, 315, 316, 318, 340], "solution": [22, 35, 62, 75, 76, 81, 86, 105, 106, 118, 124, 132, 133, 140, 148, 155, 160, 182, 210, 334, 335, 337, 339], "feasibl": [22, 35, 62, 66, 133, 334, 335], "along": 22, "violations": [22, 66], "type": [22, 29, 52, 88, 106, 118, 137, 208, 210, 220, 221, 225, 232, 283, 284, 288, 329, 340], "ndarray": [22, 35, 36, 39, 40, 44, 56, 75, 76, 79, 81, 103, 112, 118, 121, 129, 134, 140, 141, 152, 155, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 182, 183, 184, 187, 190, 191, 196, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 239, 243, 247, 251, 252, 254, 258, 259, 260, 262, 263, 266, 270, 271, 272, 274, 276, 277, 289, 300, 302, 307, 316, 340], "par": [22, 210, 329, 332, 333, 335, 336, 338, 339, 340], "optimiz": [22, 35, 59, 60, 61, 62, 66, 67, 68, 69, 72, 74, 78, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 134, 137, 138, 139, 140, 142, 144, 145, 146, 147, 157, 158, 242, 244, 289, 300, 302, 316, 319, 320, 322, 333, 334, 335, 336, 340], "violated": 22, "constraint": [22, 23, 30, 36, 38, 44, 46, 48, 49, 62, 66, 225, 228, 231, 232, 251, 252, 253, 262, 263, 264, 265], "len": [22, 334, 335, 336, 338, 340], "total": [22, 24, 25, 26, 29, 187, 210, 301, 306, 317, 334, 335, 337, 338, 339, 340], "vars": [22, 339], "linearconstraint": [23, 36, 37], "corresponding": [23, 30, 31, 106, 120, 128, 137, 164, 168, 178, 200, 203, 218, 253, 255, 260, 261, 264, 265, 267, 272, 273, 284, 323, 324, 325, 326, 327], "indexerror": [23, 30, 48, 49, 119], "siz": [23, 30, 66, 118, 163, 166, 335], "keyerror": [23, 30, 48, 49, 119], "does": [23, 30, 47, 48, 49, 55, 62, 106, 228, 276, 277], "exist": [23, 30, 47, 48, 49, 52, 328, 329, 330, 332, 334, 335, 338], "vartyp": [29, 283, 284, 338], "specified": [29, 58, 66, 88, 106, 110, 112, 137, 145, 157, 163, 166, 170, 174, 181, 202, 205, 211, 217, 221, 289, 300], "filtered": 29, "counted": 29, "quadraticconstraint": [30, 44, 45], "sens": [36, 44, 221, 235, 236, 246, 251, 262, 274, 329, 330, 335], "rhs": [36, 44, 246, 251, 262, 329, 330, 335], "form": [36, 44, 88, 106, 137, 157, 238, 239, 241, 272, 273, 274, 329, 330, 331, 333, 334, 335, 337, 339, 340], "spmatrix": [36, 39, 40, 44, 251, 254, 262, 266, 274], "coefficients": [36, 39, 40, 44, 251, 254, 260, 261, 262, 266, 272, 273, 274, 329], "left": [36, 247, 252, 253, 263, 264, 265, 334], "hand": [36, 44, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265], "sid": [36, 44, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265, 332, 340], "constraintsens": [36, 44, 246, 250, 251, 262, 329], "E": [36, 44, 62, 289, 300, 302, 316, 329, 331, 333, 334, 335], "eq": [36, 44, 224, 329, 330], "denot": [36, 44, 329, 331, 335], "equal": [36, 44, 118, 119, 159], "ge": [36, 44, 329, 330], "great": [36, 44, 283, 335], "l": [36, 44, 333, 335], "le": [36, 44, 329, 330], "right": [36, 44, 246, 249, 251, 262, 334, 336], "c0": [36, 329, 334, 337, 338, 339], "exists": [36, 44, 228, 232, 328], "valid": [36, 51, 289, 300, 333], "property": [37, 38, 41, 42, 45, 46, 50, 53, 54, 57, 60, 70, 71, 76, 82, 83, 84, 85, 86, 87, 90, 93, 104, 105, 108, 111, 113, 120, 123, 124, 125, 126, 127, 128, 129, 135, 136, 141, 142, 143, 144, 165, 172, 179, 195, 197, 213, 215, 223, 230, 234, 245, 248, 249, 250, 253, 256, 257, 264, 265, 268, 269, 275, 278, 279, 280, 282, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 321, 322], "maps": [38, 46, 54], "its": [38, 46, 54, 62, 140, 207, 254, 266, 289, 300, 302, 316, 334], "sets": [39, 40, 183], "maximized": 39, "part": [39, 40, 262, 274, 275, 278, 279, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tupl": [39, 40, 44, 51, 112, 134, 135, 136, 262, 266, 267, 273, 274, 284, 328, 331, 334, 340], "created": [39, 40, 88, 106, 137, 154, 156, 157, 162, 166, 169, 176, 180, 185, 188, 198, 201, 204, 206, 209, 212, 216, 219], "minimized": 40, "quadraticobjectiv": 42, "wrap": 43, "80": 43, "pretty": [43, 122], "printed": [43, 122], "text": [43, 231, 232, 329, 330, 340], "width": 43, "output": [43, 66, 69, 81, 84, 92, 145, 272, 273, 338], "disabled": 43, "setting": [43, 71, 93], "might": 43, "exceed": 43, "exampl": [43, 66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 266], "long": [43, 333, 340], "won": 43, "t": [43, 158, 329, 333, 334, 335, 336, 338], "wrapped": [43, 66, 69, 92, 145], "printabl": 43, "q0": [44, 329], "filenam": [47, 55, 184, 208], "loads": 47, "fil": [47, 55, 184, 208, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "loaded": [47, 323, 324], "filenotfounderror": 47, "method": [47, 59, 62, 66, 77, 78, 110, 112, 115, 116, 145, 244, 311, 329, 333], "installed": [47, 69, 73, 92, 95, 333], "present": 47, "pythonpath": 47, "remov": [48, 49, 330], "quadraticprogramstatus": [50, 329], "infeasibl": [50, 51, 139, 329, 331], "due": [50, 74, 91, 96, 139, 329, 335], "constants": [51, 329], "substitut": [51, 329, 340], "replac": 51, "means": 51, "weighted": [51, 106], "need": [51, 65, 102, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "copy": [51, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "everything": 51, "referenc": [51, 58, 66, 137, 145, 157, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 231, 333, 336], "mak": [51, 163, 166, 329], "sur": 51, "indic": [51, 161, 164, 175, 178, 183, 203, 207, 218, 254, 261, 266, 267, 273, 332], "matched": 51, "correctly": 51, "bounds": [51, 329, 339], "updated": [51, 63], "accordingly": 51, "y": [51, 62, 145, 160, 231, 232, 329, 330, 331, 332, 334, 335, 339, 340], "substituting": [51, 134, 136], "status": [51, 56, 75, 81, 103, 118, 130, 134, 140, 145, 148, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340], "gets": [51, 329], "invalid": [51, 88, 106, 137], "follows": [51, 118, 289, 300, 302, 316, 324], "multipl": [51, 331, 332], "tim": [51, 62, 329, 333, 334, 337, 338, 339], "coefficient": [51, 224, 255, 267, 325], "zer": [51, 66, 110, 145, 334, 336, 340], "writ": [55, 92], "model": [55, 163, 166, 193, 194, 198, 323, 324, 326, 327, 330, 332, 333, 334, 336, 338, 340], "written": 55, "directory": [55, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "my_probl": 55, "appended": 55, "end": [55, 97, 231, 232, 329, 332, 338, 339], "suffix": 55, "oserror": 55, "docplexexception": 55, "fval": [56, 75, 81, 82, 103, 118, 134, 140, 148, 331, 333, 336, 338, 339], "stat": [56, 63, 106, 137, 153, 154, 157, 191, 289, 292, 300, 301, 306, 315, 317, 318, 331, 333, 340], "admmoptimization": 56, "optimal": [56, 62, 75, 103, 106, 134, 336], "found": [56, 59, 62, 75, 78, 103, 115, 118, 120, 129, 134, 335, 339], "admm": [56, 58, 61, 62, 63], "admmstat": [56, 57], "internal": [56, 63, 336], "computation": [56, 63], "optimizationresultstatus": [56, 75, 81, 103, 118, 125, 134, 140, 151, 331, 339], "termination": [56, 75, 81, 103, 118, 125, 130, 134, 140], "qubo_optimiz": [58, 333], "continuous_optimiz": [58, 333], "params": [58, 333, 336], "optimizationalgorithm": [58, 66, 69, 77, 88, 92, 106, 110, 137, 145, 157], "implementation": [58, 62, 63, 153, 157], "heuristic": [58, 289, 340], "introduced": [58, 137, 289, 300], "gambell": [58, 333], "c": [58, 329, 332, 333, 334, 335, 338, 339, 340], "simonett": [58, 333], "2020": [58, 333, 336, 340], "mult": [58, 66, 110, 112, 145, 333], "block": [58, 62, 333], "heuristics": [58, 333], "mixed": [58, 333], "computers": [58, 333], "arxiv": [58, 137, 157, 193, 224, 231, 289, 300, 330, 331, 332, 333, 334, 335, 338], "preprint": [58, 331, 332, 333], "2001": [58, 333], "02069": [58, 333], "effectively": 58, "then": [58, 62, 66, 106, 110, 145, 153, 157, 289, 298, 315, 318, 340], "minimumeigenoptimiz": [58, 134, 135, 137, 157, 332, 333, 334, 335, 336, 337, 338, 339, 340], "initialized": [58, 62], "numpyminimumeigensolv": [58, 137, 331, 332, 333, 334, 335, 336, 337, 338], "slsqpoptimiz": 58, "admmparameters": [58, 60, 333], "checks": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244], "implementing": [59, 78, 115, 116, 244], "check": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244, 335], "compatibility": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244], "incompatibility": [59, 67, 74, 78, 89, 91, 96, 107, 115, 138, 146, 242], "wer": [59, 78, 115], "current": [60, 289, 300, 302, 316], "tri": [61, 68, 74, 91, 96, 109, 117, 139, 147, 158], "admmoptimizationresult": 61, "applied": [61, 66, 68, 74, 91, 96, 109, 112, 117, 137, 139, 145, 147, 158], "rho_initial": [62, 63, 333], "10000": 62, "factor_c": [62, 333], "100000": 62, "bet": [62, 333, 338, 340], "1000": [62, 66, 333, 334, 337, 339], "maxit": [62, 289, 300, 302, 316, 333, 334, 336, 339, 340], "10": [62, 224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tol": [62, 333], "0001": [62, 66], "max_tim": 62, "inf": 62, "three_block": [62, 333], "vary_rh": 62, "tau_incr": 62, "tau_decr": 62, "mu_r": 62, "mu_merit": 62, "warm_start": 62, "defin": [62, 97, 140, 220, 240, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340], "parameters": [62, 66, 69, 70, 137, 145, 289, 300, 302, 316, 335, 339, 340], "initial": [62, 63, 66, 110, 145, 153, 154, 155, 156, 157, 289, 292, 300, 302, 307, 316, 340], "rho": [62, 63, 333], "paramet": [62, 63, 66, 110, 145, 153, 157, 289, 300, 302, 316, 319, 320, 335, 338], "penalizing": 62, "factor": [62, 88, 106, 137, 157, 227, 230, 231, 232, 234, 240, 245, 336], "when": [62, 66, 88, 106, 118, 137, 145, 153, 157, 163, 165, 166, 171, 289, 329, 340], "penalization": 62, "decision": [62, 297], "maximum": [62, 66, 145, 159, 177, 181, 206, 212], "iterations": [62, 88, 140, 143, 145, 333, 336], "toleranc": [62, 66], "residual": [62, 333], "convergenc": 62, "running": [62, 340], "seconds": 62, "boolean": [62, 289, 340], "flag": [62, 289, 340], "select": 62, "rul": 62, "updat": [62, 339, 340], "increas": 62, "at": [62, 97, 134, 135, 137, 193, 266, 301, 306, 317, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "each": [62, 63, 81, 85, 97, 101, 137, 145, 161, 214, 289, 300, 302, 316, 336, 340], "iteration": [62, 81, 85, 97, 99, 137, 340], "modified": [62, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "according": [62, 80, 153, 157], "primal": 62, "dual": [62, 333], "residuals": [62, 333], "update_rho_by_residuals": 62, "boyd": [62, 333], "parikh": [62, 333], "n": [62, 193, 206, 212, 231, 232, 329, 332, 333, 334, 335, 336, 337, 338, 340], "chu": [62, 333], "peleat": [62, 333], "b": [62, 329, 330, 333, 334, 339], "eckstein": [62, 333], "j": [62, 77, 157, 193, 231, 232, 267, 333, 334, 335, 336, 338, 340], "2011": [62, 333], "distributed": [62, 333], "statistical": [62, 333], "learning": [62, 333, 340], "alternating": [62, 333], "direction": [62, 333], "multipliers": [62, 333], "foundations": [62, 333], "trends": [62, 333], "machin": [62, 333], "122": [62, 333], "comput": [62, 79, 191, 210, 315, 318, 331, 335, 337], "merit": 62, "start": [62, 66, 110, 112, 145, 153, 154, 155, 157, 158, 329], "pre": [62, 157, 158], "solving": [62, 63, 334], "relaxed": [62, 155, 157], "first": [62, 66, 110, 134, 135, 145, 329, 335], "option": 62, "guarante": 62, "even": [62, 333], "should": [62, 97, 110, 118, 153, 157, 326, 327], "tuning": 62, "options": [62, 220, 340], "help": 62, "considered": 62, "hint": 62, "wher": [62, 160, 193, 211, 212, 213, 231, 232, 255, 267, 334], "iterativ": [62, 137], "process": [62, 331, 334], "op": [63, 331, 337, 340], "keeps": 63, "track": 63, "various": 63, "stored": [63, 97, 98, 99, 100, 137], "during": [63, 106, 289, 300, 302, 316], "recreated": 63, "third": 63, "abc": [64, 110, 114, 189, 237], "abstract": [64, 65, 110, 114, 115, 117, 170, 189, 190, 192, 237, 238, 239, 246, 247], "aggregat": [64, 101, 157], "results": [64, 65, 75, 97, 98, 99, 100, 101, 102, 118, 123, 134, 135, 137, 157, 193, 332, 334, 336], "minimumeigenoptimizationresult": [65, 102, 109, 134, 135, 158], "combined": [65, 102], "solutionsampl": [65, 75, 81, 86, 102, 103, 105, 118, 124, 331, 339], "aggregated": [65, 102], "sampl": [65, 75, 81, 86, 101, 102, 103, 105, 118, 121, 148, 150, 151, 289, 331, 338, 339, 340], "rhobeg": 66, "rhoend": 66, "maxfun": 66, "disp": [66, 69, 92, 339], "catol": 66, "0002": 66, "trials": [66, 110, 145], "clip": [66, 110, 145], "100": [66, 110, 145, 206, 212, 289, 300, 302, 316, 333, 335, 336, 339, 340], "multistartoptimiz": [66, 145], "scipy": [66, 140, 145], "cobyl": [66, 333, 336, 339], "provid": [66, 69, 92, 106, 145, 289, 300, 301, 302, 306, 316, 317, 340], "fmin_cobyl": 66, "docs": [66, 69, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "org": [66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "doc": [66, 145, 329], "14": [66, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "generated": [66, 80, 145, 329, 339], "html": [66, 145, 329], "arguments": [66, 145], "passed": [66, 145, 157, 227, 231, 240, 289, 300, 302, 316], "constructor": [66, 145, 283], "qiskit_optimization": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 300, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "import": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "specify": [66, 69, 92, 106, 137, 145], "her": [66, 69, 92, 106, 137, 145, 302], "initializ": [66, 69, 92, 106, 137, 145, 157, 246, 281, 333, 335, 336], "tak": [66, 106, 137, 145], "stor": [66, 145, 254, 266, 289, 300, 302, 314, 316, 336], "lat": [66, 145], "invoked": [66, 145], "optimum": [66, 145, 336], "consisting": [66, 106, 145, 262, 284, 340], "only": [66, 67, 77, 99, 106, 145, 146, 157, 221, 227, 235, 236, 289, 300, 302, 316, 324, 339, 340], "reasonabl": 66, "chang": [66, 153, 157, 338], "final": [66, 141, 145, 331, 333, 334, 335, 336, 340], "accuracy": [66, 145], "precisely": 66, "guaranteed": 66, "trust": 66, "region": 66, "controls": 66, "frequency": 66, "impli": 66, "evaluations": 66, "absolut": 66, "trial": [66, 110, 145], "guess": [66, 110, 145], "uniformly": [66, 110, 145, 193], "drawn": [66, 110, 145], "potential": [66, 110, 145], "clipping": [66, 110, 145], "unbounded": [66, 110, 145, 256, 268], "replaced": [66, 110, 145], "correspondingly": [66, 110, 145], "contains": [67, 75, 146, 225, 256, 268, 319, 320, 323, 324, 326], "explaining": [67, 89, 107, 138, 146, 242], "describing": [67, 89, 107, 138, 140, 144, 146, 242, 309], "runs": [68, 74, 91, 96, 109, 117, 139, 147, 289, 340], "try": [68, 74, 91, 96, 109, 117, 139, 147, 158, 329, 335], "incompatibl": [68, 74, 91, 96, 117, 139, 147, 241], "cplex_parameters": [69, 339], "project": [69, 339, 340], "is_cplex_installed": 69, "print": [69, 71, 92, 93, 118, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "www": [69, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "en": [69, 159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "icos": 69, "topic": 69, "display": [71, 93, 329, 339], "information": [71, 93, 118, 123, 145, 206, 212, 238, 239, 314, 319, 320], "accepts": [72, 94], "modeled": [72, 94], "may": [72, 74, 77, 96, 140, 221, 225, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "throw": 72, "determined": [72, 231], "static": [73, 79, 95, 173, 182, 184, 191, 206, 208, 210, 212, 242], "depending": [74, 96], "settings": [74, 96, 289, 300, 302, 316], "sdp_solution": 75, "properti": [75, 81, 140], "contain": [75, 221, 225, 228, 289, 300, 302, 316], "explor": [75, 332, 334], "solutions": [75, 157, 335], "sdp": [75, 76], "num_cuts": 77, "sort_cuts": 77, "unique_cuts": 77, "seed": [77, 173, 193, 206, 212, 334, 335, 336, 337], "max": [77, 80, 181, 183, 185, 335, 337], "cut": [77, 79, 80, 181, 183, 185, 335, 337, 339, 340], "sum_": [77, 193, 231, 232, 330, 334, 335], "w": [77, 329, 333, 334, 335, 336], "therefor": 77, "encod": [77, 80], "negativ": 77, "adjacency": [77, 79, 184, 210, 340], "matrix": [77, 79, 121, 184, 210, 254, 266, 329, 334, 336, 340], "graph": [77, 163, 170, 171, 173, 174, 176, 181, 182, 184, 202, 205, 208, 211, 217, 334, 337], "cuts": [77, 80], "generat": [77, 153, 194, 329], "sort": [77, 336], "uniqu": 77, "thus": 77, "random": [77, 173, 193, 206, 212, 289, 300, 302, 316, 334, 335, 336, 340], "generator": [77, 193], "adj_matrix": [79, 210, 334], "numpy": [79, 182, 184, 191, 193, 331, 333, 334, 335, 336, 337, 338, 340], "array": [79, 163, 170, 174, 181, 182, 184, 190, 202, 205, 211, 217, 231, 232, 254, 260, 266, 272, 329, 331, 335, 336, 338, 339, 340], "operation_counts": 81, "n_input_qubits": 81, "n_output_qubits": 81, "intermediate_fval": 81, "threshold": [81, 137, 331], "raw_sampl": [81, 103], "constructs": [81, 110, 134, 140, 262, 274], "specific": [81, 140], "defined": [81, 140, 254, 266], "counts": [81, 85, 191, 336], "operation": [81, 85, 145], "performed": [81, 85], "per": [81, 85, 289, 300, 302, 316, 319, 320, 340], "represent": [81, 83, 84, 160, 330, 331, 332, 334, 338, 340], "intermediat": [81, 82, 97, 98, 100, 134, 135, 137, 289, 300, 302, 314, 316, 336, 337], "minimization": [81, 235, 236, 241], "expected": [81, 281, 336], "consistent": [81, 338, 340], "probability": [81, 101, 103, 148, 331, 336, 338, 339, 340], "sampling": [81, 103], "gett": [82, 83, 84, 87, 165, 172, 179, 195, 197, 213, 215], "get": [85, 118, 121, 160, 182, 301, 306, 317, 335], "raw": [86, 105], "num_value_qubits": 88, "num_iterations": [88, 332], "quantum_instanc": [88, 331, 332, 333, 334, 335, 336, 337, 338, 339], "converters": [88, 106, 118, 137, 157, 220, 224, 237, 240, 330, 334, 336, 337, 338], "penalty": [88, 106, 137, 157, 227, 231, 232, 240, 336], "gas": [88, 332], "minimum": [88, 103, 106, 108, 137, 206, 212, 289, 300, 301, 302, 306, 315, 316, 317, 318, 331, 333, 334, 336], "improvement": 88, "quantuminstanc": [88, 90, 331, 334, 335, 337, 338, 339], "backend": [88, 289, 300, 301, 302, 306, 316, 317, 332, 333, 334, 336, 337, 339, 340], "selected": [88, 221], "defaults": [88, 289, 340], "aer": [88, 334, 336, 337, 339], "statevector": [88, 335, 336], "simulator": [88, 336], "quadraticprogramconvert": [88, 106, 137, 157, 220, 224, 227, 231, 240], "converting": [88, 106, 137, 157], "internally": [88, 106, 137, 157, 254, 266], "quadraticprogramtoqub": [88, 106, 137, 157, 330, 334, 337, 338], "typeerror": [88, 106, 119, 137, 281], "circuits": [90, 153, 157, 289, 300, 302, 316], "attributeerror": 91, "been": [91, 300, 301, 306, 316, 317, 319, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "is_gurobi_installed": 92, "suppress": 92, "info": 92, "stdout": 92, "sys": [92, 335], "devnull": 92, "def": [92, 331, 334, 335, 336, 338, 340], "noop": 92, "args": 92, "kwargs": 92, "pass": [92, 298, 332, 338, 340], "clos": 92, "flush": 92, "writelin": 92, "enum": [97, 130], "recursiveminimumeigenoptimiz": 97, "user": 97, "last": [99, 134, 135], "No": [100, 329, 330, 331, 332, 334, 335, 337, 338, 340], "baseaggregator": [101, 157], "averaging": [101, 102], "min_eigen_solver_result": [103, 336, 337], "eigen": [103, 106, 134, 137, 330, 333, 334], "minimumeigensolv": [103, 104, 105, 106, 108, 302, 331, 333, 336], "minimumeigensolverresult": [103, 104, 301, 306, 317], "obtained": [103, 104, 118, 132, 134, 135, 155, 335, 339], "underlying": 103, "min_eigen_solv": [106, 335, 337], "solvers": [106, 157], "assum": [106, 334, 340], "thereof": 106, "converts": [106, 232], "expanding": 106, "adding": 106, "terms": [106, 137, 227, 231, 232, 340], "resulting": [106, 336], "translated": [106, 326, 327, 328], "whos": [106, 119, 164, 168, 178, 187, 200, 203, 207, 218, 340], "minimal": 106, "vector": [106, 191, 289, 300, 302, 316, 333], "eigenstat": [106, 301, 306, 315, 317, 318, 334, 336, 340], "correspond": [106, 183, 207, 329, 334, 336, 340], "ground": [106, 301, 306, 317], "good": 106, "outlin": [106, 137], "how": [106, 137, 329], "scal": [106, 137, 227, 231, 240, 298], "computed": 106, "tod": [106, 330, 331, 332, 333, 334, 335, 337], "applying": [106, 157], "logic": [106, 157], "eigensolv": [106, 108, 315, 318, 332, 333, 334, 335, 336, 337], "implements": 110, "classed": 110, "valueerror": [110, 301, 306, 317], "small": [110, 289], "minimiz": [112, 118, 145, 274, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340], "appli": [112, 137], "callabl": [112, 289, 300, 302, 305, 316], "raw_results": 118, "specifying": [118, 251, 262, 289, 300, 302, 316], "_": [118, 335, 336, 338], "binary_v": [118, 329, 330, 331, 332, 333, 335, 338, 339, 340], "x1": [118, 331, 332, 338], "x2": [118, 331, 332, 338], "x3": [118, 338], "var": [118, 224, 331, 332], "variable_nam": 118, "variables_dict": 118, "maintain": 118, "generating": [118, 334, 335], "possibly": 118, "failur": [118, 129, 222, 226, 229, 233, 331], "match": [118, 231, 276, 277], "key": [119, 134, 136, 267, 289, 300, 302, 316, 336, 338], "neith": 119, "nor": 119, "zi": 121, "zj": 121, "correlation": 121, "currently": 123, "dump": 123, "leftovers": 123, "additional": [123, 140, 223, 289, 300, 302, 316, 334], "ended": 131, "succeeded": 133, "replacements": 134, "history": [134, 137, 319, 320, 322, 336], "recursiv": [134, 137, 139], "weight": [134, 136, 159, 177, 179, 208, 334], "eith": [134, 136, 157, 261, 273, 329], "containing": [134, 319, 320], "element": [134, 135, 332], "minimumeigenoptimizerresult": [134, 135], "invoking": [134, 135], "iteratively": [134, 135], "second": [134, 135], "step": [134, 135, 319, 320], "min_num_vars_optimiz": [134, 135, 137, 331], "min_num_vars": [137, 331], "intermediateresult": 137, "last_iteration": 137, "met": [137, 157], "top": [137, 283, 289, 329, 340], "called": 137, "internal_optimiz": 137, "bravy": [137, 331], "et": [137, 157, 231, 335, 336], "al": [137, 157, 231, 335, 336], "2019": [137, 231, 331, 332], "obstacl": [137, 331], "preparation": [137, 331], "symmetry": [137, 331], "protection": [137, 331], "1910": [137, 331], "08980": [137, 331], "until": 137, "apply": [137, 339, 340], "schem": 137, "once": 137, "reached": 137, "every": [137, 227, 231, 240, 308], "after": [137, 339], "remaining": 137, "num_min_vars": 137, "fx": 140, "imod": 140, "smod": 140, "slsqp": [140, 145], "optimized": [140, 141, 340], "exit": [140, 142, 144], "documentation": 140, "fmin_slsqp": [140, 145], "actually": 141, "iter": [145, 332, 333, 340], "acc": 145, "06": [145, 340], "iprint": 145, "full_output": 145, "13": [145, 329, 331, 333, 334, 335, 337, 338, 340], "continuous_v": [145, 329, 333], "maximiz": [145, 329, 330, 334, 336, 337, 338, 339], "requested": 145, "verbosity": 145, "silent": 145, "summary": 145, "upon": 145, "iterat": 145, "func": 145, "epsilon": [153, 157, 338], "factory": [153, 157], "produc": 153, "overridden": 153, "modify": 153, "behavior": 153, "mix": [153, 156, 157, 289, 300, 338], "warm": [153, 154, 155, 157, 158, 289, 300], "regularization": [153, 157], "xi": [153, 157], "5": [153, 157, 224, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "corresponds": [153, 157], "initial_variabl": [154, 156], "circuit": [154, 156, 289, 300, 302, 316, 331, 334, 335, 336, 338, 340], "quantumcircuit": [154, 156, 289, 291, 292, 293, 300, 302, 303, 316, 338, 340], "represents": 154, "constructed": 155, "evolved": 156, "ry": [156, 334, 338], "thet": [156, 334, 335, 338], "rz": [156, 338, 340], "2bet": 156, "pre_solv": [157, 338], "relax_for_pre_solv": [157, 338], "25": [157, 331, 335, 336, 339], "num_initial_solutions": 157, "warm_start_factory": 157, "aggregator": 157, "version": [157, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "must": [157, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "implement": [157, 332, 333, 334, 340], "own": [157, 311], "inheriting": 157, "daniel": 157, "egger": [157, 338, 340], "starting": [157, 289, 300, 338], "2009": [157, 289, 300, 338], "10095": [157, 289, 300, 338], "For": [157, 266, 301, 306, 317], "correct": [157, 335], "initialization": 157, "circuit_factory": 157, "explicit": 157, "warmstartqaoacircuitfactory": 157, "ignored": [157, 315, 318], "passing": 157, "computations": 157, "warmstartqaoafactory": 157, "several": 157, "next": 158, "presolv": 158, "weights": [159, 160, 177, 335, 337], "max_weight": [159, 177, 337], "max_number_of_bins": 159, "optimizationapplication": [159, 167, 170, 177, 186, 193, 199], "application": [159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217], "bin": [159, 160, 161, 162, 334], "packing": [159, 160, 162, 199, 201], "wikiped": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "wik": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "bin_packing_probl": 159, "items": [159, 161, 177, 178, 336, 340], "capacity": [159, 177], "bins": [159, 160], "plot": [160, 333, 334, 335, 336, 340], "calculated": [160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 227, 231, 240], "sum": [160, 187, 335, 336, 338], "respectively": 160, "fig": [160, 340], "item": [161, 178, 337], "lists": [161, 183, 329], "items_in_bins": 161, "graphoptimizationapplication": [163, 174, 181, 202, 205, 211, 217, 337], "networkx": [163, 170, 173, 174, 181, 202, 205, 211, 217, 334, 337], "theory": [163, 202], "clique_": 163, "graph_theory": [163, 202], "suitabl": [163, 170, 174, 181, 202, 205, 211, 217], "build": [163, 170, 174, 181, 202, 205, 211, 217], "maximal": [163, 165, 166, 179], "instead": [163, 166, 333], "nod": [164, 171, 173, 175, 183, 203, 206, 207, 211, 212, 213, 218, 334, 335, 339], "subsets": [167, 168, 187, 199, 200], "exact": [167, 169, 331, 333, 334], "exact_cov": 167, "pos": [171, 334, 337], "without": 171, "colors": [171, 334], "positions": [171, 266], "num_nod": 173, "num_edg": 173, "edges": 173, "partition": [174, 176, 186], "graph_partition": 174, "divided": 175, "two": [175, 183, 340], "groups": 175, "knapsack_probl": 177, "maximum_cut": 181, "gset": [182, 184], "read": [184, 208], "2d": 184, "number_set": 186, "partition_probl": 186, "integers": [186, 339], "half": 187, "partitioning": 188, "calculation": 190, "answer": 190, "understand": 190, "state_vector": 191, "most": 191, "likely": 191, "ints": 191, "num_sit": 193, "rng_or_seed": 193, "sherrington": 193, "kirkpatrick": 193, "sk": [193, 194, 198], "over": [193, 336], "spins": [193, 196], "h": [193, 334, 335, 340], "sqrt": [193, 338], "w_": [193, 334, 335], "x_ix_j": 193, "x_i": [193, 231, 232, 329, 330, 334, 338], "pm": [193, 334], "configuration": [193, 196, 340], "disord": 193, "chosen": [193, 289, 340], "independently": 193, "notic": [193, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "variants": 193, "disorders": 193, "normal": [193, 334, 335], "distribution": [193, 289, 340], "mean": [193, 289, 300, 302, 316, 331], "varianc": 193, "dmitry": 193, "panchenk": 193, "overview": 193, "abs": [193, 289, 300, 335, 336], "1211": 193, "1094": 193, "sit": [193, 197], "pseud": 193, "default_rng": 193, "rtype": [195, 197], "set_packing": 199, "stabl": [202, 204], "independent": [202, 332], "independent_set_": 202, "traveling": [205, 206, 209, 335], "salesman": [205, 206, 209, 335], "travelling": [205, 335], "travelling_salesman_probl": 205, "coordinat": [206, 212], "prospectiv": 207, "cycle": 207, "tsplib": 208, "edge": [208, 334], "euc_2d": 208, "dat": [208, 289, 300, 302, 316, 335], "z": [210, 231, 329, 330, 331, 334, 335, 339, 340], "citi": 210, "length": 210, "num_vehicl": [211, 212], "depot": [211, 212, 335], "vehicl": [211, 212, 213, 214, 215, 216, 335], "routing": [211, 212, 216], "vehicle_routing_probl": 211, "depart": [211, 212, 213], "rout": 214, "vertex": [217, 219, 337], "vertex_cov": [217, 337], "aut": [220, 340], "introducing": 220, "slack": [220, 223, 231], "conv": [220, 224, 240, 337], "problem2": [220, 224, 240], "choos": [220, 340], "supported": [221, 225, 289, 300, 302, 315, 316, 318, 326, 327], "unsupported": [221, 232, 323, 324], "encoding": [224, 329, 339], "bounded": 224, "proposed": 224, "integer_v": [224, 329, 330, 339], "sah": 224, "karim": 224, "pooy": 224, "ronagh": 224, "2017": [224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "practical": 224, "annealers": 224, "1706": [224, 330], "01945": [224, 330], "back": [226, 229, 233], "automatically": [227, 231, 240, 323, 336], "differs": [229, 233], "requir": 231, "begin": [231, 232, 329, 332, 338], "leq": [231, 232, 329, 330, 333, 335], "rightarrow": [231, 232, 332, 334], "p": [231, 232, 289, 300, 333, 334, 336, 340], "geq": [231, 232, 329, 330], "x_j": [231, 232, 334], "supplied": 231, "patterns": [231, 232], "they": [231, 315, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "kept": 231, "fred": 231, "glov": 231, "tutorial": [231, 329, 330, 331, 333, 334, 340], "formulating": 231, "1811": 231, "11538": 231, "_flipproblemsens": [235, 236], "maximization": [235, 236], "unchanged": [235, 236], "anoth": [238, 239], "keep": [238, 290], "quadratic_progr": [246, 251, 254, 262, 266, 274, 281, 283, 326, 327, 329], "quadraticprogramelement": [246, 254, 266, 274, 283], "parent": [246, 251, 254, 262, 266, 274, 281, 282, 283], "evaluated": [252, 258, 259, 263, 270, 271, 276, 277, 289, 300, 301, 302, 306, 315, 316, 317, 318, 336, 340], "linearexpression": [253, 264, 278], "expression": [253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 273], "spars": [254, 266, 289, 329, 340], "dok_matrix": [254, 257, 266, 269], "addressed": [255, 267], "expressionbounds": [256, 268], "evaluat": [259, 271, 277, 334, 335, 336], "gradient": [259, 271, 277], "use_nam": [261, 273, 329], "determin": [261, 272, 273, 330, 331, 332, 333, 335, 336, 340], "quadraticexpression": [265, 279], "compressed": 266, "way": [266, 335], "symmetric": [266, 272, 273, 329], "summed": 266, "up": 266, "triangl": 266, "q": [270, 329, 332, 333, 335, 336, 340], "objsens": [274, 280], "shap": [276, 277], "hav": [281, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "exposed": 283, "meant": 283, "externally": 283, "reps": [289, 300, 334, 336, 337, 340], "initial_stat": [289, 300, 338], "initial_point": [289, 300, 302, 316, 331, 338, 340], "alpha": [289, 334, 336, 340], "shots": [289, 290, 300, 302, 308, 316, 336, 337, 339, 340], "1024": [289, 300, 302, 316, 340], "measurement_error_mitigation": [289, 300, 302, 316, 340], "callback": [289, 300, 302, 316, 336], "store_intermediat": [289, 300, 302, 316], "use_swap_strategi": [289, 340], "use_initial_mapping": [289, 340], "use_pulse_efficient": [289, 340], "optimization_level": [289, 340], "vqeclient": [289, 316, 320], "runtim": [289, 300, 301, 302, 306, 311, 316, 317, 321], "client": [289, 302, 316, 335], "spsa": [289, 300, 302, 316, 334, 335, 340], "qn": [289, 300, 302, 316], "1411": [289, 300, 334, 335], "4028": [289, 300, 334, 335], "prepend": [289, 300], "evolv": [289, 300], "custom": [289, 300], "support": [289, 300], "optimizations": [289, 300], "subspac": [289, 300], "1709": [289, 300], "03489": [289, 300], "http": [289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "vqe": [289, 301, 302, 306, 317, 321, 330, 331, 332, 333, 334, 335], "fraction": [289, 290, 340], "measurement": [289, 300, 302, 308, 316, 340], "expectation": [289, 301, 306, 315, 317, 318, 336, 340], "cvar": [289, 340], "contained": 289, "interval": [289, 329, 338], "mitigation": [289, 300, 302, 308, 316, 340], "access": [289, 300, 302, 316], "four": [289, 300, 302, 316], "evaluation": [289, 300, 302, 316, 340], "works": [289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "towards": [289, 300, 302, 316], "count": [289, 300, 301, 302, 306, 316, 317, 335], "ansatz": [289, 300, 302, 316, 336, 340], "deviation": [289, 300, 302, 316], "steps": [289, 300, 302, 316], "swap": [289, 294, 299, 340], "strategi": [289, 294, 299, 340], "transpiling": [289, 340], "transpil": [289, 298], "permut": [289, 340], "cost": [289, 334, 335, 338, 340], "bett": [289, 297, 340], "fit": [289, 297, 340], "coupling": [289, 340], "map": [289, 330, 334, 340], "strategy": [289, 340], "needed": [289, 340], "puls": [289, 298], "transpilation": [289, 299, 340], "2105": 289, "01063": 289, "best": [290, 334, 339], "aux_operators": [295, 301, 306, 311, 315, 317, 318], "inputs": [295, 311, 340], "permutation": 297, "cr": [298, 340], "gat": [298, 334, 340], "qaoaclient": [300, 302, 340], "deprecated": [300, 316, 319], "renamed": [300, 316, 319], "calls": [301, 306, 317], "observabl": [301, 306, 317], "auxiliary": [301, 306, 315, 317, 318], "operators": [301, 306, 315, 317, 318, 340], "eigenvalu": [301, 306, 317, 334, 340], "main": [301, 306, 315, 317, 318, 340], "chemistry": [301, 306, 317], "dipol": [301, 306, 317], "particl": [301, 306, 317], "so": [301, 306, 317, 335], "yet": [301, 306, 317], "runtimeerror": [301, 306, 317], "job": [301, 306, 317, 321, 340], "execution": [301, 306, 317], "failed": [301, 306, 317], "call": 302, "equivalent": [302, 330, 331, 332, 334], "natur": [302, 334, 335, 340], "but": [302, 333], "serv": [302, 335], "parameterized": [302, 316], "wav": [302, 316], "featur": [302, 316, 323], "readout": 308, "don": [308, 340], "fitt": [308, 340], "re": [308, 340], "calibrations": 308, "30": [308, 330, 334], "minut": 308, "id": [310, 321, 340], "overrid": 311, "add": [311, 329, 335], "classmethod": [315, 318], "computing": [315, 318, 334], "aux_operator": [315, 318], "expectations": [315, 318], "renaming": 316, "reflects": 316, "executed": 316, "vqeruntimeresult": 319, "vqeprogr": 319, "vqeresult": [319, 320], "additionally": [319, 320], "associated": 321, "indicator_big_m": 323, "translat": [323, 324, 336], "mp": [323, 326, 329, 332, 333, 336, 338, 339], "indicator": 323, "logical": 323, "expressions": 323, "logical_not": 323, "logical_and": 323, "logical_or": 323, "big": [323, 335, 339], "m": [323, 329, 330, 332, 334, 335, 336, 338, 339], "formulation": [323, 335], "derived": 323, "basic": [324, 330, 335], "functions": [324, 336], "treat": 325, "ys": 325, "imaginary": 325, "nev": [326, 327], "happen": [326, 327], "quad_prog": 328, "comprising": 328, "Esta": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "p\u00e1gin": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ger": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "01_quadratic_progr": 329, "ipynb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "introduz": [329, 330, 331, 333, 336], "brevement": 329, "problem": [329, 330, 331, 333, 335, 336, 338, 339, 340], "m\u00f3dul": [329, 330, 334, 335, 338, 340], "Mais": [329, 334, 340], "lid": [329, 330, 334, 338, 340], "restrit": [329, 330, 333, 338], "quadrat": [329, 335], "dad": [329, 331, 334, 335, 336, 337, 340], "seguint": [329, 330, 333, 334, 335, 337, 338, 339, 340], "align": [329, 338], "quad": [329, 333, 335], "q_0": 329, "subject": [329, 330, 331, 332, 333, 334, 337, 338, 339, 340], "q_i": [329, 335], "a_i": [329, 330], "r_i": 329, "dots": [329, 335], "l_i": 329, "u_i": [329, 335], "matriz": [329, 331, 333, 338], "vetor": [329, 333, 335, 338], "dimension": 329, "dimensional": 329, "bin\u00e1r": [329, 330, 331, 332, 333, 335, 338, 339], "inteir": [329, 330, 331, 332, 335, 337, 338, 340], "cont\u00ednu": [329, 333, 335, 338], "al\u00e9m": [329, 334, 335], "Como": [329, 330, 332, 333], "configur": [329, 336, 338, 339, 340], "necess\u00e1ri": [329, 333, 334, 335, 337], "translators": [329, 332, 333, 336, 338, 339], "from_docplex_mp": [329, 332, 333, 336, 338, 339], "you": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "explained": 329, "section": [329, 337, 339], "constructing": 329, "convers\u00e3": [329, 330, 331], "facil": [329, 337], "encontr": [329, 331, 333, 334, 335, 337, 340], "document": 329, "ibmdecisionoptimization": 329, "io": 329, "invoc": [329, 333], "fun\u00e7\u00e3": [329, 330, 331, 332, 333, 334, 335, 336], "from_docplex": 329, "mdl": [329, 333, 336, 338], "lb": [329, 335, 339], "ub": [329, 335, 339], "add_constraint": [329, 333, 336, 338, 339], "export_as_lp_string": [329, 339], "iso": [329, 339], "8859": [329, 339], "obj": [329, 335, 336, 339], "c1": [329, 334, 337], "qc1": 329, "lt": [329, 330, 331, 333, 337, 338, 339], "binari": [329, 339], "generals": [329, 339], "prettyprint": [329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "comprehensiv": 329, "load": [329, 333, 335], "39": [329, 330, 331, 333, 334, 337, 338, 339, 340], "gt": [329, 330, 331, 333, 337, 339], "explic": [329, 330, 335], "ent\u00e3": [329, 330, 331, 332, 334, 335, 338, 340], "utiliz": [329, 330, 331, 332, 334, 335, 336, 337, 338], "vam": [329, 330, 334, 335, 339], "comec": [329, 334], "vazi": 329, "my": 329, "admit": 329, "tr\u00eas": [329, 330, 332], "vari\u00e1vel": [329, 330, 331, 333, 334, 335, 338, 339], "quand": [329, 331, 332, 338, 339], "especific": [329, 334, 337], "nom": [329, 334], "limit": [329, 330, 331, 332, 334, 335, 339], "inferior": [329, 330], "superior": [329, 330, 334], "objet": [329, 330, 331, 332, 333, 334, 335, 336, 339, 340], "assim": [329, 331, 336], "dicion\u00e1ri": [329, 340], "observ": [329, 330, 332, 334, 335, 337, 338, 339], "escalon": [329, 340], "fator": [329, 330], "imprim": [329, 330], "primeir": [329, 330, 331, 333, 334, 335, 337, 338, 339, 340], "multiplic": [329, 333, 338], "divid": [329, 333], "pec": 329, "qx": 329, "c\u00e9lul": 329, "abaix": [329, 331, 332, 335, 338, 340], "mostr": [329, 331, 332, 333, 334, 335, 336, 338, 340], "declar": 329, "chav": [329, 335, 340], "valor": [329, 330, 331, 333, 334, 335, 336, 337, 338, 340], "correspondent": [329, 330, 331, 332, 333, 334, 336, 337, 340], "coeficient": [329, 330, 334], "duas": [329, 330, 334, 335, 340], "est\u00e3": [329, 334, 335, 337, 338], "6": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dictionari": [329, 336], "outr": [329, 330, 331, 333, 334], "formul": [329, 330, 334, 339], "matem\u00e1t": [329, 334], "orden": [329, 334], "ordem": [329, 334, 340], "7": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "arrays": 329, "olhand": 329, "respect": [329, 330, 331, 332, 333, 339], "quant": 329, "obter": [329, 330, 331, 334, 335, 338, 339, 340], "dens": 329, "to_array": 329, "espars": 329, "to_dict": 329, "poss\u00edvel": [329, 331, 332, 334, 335], "\u00edndic": [329, 334, 335], "armazen": 329, "compact": 329, "exempl": [329, 330, 331, 332, 334, 335, 337, 338, 339, 340], "sim\u00e9tr": [329, 333], "cuj": [329, 334, 337], "8": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "express\u00e3": 329, "sent": [329, 334, 335, 340], "direit": [329, 330], "linear_constraint": [329, 330, 339], "lin_eq": 329, "lin_leq": 329, "lin_geq": 329, "bem": [329, 331, 334, 340], "quadratic_constraint": 329, "quad_eq": 329, "quad_leq": 329, "quad_geq": 329, "11": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "get_linear_constraint": 329, "get_quadratic_constraint": 329, "remove_linear_constraint": 329, "remove_quadratic_constraint": 329, "12": [329, 331, 333, 334, 335, 336, 337, 338, 340], "substitute_variabl": 329, "dois": [329, 331, 333, 334, 335, 337, 339, 340], "leftarrow": 329, "invi\u00e1vel": 329, "N\u00f3s": [329, 334, 338], "tent": [329, 331, 334], "v\u00e1r": [329, 335], "erro": 329, "ness": 329, "15": [329, 331, 334, 335, 337, 338, 340], "except": [329, 335], "itself": 329, "your": 329, "included": 329, "ones": [329, 335], "charact": 329, "specification": 329, "16": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "f": [329, 331, 335, 337, 338, 340], "_e": 329, "17": [329, 331, 334, 338, 340], "tools": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "jupyt": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit_version_tabl": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit_copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "softwareversionqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "terra0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "21": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dev0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dbd3961qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "aer0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ibmq": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "provider0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "19": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "1qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "optimization0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0system": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationpython": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "version3": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "compilergcc": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "buildmain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "2022": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "09": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "04": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "19oslinuxcpus4memory": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "577545166015625wed": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "18": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "03": [329, 330, 331, 332, 339], "27": 329, "jst": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "cod": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "licensed": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "under": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apach": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "licens": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "mayobtain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "root": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tre": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "modifications": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "derivativ": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "retain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "thiscopyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "carry": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "indicatingthat": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "altered": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "originals": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "02_converters_for_quadratic_programs": 330, "gen\u00e9r": 330, "poder": 330, "geral": [330, 331, 332, 333, 334, 335], "noss": [330, 332, 334, 335, 338], "cert": [330, 333, 335], "Por": [330, 332, 333, 334, 335, 338, 340], "fornec": [330, 331, 334, 335, 336, 337, 340], "divers": [330, 337, 338], "irrestrit": [330, 331, 338], "Eles": 330, "usa": [330, 331, 332, 334, 335], "opflow": [330, 336, 340], "estad": [330, 331, 332, 334, 338], "aproxim": [330, 332, 335, 338], "conhec": [330, 332, 334, 335, 340], "comument": 330, "rotin": [330, 334], "subjacent": [330, 338], "sobr": [330, 331, 332, 333, 334, 340], "m\u00ednim": [330, 334, 335, 337], "funcion": [330, 332, 333, 334], "diferent": [330, 331, 333, 334, 335, 338, 340], "entrad": [330, 331, 332, 340], "corret": [330, 335], "oferec": 330, "variedad": 330, "estam": 330, "vis\u00e3": 330, "funcional": [330, 334, 337, 338, 340], "cont\u00e9m": [330, 331, 332, 333, 340], "restri\u00e7\u00f5": [330, 331, 333, 334, 335, 338], "desigualdad": [330, 333], "igualdad": [330, 331, 333, 335], "vari": [330, 331, 332, 333, 334, 335, 338, 339, 340], "folg": 330, "maximizetominimiz": 330, "minimizetomaximiz": 330, "auxili": 330, "inclu": [330, 334, 335], "linearinequalitytopenalty": 330, "convenient": [330, 334], "inequalitytoequalityconvert": 330, "Os": [330, 331, 333, 334, 335, 337, 340], "ser\u00e3": [330, 335], "calcul": [330, 335, 338], "diferenc": 330, "lad": [330, 332], "esquerd": 330, "sin": 330, "s\u00edmbol": 330, "As": [330, 333, 337, 338], "Com": [330, 334], "escrit": [330, 335], "qp": [330, 331, 332, 333, 334, 336, 337, 338, 339], "xyz_leq": 330, "xyz_geq": 330, "ineq2eq": 330, "qp_eq": 330, "int_slack": [330, 337], "depo": [330, 331, 332, 334, 335], "parec": [330, 338], "sa\u00edd": [330, 334], "acim": [330, 332, 333, 335, 338, 340], "ver": [330, 335], "substitu\u00edd": [330, 331], "xyz": 330, "_leg": 330, "_slack": 330, "_geq": 330, "restri\u00e7\u00e3": [330, 333, 335, 338, 339], "portant": [330, 331, 335, 338, 340], "capaz": [330, 335], "satisfaz": 330, "retir": 330, "ap\u00f3s": [330, 334], "pont": [330, 334, 335, 337], "decimal": 330, "cont": [330, 331, 340], "apen": [330, 331, 332, 334, 335, 339, 340], "segund": [330, 335], "abordag": [330, 331, 335], "contud": 330, "log": 330, "men": [330, 332, 337], "antes": [330, 335], "codific": [330, 332], "propost": [330, 333, 334], "usad": [330, 332, 333, 338, 340], "favor": 330, "artig": [330, 335], "enquant": [330, 332, 334, 335, 336, 338], "_leq": 330, "referent": [330, 334], "int2bin": 330, "qp_eq_bin": 330, "pel": [330, 331, 334, 335, 336, 337], "ambas": [330, 338], "essencial": 330, "signific": [330, 332], "dess": [330, 338], "subconjunt": [330, 334, 337], "aceit": 330, "ldots": [330, 333, 335], "respeit": [330, 334], "origin": 330, "traduz": [330, 331, 339], "bin\u00e1ri": [330, 333, 335, 338], "volt": [330, 331, 335], "penal": [330, 331, 334, 335, 338], "aquel": 330, "n\u00famer": [330, 332, 334, 335, 337, 339, 340], "grand": [330, 334, 335], "1e5": 330, "sinal": 330, "lineq2penalty": 330, "22": [330, 331, 334, 338, 339], "44": [330, 338], "66": 330, "88": 330, "176": 330, "132": [330, 335], "99": 330, "352": 330, "264": 330, "178": 330, "198": 330, "110": 330, "220": 330, "177": 330, "354": 330, "708": 330, "374": 330, "agor": [330, 333, 338, 340], "compat": 330, "muit": [330, 331, 334, 335, 338], "qu\u00e2ntic": [330, 331, 332, 337], "d\u00e1": 330, "03_minimum_eigen_optimiz": 331, "interess": 331, "abord": 331, "quadr\u00e1t": [331, 333, 338, 340], "solu\u00e7\u00e3": [331, 332, 334, 337, 338, 339], "qu\u00edmic": 331, "f\u00edsic": [331, 334], "consid": [331, 335], "spin": 331, "tom": [331, 334], "substitu": 331, "mapeament": 331, "embas": 331, "proporcion": 331, "autom\u00e1t": 331, "adequ": [331, 333, 335, 336], "aproveit": [331, 333, 338], "cl\u00e1ssic": [331, 334, 340], "exat": [331, 333, 335, 337], "tradu\u00e7\u00e3": 331, "ilustr": [331, 338], "automat": [331, 339], "ir\u00e1": [331, 340], "mencion": 331, "lanc": 331, "profund": [331, 334, 335, 340], "potencial": [331, 334], "aument": [331, 335], "tamanh": [331, 332, 337], "proibit": 331, "disposit": [331, 333, 334, 340], "curt": [331, 334], "praz": 331, "altern": [331, 333, 335], "generaliz": 331, "conceit": 331, "dest": [331, 334, 335, 340], "luc": [331, 334], "formulations": [331, 335], "front": 331, "phys": [331, 334, 340], "2014": [331, 334, 335], "kliesch": 331, "koenig": 331, "tang": 331, "basica": [331, 332, 333, 335, 338], "utils": [331, 334, 335, 336, 337, 338, 339], "algorithm_globals": [331, 334, 335, 336, 337, 338], "plot_histogr": [331, 334], "typing": [331, 333], "desloc": [331, 332], "lev": [331, 334, 335, 340], "to_ising": [331, 334, 336, 337], "iiz": 331, "izi": 331, "75": [331, 334, 340], "zii": 331, "izz": [331, 340], "ziz": [331, 340], "zzi": [331, 334, 340], "\u00c0s": 331, "diret": [331, 334, 339, 340], "tais": [331, 333, 335, 338], "conversor": [331, 337, 338], "from_ising": 331, "Este": [331, 332, 336, 338, 340], "inicializ": 331, "quer": [331, 340], "random_seed": [331, 334, 335, 336, 337, 338], "10598": [331, 334, 335], "get_backend": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "statevector_simulator": [331, 332, 333, 338], "seed_simulator": [331, 334, 335, 337, 338], "seed_transpil": [331, 334, 335, 337, 338], "qaoa_m": [331, 338, 340], "exact_m": [331, 338], "ideal": [331, 334, 335], "pequen": [331, 335, 338], "exact_result": [331, 332], "success": [331, 332, 333, 334, 336, 337, 338, 339, 340], "qaoa_result": [331, 338], "prov": 331, "\u00fate": 331, "cad": [331, 332, 333, 334, 335, 337, 340], "fra\u00e7\u00e3": [331, 340], "amostr": [331, 334, 335, 338], "consolid": 331, "atribut": [331, 333], "agreg": 331, "12499999999999994": 331, "filtr": 331, "acord": 331, "probabil": [331, 332, 334, 338], "get_filtered_sampl": 331, "allowed_status": 331, "res": [331, 338, 340], "append": [331, 335, 338, 340], "filtered_sampl": 331, "005": 331, "desej": [331, 337, 340], "melhor": [331, 332, 334, 335, 340], "perspect": 331, "estat\u00edst": [331, 333, 334], "\u00fatil": [331, 335], "tant": [331, 333], "rela\u00e7\u00e3": 331, "m\u00e9d": [331, 336], "desvi": 331, "fundament": 331, "b\u00e1sic": 331, "compreens\u00e3": 331, "fvals": 331, "probabiliti": [331, 336], "std": 331, "9364916731037085": 331, "apes": 331, "num\u00e9r": 331, "visualiz": [331, 332, 333, 335], "inicial": [331, 334, 338], "samples_for_plot": 331, "join": [331, 335, 338], "v": [331, 333, 334, 335], "enumerat": [331, 338, 340], "receb": [331, 332, 334, 337], "esquem": 331, "reduz": [331, 334], "intermedi\u00e1ri": 331, "estej": [331, 333, 335, 337], "solucion": [331, 333, 338], "vist": [331, 334], "anterior": [331, 332, 335], "constru\u00edm": [331, 333, 338, 340], "consider": [331, 332, 334, 335, 336], "rqao": 331, "rqaoa_result": 331, "33": [331, 335, 337], "04_grover_optimiz": 332, "combinat\u00f3r": [332, 334], "variacion": [332, 333, 335], "aproximaximat": 332, "\u00f3tim": [332, 334, 335, 337, 338, 339], "execu": [332, 335, 340], "or\u00e1cul": 332, "reconhec": 332, "m\u00e1xim": [332, 337], "diminu": 332, "espac": [332, 334], "notebook": [332, 336], "component": [332, 334, 335, 337], "t\u00e9cnic": 332, "descrit": [332, 334, 340], "conform": 332, "gill": 332, "woern": [332, 338, 340], "gonciul": 332, "polynomial": 332, "1912": 332, "04088": 332, "ingredient": 332, "Um": [332, 334], "oper": [332, 333, 334, 335, 338, 340], "prepar": [332, 335, 336], "constru": 332, "superposi\u00e7\u00e3": 332, "inter": [332, 334, 340], "amplitud": 332, "difus\u00e3": 332, "d": [332, 334, 335, 337, 338, 340], "rangle_n": [332, 338], "aind": [332, 334, 336, 338], "seg": 332, "livrement": 332, "quadraticprogramtonegativevalueoracl": 332, "a_y": 332, "tal": [332, 334], "prep": 332, "regist": 332, "igual": 332, "rangle_m": 332, "negat": [332, 334, 340], "sinaliz": 332, "o_y": 332, "discut": [332, 335, 340], "efet": 332, "clarez": 332, "formal": [332, 334], "constr\u00f3": [332, 335], "math": [332, 335], "xrangl": 332, "cim": 332, "baix": 332, "m\u00edn": 332, "m\u00e1x": 332, "permanec": 332, "concret": 332, "pr\u00f3xim": [332, 334, 335], "se\u00e7\u00e3": 332, "eqnarray": 332, "min_": [332, 333, 335, 338], "2x_0x_2": 332, "x_1x_2": 332, "1x_0": 332, "2x_1": 332, "3x_2": 332, "usam": [332, 333, 335, 338], "docplex_model1": [332, 338], "termin": 332, "houv": [332, 340], "progress": [332, 336], "mud": 332, "grover_optimiz": 332, "x_0": [332, 334, 336, 337], "x_1": [332, 334, 336, 337], "x_2": [332, 334, 336, 337], "maior": [332, 334, 335, 338], "randomiz": 332, "posterior": [332, 335], "customiz": [332, 333], "\u00fanic": [332, 334, 335, 338, 340], "atu": 332, "contador": 332, "t\u00edtul": 332, "eix": 332, "exib": [332, 339], "101": 332, "poss\u00edv": [332, 334, 335], "solu\u00e7\u00f5": [332, 334, 335, 338, 339], "intens": 332, "cor": 332, "med": [332, 340], "brilh": 332, "alta": 332, "pr\u00f3pr": 332, "fas": [332, 333, 334, 335], "rod": [332, 333], "quantidad": [332, 334], "distribui\u00e7\u00e3": [332, 334, 335, 338], "verific": [332, 335], "exact_solv": 332, "53": 332, "05_admm_optimiz": 333, "resolv": [333, 335, 337, 338, 339], "mist": [333, 335], "daqu": 333, "diant": 333, "mbco": 333, "aparec": [333, 334], "pesquis": 333, "log\u00edst": [333, 335], "financeir": 333, "particul": [333, 335, 340], "mathcal": 333, "u": [333, 339], "subseteq": 333, "mathbb": [333, 335], "varph": 333, "sujeit": [333, 335], "mathrm": [333, 334, 335], "ell": 333, "premiss": 333, "ex": 333, "intercal": 333, "quadr": 333, "conjunt": [333, 334, 335, 336, 337], "x_": [333, 334, 335, 336], "forall": [333, 334, 335], "imp\u00f5": [333, 335], "mbo": 333, "heur\u00edst": [333, 334, 335, 340], "dire\u00e7\u00e3": 333, "hist\u00f3r": 333, "sab": [333, 340], "propriedad": 333, "convergent": 333, "desd": 333, "pressupost": 333, "v\u00e1l": 333, "denomin": [333, 338], "proced": 333, "divis\u00e3": 333, "conceb": 333, "decomposi\u00e7\u00e3": [333, 340], "mbos": 333, "subproblem": 333, "mei": [333, 335], "k": [333, 335], "finaliz": 333, "devid": 333, "dua": 333, "cust": [333, 335, 340], "discuss\u00e3": 333, "abrangent": 333, "condi\u00e7\u00f5": 333, "viabil": 333, "variant": 333, "bloc": [333, 340], "lug": 333, "carreg": [333, 335, 339, 340], "pyplot": [333, 334, 335, 336, 340], "plt": [333, 334, 335, 336, 340], "cobylaoptimiz": 333, "admm_optimiz": 333, "admmoptimiz": 333, "uncomment": 333, "full": [333, 334], "planej": 333, "durant": [333, 335], "escolh": [333, 334, 335, 338, 340], "estiv": [333, 340], "instal": [333, 335, 337, 339], "continu": [333, 334, 335], "resolvedor": 333, "dispon": [333, 339], "handl": 333, "benchmark": 333, "relat": 333, "ex6": 333, "cons1": 333, "cons2": 333, "cons3": 333, "qualqu": [333, 337], "demonstr": [333, 334, 335, 340], "tard": 333, "envolv": 333, "argument": [333, 340], "1001": 333, "penaliz": 333, "gx": 333, "900": 333, "toler": 333, "primit": 333, "ajust": [333, 340], "garant": [333, 334, 335, 338], "converg": [333, 334], "theor": 333, "porqu": 333, "sempr": [333, 334, 337], "ativ": [333, 335, 340], "pratic": 333, "vi\u00e1vel": 333, "admm_params": 333, "0e": 333, "inst\u00e2nc": [333, 334, 335, 336, 337, 338, 340], "Isto": [333, 334, 335], "separ": 333, "construtor": 333, "convex_optimiz": 333, "impress": 333, "decis\u00e3": [333, 334, 335, 340], "camp": 333, "res\u00eddu": 333, "xlabel": [333, 336], "ylabel": [333, 336], "show": [333, 335, 336], "simul": [333, 335], "selecion": [333, 335, 337], "preench": 333, "admm_q": 333, "result_q": 333, "apresent": [333, 335, 337], "obtid": [333, 335, 339, 340], "clf": 333, "51": 333, "06_examples_max_cut_and_tsp": 334, "dom\u00edni": 334, "quantit": 334, "financ": 334, "engenh": 334, "cern": 334, "complex": 334, "decis\u00f5": 334, "defini\u00e7\u00e3": 334, "estrat\u00e9g": [334, 340], "procur": [334, 335], "finit": 334, "contavel": 334, "infinit": 334, "crit\u00e9ri": 334, "t\u00edpic": 334, "dist\u00e2nc": [334, 335, 337], "compriment": [334, 340], "transversal": 334, "pes": [334, 335, 337, 340], "temp": [334, 335], "material": 334, "consum": 334, "energ": [334, 340], "lucr": 334, "rend": 334, "util": 334, "pr\u00e1tic": 334, "manual": 334, "clusteriz": 334, "ci\u00eanc": 334, "red": 334, "compreend": 334, "sistem": 334, "pesso": 334, "interag": 334, "influenc": 334, "umas": 334, "indiv\u00eddu": 334, "v\u00e9rtic": 334, "graf": [334, 335, 337], "conex\u00f5": 334, "arest": [334, 335, 337, 340], "ment": [334, 335], "f\u00e1cil": [334, 338], "marketing": 334, "suponh": 334, "princ\u00edpi": 334, "compr": 334, "uns": 334, "grau": 334, "influ\u00eanc": 334, "rec\u00edproc": 334, "atribu\u00edd": 334, "prev": 334, "comercializ": 334, "produt": 334, "gratuit": [334, 339], "alguns": 334, "pergunt": 334, "gr\u00e1t": 334, "fim": 334, "receit": 334, "dirig": 334, "ij": [334, 335], "ji": [334, 335], "cort": [334, 337], "parti\u00e7\u00e3": [334, 337], "conect": [334, 335, 337, 340], "cruz": [334, 340], "atribu": 334, "n\u00f3": [334, 335, 337], "global": [334, 335], "somat\u00f3r": 334, "tild": 334, "textbf": 334, "grac": 334, "futur": 334, "extens\u00e3": 334, "conced": 334, "w_i": 334, "feit": [334, 335], "atribui\u00e7\u00e3": 334, "z_i": [334, 335], "possu": [334, 335, 338], "descobr": 334, "frac": 334, "z_j": 334, "const": 334, "palavr": 334, "equival": 334, "z_iz_j": 334, "Nos": 334, "ocorr": 334, "diz": 334, "combin": [334, 335, 337], "aceler": 334, "exponencial": 334, "compar": [334, 338, 339], "entant": [334, 335, 338, 340], "investig": [334, 335, 340], "abordagens": [334, 335], "fat": 334, "farh": [334, 335], "goldston": [334, 335], "gutman": [334, 335], "adapt": [334, 335], "context": 334, "c\u00e1lcul": [334, 335], "alvo": [334, 335], "pot\u00eanc": 334, "control": [334, 335, 338], "fac": [334, 335], "psi": [334, 335], "boldsymbol": [334, 335], "rangl": [334, 335, 338], "constru\u00edd": [334, 335], "port": [334, 335, 340], "rota\u00e7\u00f5": [334, 335, 338], "parametriz": [334, 335], "avali": [334, 335], "langl": [334, 335], "esper": [334, 335, 336, 340], "individu": [334, 335], "t\u00eam": [334, 335, 339], "estim": [334, 335], "ating": [334, 335], "suficient": [334, 335, 338], "respost": [334, 335], "acredit": 334, "dificuldad": 334, "bons": 334, "experimental": 334, "apropri": 334, "tentat": [334, 335], "enred": 334, "alinh": 334, "entrelac": [334, 335], "u_": [334, 335], "singl": [334, 335, 339, 340], "entangl": [334, 335], "cole\u00e7\u00e3": [334, 335, 337], "phas": 334, "port\u00f5": 334, "prod_": 334, "theta_": [334, 338], "motiv": 334, "verdadeir": 334, "entalh": 334, "vantag": 334, "amostrag": 334, "adiab\u00e1t": 334, "hardwar": [334, 340], "diss": 334, "z_iz_jz_k": 334, "anel": 334, "impratic": 334, "trat": 334, "frontiers": 334, "physics": 334, "gutmann": [334, 335], "weck": 334, "hastings": 334, "troy": 334, "rev": [334, 340], "94": 334, "022309": 334, "2016": 334, "neven": 334, "1703": 334, "06199": 334, "Tamb\u00e9m": [334, 335, 340], "dispon\u00edv": [334, 335, 337, 338], "consult": [334, 339], "useful": 334, "axes": 334, "nx": [334, 337], "library": [334, 335, 336, 340], "twolocal": [334, 335], "maxcut": [334, 340], "tsp": 334, "add_nodes_from": 334, "arang": 334, "elist": 334, "add_weighted_edges_from": 334, "spring_layout": [334, 337], "draw_graph": 334, "default_ax": 334, "frameon": 334, "draw_networkx": 334, "node_color": 334, "node_siz": 334, "600": 334, "ax": 334, "edge_labels": 334, "get_edge_attribut": 334, "draw_networkx_edge_labels": 334, "get_edge_dat": 334, "071509e": 334, "best_cost_brut": 334, "reversed": [334, 336], "zfill": 334, "xbest_brut": 334, "nbest": 334, "max_cut": 334, "to_quadratic_progr": [334, 337], "x_3": [334, 336, 337], "qubitop": 334, "iizz": 334, "iziz": 334, "izzi": 334, "ziiz": 334, "making": 334, "lowest": 334, "eigenvector": 334, "ee": 334, "compute_minimum_eigenvalu": 334, "sample_most_likely": 334, "energy": [334, 340], "loop": [334, 336], "feedback": 334, "etap": [334, 335], "emaranh": 334, "123": [334, 336, 337], "aer_simulator_statevector": [334, 336], "300": 334, "num_qubits": [334, 337, 340], "cz": 334, "entanglement": 334, "optimizer_tim": [334, 337], "49968614555873": 334, "9054765701293945": 334, "99968614555873": 334, "vqe_optimiz": 334, "not\u00f3ri": 334, "aten\u00e7\u00e3": 334, "cientist": 334, "s\u00e9cul": 334, "implic": 334, "suger": 334, "coloquial": 334, "fal": [334, 335], "cidad": [334, 337], "vend": 334, "mercador": 334, "caminh": 334, "vendedor": 334, "visit": [334, 335, 337], "natal": 334, "viaj": [334, 335], "Ao": [334, 335], "conseg": 334, "menor": [334, 340], "deriv": [334, 335], "onipresent": 334, "relev": 334, "surg": 334, "hamilton": 334, "in\u00edci": 334, "xix": 334, "matemat": [334, 335], "abstra\u00edd": 334, "ped": [334, 337], "cicl": 334, "atrav\u00e9s": [334, 340], "fech": [334, 340], "desconhec": 334, "polinomial": [334, 335], "prospect": 334, "posi\u00e7\u00e3": 334, "poss": [334, 335, 337], "somat\u00f3ri": 334, "v\u00e3": 334, "ambos": [334, 339], "notin": 334, "condi\u00e7\u00e3": 334, "equiv": 334, "junt": 334, "tud": 334, "obtem": [334, 335, 339, 340], "sum_p": 334, "livr": 334, "create_random_instanc": 334, "to_numpy_matrix": 334, "distanc": [334, 335], "48": [334, 338, 339], "91": 334, "63": 334, "itertools": 334, "permutations": 334, "brute_force_tsp": 334, "last_best_distanc": 334, "1e10": 334, "pre_j": 334, "best_ord": 334, "best_distanc": 334, "draw_tsp_solution": 334, "g2": 334, "digraph": 334, "add_edg": 334, "edge_color": 334, "font_color": 334, "202": 334, "x_0_0": 334, "x_1_1": 334, "x_1_2": 334, "x_2_1": 334, "x_2_2": 334, "x_0_1": 334, "x_1_0": 334, "x_2_0": 334, "x_0_2": 334, "c2": [334, 337], "c3": [334, 337], "c4": [334, 337], "c5": [334, 337], "qp2qub": 334, "7581": 334, "1282": 334, "iiiiiiiiz": [334, 337], "iiiiiiiz": [334, 337], "iiiiiizi": [334, 337], "1268": 334, "iiiiizii": [334, 337], "iiiiziii": [334, 337], "iiiziiii": [334, 337], "1290": 334, "iiziiiii": [334, 337], "iziiiiii": [334, 337], "ziiiiiii": [334, 337], "606": 334, "iiiiiiizz": [334, 337], "iiiiiiziz": [334, 337], "iiiiiizz": [334, 337], "iiiiiziiz": [334, 337], "iiiiiziz": [334, 337], "iiiiizzi": [334, 337], "iiiiziiiz": [334, 337], "iiiiziiz": [334, 337], "iiiizizi": [334, 337], "iiiizzii": [334, 337], "iiiziiiiz": [334, 337], "iiiziiiz": [334, 337], "iiiziizi": [334, 337], "iiizizii": [334, 337], "iiizziii": [334, 337], "iiziiiiiz": [334, 337], "iiziiiiz": [334, 337], "iiziiizi": [334, 337], "iiziizii": [334, 337], "iiziziii": [334, 337], "iizziiii": [334, 337], "iziiiiiiz": [334, 337], "iziiiiiz": [334, 337], "iziiiizi": [334, 337], "iziiizii": [334, 337], "iziiziii": [334, 337], "iziziiii": [334, 337], "izziiiii": [334, 337], "ziiiiiiiz": [334, 337], "ziiiiiiz": [334, 337], "ziiiiizi": [334, 337], "ziiiizii": [334, 337], "ziiiziii": [334, 337], "ziiziiii": [334, 337], "ziziiiii": [334, 337], "zziiiiii": [334, 337], "is_feasibl": 334, "tsp_valu": 334, "7379": 334, "7326": 334, "024699521837": 334, "199239253997803": 334, "warnings": 334, "filterwarnings": 334, "ignor": 334, "category": 334, "userwarning": 334, "05": [334, 335, 336, 337, 338, 339], "07_examples_vehicle_routing": 335, "\u00e1re": 335, "industrial": 335, "pois": [335, 340], "8183": 335, "bilh\u00f5": 335, "d\u00f3l": 335, "ano": 335, "2015": 335, "prestador": 335, "servic": 335, "v\u00e1ri": [335, 340], "caminh\u00f5": 335, "navi": 335, "cont\u00eain": 335, "efetu": 335, "dep\u00f3sit": [335, 337], "noit": 335, "loc": [335, 336], "dia": 335, "computacional": 335, "desafi": 335, "rot": [335, 337], "quil\u00f4metr": 335, "gast": 335, "formaliz": 335, "idealiz": 335, "flux": [335, 340], "trabalh": [335, 338, 340], "estabelec": 335, "estar": 335, "entreg": 335, "banc": 335, "aleatori": 335, "viag": 335, "simil": 335, "euclidian": 335, "linh": 335, "ret": [335, 340], "talvez": 335, "rea": 335, "verdad": 335, "h\u00edbr": 335, "parcial": 335, "simplist": 335, "prossegu": 335, "pr\u00e9": 335, "vrp": 335, "combinat\u00f3ri": 335, "H\u00e1": 335, "s\u00e9ri": 335, "caixeir": [335, 337], "viajant": [335, 337], "applegat": 335, "2006": 335, "mtz": 335, "mill": 335, "tuck": 335, "zemlin": 335, "1960": 335, "segment": 335, "conven\u00e7\u00e3": 335, "distint": 335, "liga\u00e7\u00e3": 335, "escrev": 335, "sim": 335, "delt": 335, "soment": 335, "dist": 335, "Estas": 335, "necess\u00e1r": 335, "elimin": 335, "subtours": 335, "0i": 335, "j0": 335, "subtour": 335, "u_j": 335, "q_j": 335, "neq": 335, "pond": 335, "arcos": 335, "posit": [335, 337, 338], "liga\u00e7\u00f5": 335, "terceir": 335, "tour": 335, "classic": 335, "branch": [335, 339], "milp": 335, "fins": 335, "nota\u00e7\u00e3": 335, "empacot": [335, 337], "bf": 335, "01": 335, "02": 335, "dimens\u00e3": 335, "escal": [335, 340], "assoc": 335, "salient": 335, "empreg": [335, 340], "dif\u00edcil": [335, 338], "speedup": 335, "resum": 335, "transform": 335, "mapei": 335, "notad": 335, "onda": 335, "lagrangian": 335, "ih": 335, "_i": [335, 338], "otim": 335, "_n": 335, "_0": 335, "2an": 335, "2ak": 335, "pront": 335, "programming": 335, "acm": 335, "326": 335, "329": 335, "doi": 335, "1145": 335, "321043": 335, "321046": 335, "bixby": 335, "chv\u00e1tal": 335, "cook": 335, "princeton": 335, "university": 335, "press": 335, "isbn": 335, "978": 335, "691": 335, "12993": 335, "version_inf": 335, "pleas": 335, "exceptions": 335, "cplexerror": 335, "warning": 335, "quantum_inf": 335, "plan": 335, "__init__": 335, "generate_instanc": 335, "1543": [335, 336], "xc": 335, "rand": 335, "yc": 335, "ii": 335, "jj": 335, "randomly": 335, "classicaloptimiz": 335, "codif": 335, "compute_allowed_combinations": 335, "factorial": 335, "cplex_solution": 335, "refactoring": 335, "my_obj": 335, "reshap": 335, "my_ub": 335, "my_lb": 335, "my_ctype": 335, "my_rhs": 335, "my_sens": 335, "my_prob": 335, "populatebyrow": 335, "exc": 335, "get_valu": 335, "get_objective_valu": 335, "prob": [335, 337], "set_sens": 335, "set_log_str": 335, "set_error_str": 335, "set_warning_str": 335, "set_results_str": 335, "rows": 335, "col": 335, "coef": 335, "elimination": 335, "linear_constraints": 335, "lin_expr": 335, "instantiat": 335, "classical_optimiz": 335, "fashion": 335, "classical_cost": 335, "put": 335, "missing": 335, "visualize_solution": 335, "title_str": 335, "figur": [335, 336], "scatt": 335, "200": 335, "annotat": 335, "color": 335, "ms": 335, "grid": 335, "ix": 335, "iy": 335, "arrow": 335, "length_includes_head": 335, "head_width": 335, "titl": 335, "estrel": 335, "flech": 335, "quantumoptimiz": 335, "instanci": 335, "la": 335, "dentr": [335, 336, 337], "binary_representation": 335, "\u00e1lgebr": 335, "construct_probl": 335, "solve_probl": 335, "minimuneigenoptimiz": 335, "padr\u00f5": 335, "x_sol": 335, "instance_vec": 335, "w_list": 335, "id_n": 335, "eye": 335, "im_n_1": 335, "iv_n_1": 335, "iv_n": 335, "neg_iv_n_1": 335, "vn": 335, "axis": 335, "interactions": 335, "kron": 335, "dot": 335, "contribution": 335, "individual": 335, "path": 335, "fun": 335, "lambd": [335, 336, 338], "around": 335, "qasm_simulator": [335, 336, 337], "quantum_optimiz": 335, "codifiqu": 335, "sanidad": 335, "certifiqu": 335, "produz": [335, 338], "binary_cost": 335, "could": 335, "verify": 335, "correctness": 335, "unavailabl": 335, "nameerror": 335, "cells": 335, "abov": [335, 340], "11148115684045": 335, "1114811568365": 335, "demor": 335, "pouc": 335, "hor": 335, "cria\u00e7\u00e3": 335, "logs": 335, "quantum_solution": 335, "quantum_cost": 335, "x_quantum": 335, "kk": 335, "comparison": 335, "acas": 335, "coincid": 335, "ilp": 335, "tenh": [335, 337, 340], "vi\u00e1v": 335, "ide": 335, "fact\u00edv": 335, "fort": 335, "08_cvar_optimization": 336, "risc": 336, "condicional": 336, "particular": 336, "repeti\u00e7\u00f5": 336, "n\u00edvel": [336, 340], "confianc": 336, "tradeoff": 336, "foc": 336, "doses": 336, "suaviz": 336, "cen\u00e1ri": 336, "barkouts": [336, 340], "improving": [336, 340], "256": [336, 340], "realamplitud": 336, "pauliexpectation": [336, 340], "cvarexpectation": [336, 340], "linearequalitytopenalty": 336, "123456": 336, "assets": 336, "risk": 336, "budget": 336, "scaling": 336, "mu": [336, 338], "7313": 336, "9893": 336, "2725": 336, "8750": 336, "7667": 336, "3622": 336, "sigm": [336, 338], "7312": 336, "6233": 336, "4689": 336, "5452": 336, "0082": 336, "3809": 336, "4732": 336, "7538": 336, "4659": 336, "0733": 336, "8945": 336, "4095": 336, "0007": 336, "4301": 336, "5067": 336, "2012": 336, "0922": 336, "6231": 336, "1509": 336, "8992": 336, "portfoli": 336, "random_model": 336, "covarianc": 336, "portfolio_optimization": 336, "binary_var_list": 336, "opt_result": 336, "27835": 336, "x_4": [336, 337], "x_5": [336, 337], "furth": 336, "analys": 336, "would": 336, "necessary": 336, "translation": 336, "linear2penalty": 336, "num_parameters": 336, "backend_nam": [336, 340], "qasm": 336, "simlator": 336, "alphas": 336, "50": 336, "confidenc": 336, "levels": 336, "tested": 336, "stddev": 336, "cvar_alph": 336, "cvar_exp": 336, "compute_varianc": 336, "fixed": 336, "pr": 336, "1373": 336, "opt_alg": 336, "2783500000000174": 336, "figsiz": [336, 340], "linewidth": 336, "label": 336, "2f": 336, "legend": 336, "fontsiz": 336, "xlim": 336, "xticks": 336, "yticks": 336, "objective_valu": 336, "x_bin": 336, "sb": 336, "ind": 336, "argsort": 336, "probabilitiy": 336, "4f": 336, "00": [336, 339], "0084": 336, "0314": 336, "1278": 336, "09_application_cl": 337, "experiment": 337, "itens": 337, "subcole\u00e7\u00e3": 337, "cobert": 337, "multiconjunt": 337, "igu": 337, "subjconjunt": 337, "disjunt": 337, "cliqu": 337, "direcion": 337, "induz": 337, "est\u00e1vel": 337, "nenhum": 337, "roteament": 337, "ve\u00edcul": 337, "excet": 337, "desenh": 337, "previ": 337, "vertexcov": 337, "aleat\u00f3ri": 337, "qins": [337, 339], "random_regular_graph": 337, "c6": 337, "c7": 337, "c8": 337, "autovetor": 337, "meo": [337, 339], "nsolution": 337, "ntim": 337, "20122742652893066": 337, "knapsack": 337, "5723414421081543": 337, "previous": 337, "26": 337, "104": 337, "208": 337, "156": 337, "416": 337, "312": 337, "624": 337, "234": [337, 338], "520": 337, "468": 337, "780": 337, "936": 337, "832": 337, "1040": 337, "1248": 337, "260": [337, 338], "650": 337, "1560": 337, "2080": 337, "1043": 337, "1564": 337, "2085": 337, "2606": 337, "3127": 337, "2600": 337, "1417": 337, "258": [337, 338], "388": 337, "517": 337, "647": 337, "776": 337, "130": 337, "390": 337, "78": 337, "195": 337, "52": 337, "65": 337, "117": 337, "10_warm_start_qao": 338, "costum": 338, "dif\u00edc": 338, "tx": 338, "diagonal": 338, "los": 338, "f\u00e1c": 338, "semidefin": 338, "marecek": 338, "modelling": 338, "imports": 338, "quadratic_program_to_qub": 338, "create_probl": 338, "relax_probl": 338, "relaxed_probl": 338, "deepcopy": 338, "418": 338, "0913": 338, "2415": 338, "4436": 338, "892": 338, "4051": 338, "07978412": 338, "00768914": 338, "11227606": 338, "06842969": 338, "01016793": 338, "00839765": 338, "10922887": 338, "03043424": 338, "0020045": 338, "00670929": 338, "0147937": 338, "985353": 338, "02307313": 338, "05249785": 338, "00904119": 338, "6043817": 338, "03740115": 338, "00945322": 338, "79839634": 338, "07616951": 338, "08464544": 338, "15956824": 338, "03075656": 338, "44910424": 338, "27371876": 338, "04067172": 338, "x4": 338, "0335906": 338, "x5": 338, "21845774": 338, "12173696": 338, "008018": 338, "02683716": 338, "0591748": 338, "970706": 338, "09229252": 338, "2099914": 338, "03616476": 338, "2087634": 338, "1496046": 338, "03781288": 338, "59679268": 338, "30467804": 338, "16929088": 338, "7689322": 338, "realiz": 338, "intern": 338, "848800180000005": 338, "85": 338, "40922044000001": 338, "82756812000001": 338, "10474512000002": 338, "33779216000002": 338, "34487328000002": 338, "42": 338, "907689680000004": 338, "25672692": 338, "37044588": 338, "40530104000001": 338, "43763868000002": 338, "659937940000006": 338, "47075640000001": 338, "16847248000002": 338, "41462864000002": 338, "43": 338, "89799534000001": 338, "52806848000002": 338, "34065100000001": 338, "286024620000006": 338, "68314192000001": 338, "858522820000005": 338, "259": 338, "55339164000003": 338, "22669164": 338, "262": 338, "37689164": 338, "57899164": 338, "267": 338, "02739164": 338, "54049164": 338, "384": 338, "20308746000006": 338, "suposi\u00e7\u00e3": 338, "sol": 338, "012055025682855": 338, "1752499576180142": 338, "4803888163988428e": 338, "07": 338, "9709053264087596": 338, "7384168677494174": 338, "9999999916475085": 338, "14438904470168756": 338, "c_stars": 338, "12345": 338, "768932200000002": 338, "phi": 338, "bigotimes_": 338, "r_y": 338, "obt\u00e9m": 338, "\u00e2ngul": 338, "arcsin": 338, "c_star": 338, "init_qc": 338, "idx": [338, 340], "mpl": [338, 340], "mistur": 338, "h_": 338, "ws": 338, "pmatrix": 338, "2c_i": 338, "c_i": 338, "exponenc": 338, "\u03b2": 338, "ws_mix": 338, "ws_qaoa_m": 338, "ws_qao": 338, "ws_qaoa_result": 338, "olham": 338, "format_qaoa_sampl": 338, "max_len": 338, "qaoa_r": 338, "sorted": 338, "3f": 338, "1e2": 338, "1f": 338, "001110": 338, "769": 338, "011010": 338, "744": 338, "001011": 338, "671": 338, "101010": 338, "626": 338, "010110": 338, "100110": 338, "953": 338, "000111": 338, "349": 338, "110010": 338, "410": 338, "010011": 338, "013": 338, "100011": 338, "559": 338, "warmstartqaoaoptimiz": 338, "Ele": [338, 339], "comport": 338, "ws_result": 338, "23": [338, 340], "11_using_classical_optimization_solvers_and_models": 339, "apis": 339, "salv": 339, "julh": 339, "2021": [339, 340], "cplex_result": 339, "gurobi_result": 339, "restricted": 339, "production": 339, "expir": 339, "2023": 339, "mensag": 339, "threads": 339, "timelimit": 339, "identifi": 339, "54982fbec": 339, "cpxparam_read_datacheck": 339, "cpxparam_threads": 339, "cpxparam_timelimit": 339, "10000000000000001": 339, "incumbent": 339, "000000": 339, "sec": 339, "ticks": 339, "processing": 339, "amp": [339, 340], "sequential": 339, "aer_simulator": 339, "ndisplay": 339, "421": 339, "103": 339, "033": 339, "038": 339, "docplex_model": 339, "dvar": 339, "gp": 339, "gurobipy_model": 339, "addvar": 339, "vtype": 339, "grb": 339, "setobjectiv": 339, "addconstr": 339, "quadexpr": 339, "r0": 339, "linexpr": 339, "general": 339, "vem": [339, 340], "id\u00eant": 339, "from_gurobipy": 339, "docpblex": 339, "qp2": 339, "to_gurobipy": 339, "to_docplex_mp": 339, "gmod": 339, "dmod": 339, "nconvert": 339, "ind_mod": 339, "add_indicator": 339, "lc1": 339, "nativ": 339, "ncplex": 339, "12_qaoa_runtim": 340, "disponibiliz": 340, "load_account": 340, "get_provid": 340, "hub": 340, "group": 340, "devolu": 340, "entend": 340, "devolv": 340, "fornecedor": 340, "program_id": 340, "qaoa_progr": 340, "parameternamespac": 340, "description": 340, "optimizat": 340, "use_init": 340, "use_pulse_": 340, "measuremen": 340, "tensored": 340, "measurements": 340, "repetitions": 340, "depth": 340, "typically": 340, "labeled": 340, "aux_operat": 340, "paulisumop": 340, "initial_p": 340, "smallest": 340, "trying": 340, "calibration": 340, "rat": 340, "use_swap_s": 340, "acab": 340, "elabor": 340, "zz": 340, "from_list": 340, "tri\u00e2ngul": 340, "malh": 340, "ru\u00edd": 340, "cam": 340, "gamm": 340, "gamma_1": 340, "beta_1": 340, "gamma_2": 340, "beta_2": 340, "tir": 340, "colet": 340, "mitig": 340, "erros": 340, "tensoredmeasfitt": 340, "dedic": 340, "comut": 340, "acopl": 340, "op\u00e7\u00e3": 340, "Esse": 340, "kak": 340, "cartan": 340, "rzxgat": 340, "resson": 340, "troc": 340, "kl": 340, "nannicin": 340, "robert": 340, "tavernell": 340, "earnest": 340, "tornow": 340, "cross": 340, "resonanc": 340, "research": 340, "043088": 340, "cinc": 340, "nuv": 340, "encaix": 340, "perfeit": 340, "job_monitor": 340, "helps": 340, "deal": 340, "noisy": 340, "environments": 340, "programm": 340, "ibmq_qasm_simulator": 340, "described": 340, "runtime_inputs": 340, "backends": 340, "reduc": 340, "optimizing": 340, "echoed": 340, "provedor": 340, "successfully": 340, "job_id": 340, "c9qh9mekcirf2adkkhvg": 340, "bob": 340, "jobstatus": 340, "sucess": 340, "recuper": 340, "acess\u00edv": 340, "De": 340, "autoest": 340, "collections": 340, "defaultdict": 340, "op_adj_mat": 340, "extract": 340, "adj_mat": 340, "coeff": 340, "primitiv": 340, "to_list": 340, "get_cost": 340, "bit_str": 340, "bit": 340, "get_cut_distribution": 340, "state_results": 340, "vals": 340, "cut_vals": 340, "axs": 340, "subplots": 340, "optimizer_history": 340, "bar": 340, "set_xlabel": 340, "set_ylabel": 340, "alavanc": 340, "metodolog": 340, "eco": 340, "systems": 340, "gerenc": 340, "passmanag": 340, "standard_gat": 340, "equivalence_library": 340, "standardequivalencelibrary": 340, "std_eqlib": 340, "collect2qblocks": 340, "consolidateblocks": 340, "unrollcustomdefinitions": 340, "basistranslator": 340, "optimize1qgatesdecomposition": 340, "builders": 340, "rzxcalibrationbuildernoech": 340, "echo_rzx_weyl_decomposition": 340, "echorzxweyldecomposition": 340, "mock": 340, "fakebel": 340, "anex": 340, "Essas": 340, "cronogram": 340, "cnot": 340, "calibr": 340, "inst_map": 340, "instruction_schedule_map": 340, "channel_map": 340, "qubit_channel_mapping": 340, "rzx_bas": 340, "rzx": 340, "sx": 340, "pulse_efficient": 340, "consolidat": 340, "consecutiv": 340, "operations": 340, "basis_gat": 340, "rxx": 340, "rewrit": 340, "weyl": 340, "decomposed": 340, "attach": 340, "scaled": 340, "schedul": 340, "simplify": 340, "arbitr\u00e1ri": 340, "circ": 340, "cx": 340, "rx": 340, "fold": 340, "cffbb84qiskit": 340, "577533721923828fri": 340, "31": 340}, "objects": {"": [[0, 0, 0, "-", "qiskit_optimization"]], "qiskit_optimization": [[10, 1, 1, "", "INFINITY"], [11, 2, 1, "", "QiskitOptimizationError"], [12, 4, 1, "", "QuadraticProgram"], [1, 0, 0, "-", "algorithms"], [2, 0, 0, "-", "applications"], [3, 0, 0, "-", "converters"], [4, 0, 0, "-", "problems"], [5, 0, 0, "-", "runtime"], [6, 0, 0, "-", "translators"]], "qiskit_optimization.QiskitOptimizationError": [[11, 3, 1, "", "with_traceback"]], "qiskit_optimization.QuadraticProgram": [[13, 3, 1, "", "binary_var"], [14, 3, 1, "", "binary_var_dict"], [15, 3, 1, "", "binary_var_list"], [16, 3, 1, "", "clear"], [17, 3, 1, "", "continuous_var"], [18, 3, 1, "", "continuous_var_dict"], [19, 3, 1, "", "continuous_var_list"], [20, 3, 1, "", "export_as_lp_string"], [21, 3, 1, "", "from_ising"], [22, 3, 1, "", "get_feasibility_info"], [23, 3, 1, "", "get_linear_constraint"], [24, 3, 1, "", "get_num_binary_vars"], [25, 3, 1, "", "get_num_continuous_vars"], [26, 3, 1, "", "get_num_integer_vars"], [27, 3, 1, "", "get_num_linear_constraints"], [28, 3, 1, "", "get_num_quadratic_constraints"], [29, 3, 1, "", "get_num_vars"], [30, 3, 1, "", "get_quadratic_constraint"], [31, 3, 1, "", "get_variable"], [32, 3, 1, "", "integer_var"], [33, 3, 1, "", "integer_var_dict"], [34, 3, 1, "", "integer_var_list"], [35, 3, 1, "", "is_feasible"], [36, 3, 1, "", "linear_constraint"], [37, 5, 1, "", "linear_constraints"], [38, 5, 1, "", "linear_constraints_index"], [39, 3, 1, "", "maximize"], [40, 3, 1, "", "minimize"], [41, 5, 1, "", "name"], [42, 5, 1, "", "objective"], [43, 3, 1, "", "prettyprint"], [44, 3, 1, "", "quadratic_constraint"], [45, 5, 1, "", "quadratic_constraints"], [46, 5, 1, "", "quadratic_constraints_index"], [47, 3, 1, "", "read_from_lp_file"], [48, 3, 1, "", "remove_linear_constraint"], [49, 3, 1, "", "remove_quadratic_constraint"], [50, 5, 1, "", "status"], [51, 3, 1, "", "substitute_variables"], [52, 3, 1, "", "to_ising"], [53, 5, 1, "", "variables"], [54, 5, 1, "", "variables_index"], [55, 3, 1, "", "write_to_lp_file"]], "qiskit_optimization.algorithms": [[56, 4, 1, "", "ADMMOptimizationResult"], [58, 4, 1, "", "ADMMOptimizer"], [62, 4, 1, "", "ADMMParameters"], [63, 4, 1, "", "ADMMState"], [64, 4, 1, "", "BaseAggregator"], [66, 4, 1, "", "CobylaOptimizer"], [69, 4, 1, "", "CplexOptimizer"], [75, 4, 1, "", "GoemansWilliamsonOptimizationResult"], [77, 4, 1, "", "GoemansWilliamsonOptimizer"], [81, 4, 1, "", "GroverOptimizationResult"], [88, 4, 1, "", "GroverOptimizer"], [92, 4, 1, "", "GurobiOptimizer"], [97, 4, 1, "", "IntermediateResult"], [101, 4, 1, "", "MeanAggregator"], [103, 4, 1, "", "MinimumEigenOptimizationResult"], [106, 4, 1, "", "MinimumEigenOptimizer"], [110, 4, 1, "", "MultiStartOptimizer"], [114, 4, 1, "", "OptimizationAlgorithm"], [118, 4, 1, "", "OptimizationResult"], [130, 4, 1, "", "OptimizationResultStatus"], [134, 4, 1, "", "RecursiveMinimumEigenOptimizationResult"], [137, 4, 1, "", "RecursiveMinimumEigenOptimizer"], [140, 4, 1, "", "SlsqpOptimizationResult"], [145, 4, 1, "", "SlsqpOptimizer"], [148, 4, 1, "", "SolutionSample"], [153, 4, 1, "", "WarmStartQAOAFactory"], [157, 4, 1, "", "WarmStartQAOAOptimizer"]], "qiskit_optimization.algorithms.ADMMOptimizationResult": [[57, 5, 1, "", "state"]], "qiskit_optimization.algorithms.ADMMOptimizer": [[59, 3, 1, "", "get_compatibility_msg"], [60, 5, 1, "", "parameters"], [61, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.BaseAggregator": [[65, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.CobylaOptimizer": [[67, 3, 1, "", "get_compatibility_msg"], [68, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.CplexOptimizer": [[70, 5, 1, "", "cplex_parameters"], [71, 5, 1, "", "disp"], [72, 3, 1, "", "get_compatibility_msg"], [73, 3, 1, "", "is_cplex_installed"], [74, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult": [[76, 5, 1, "", "sdp_solution"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer": [[78, 3, 1, "", "get_compatibility_msg"], [79, 3, 1, "", "max_cut_value"], [80, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GroverOptimizationResult": [[82, 5, 1, "", "intermediate_fval"], [83, 5, 1, "", "n_input_qubits"], [84, 5, 1, "", "n_output_qubits"], [85, 5, 1, "", "operation_counts"], [86, 5, 1, "", "raw_samples"], [87, 5, 1, "", "threshold"]], "qiskit_optimization.algorithms.GroverOptimizer": [[89, 3, 1, "", "get_compatibility_msg"], [90, 5, 1, "", "quantum_instance"], [91, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GurobiOptimizer": [[93, 5, 1, "", "disp"], [94, 3, 1, "", "get_compatibility_msg"], [95, 3, 1, "", "is_gurobi_installed"], [96, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.IntermediateResult": [[98, 6, 1, "", "ALL_ITERATIONS"], [99, 6, 1, "", "LAST_ITERATION"], [100, 6, 1, "", "NO_ITERATIONS"]], "qiskit_optimization.algorithms.MeanAggregator": [[102, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.MinimumEigenOptimizationResult": [[104, 5, 1, "", "min_eigen_solver_result"], [105, 5, 1, "", "raw_samples"]], "qiskit_optimization.algorithms.MinimumEigenOptimizer": [[107, 3, 1, "", "get_compatibility_msg"], [108, 5, 1, "", "min_eigen_solver"], [109, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.MultiStartOptimizer": [[111, 5, 1, "", "clip"], [112, 3, 1, "", "multi_start_solve"], [113, 5, 1, "", "trials"]], "qiskit_optimization.algorithms.OptimizationAlgorithm": [[115, 3, 1, "", "get_compatibility_msg"], [116, 3, 1, "", "is_compatible"], [117, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.OptimizationResult": [[119, 3, 1, "", "__getitem__"], [120, 5, 1, "", "fval"], [121, 3, 1, "", "get_correlations"], [122, 3, 1, "", "prettyprint"], [123, 5, 1, "", "raw_results"], [124, 5, 1, "", "samples"], [125, 5, 1, "", "status"], [126, 5, 1, "", "variable_names"], [127, 5, 1, "", "variables"], [128, 5, 1, "", "variables_dict"], [129, 5, 1, "", "x"]], "qiskit_optimization.algorithms.OptimizationResultStatus": [[131, 6, 1, "", "FAILURE"], [132, 6, 1, "", "INFEASIBLE"], [133, 6, 1, "", "SUCCESS"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult": [[135, 5, 1, "", "history"], [136, 5, 1, "", "replacements"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer": [[138, 3, 1, "", "get_compatibility_msg"], [139, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SlsqpOptimizationResult": [[141, 5, 1, "", "fx"], [142, 5, 1, "", "imode"], [143, 5, 1, "", "its"], [144, 5, 1, "", "smode"]], "qiskit_optimization.algorithms.SlsqpOptimizer": [[146, 3, 1, "", "get_compatibility_msg"], [147, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SolutionSample": [[149, 6, 1, "", "fval"], [150, 6, 1, "", "probability"], [151, 6, 1, "", "status"], [152, 6, 1, "", "x"]], "qiskit_optimization.algorithms.WarmStartQAOAFactory": [[154, 3, 1, "", "create_initial_state"], [155, 3, 1, "", "create_initial_variables"], [156, 3, 1, "", "create_mixer"]], "qiskit_optimization.algorithms.WarmStartQAOAOptimizer": [[158, 3, 1, "", "solve"]], "qiskit_optimization.applications": [[159, 4, 1, "", "BinPacking"], [163, 4, 1, "", "Clique"], [167, 4, 1, "", "ExactCover"], [170, 4, 1, "", "GraphOptimizationApplication"], [174, 4, 1, "", "GraphPartition"], [177, 4, 1, "", "Knapsack"], [181, 4, 1, "", "Maxcut"], [186, 4, 1, "", "NumberPartition"], [189, 4, 1, "", "OptimizationApplication"], [193, 4, 1, "", "SKModel"], [199, 4, 1, "", "SetPacking"], [202, 4, 1, "", "StableSet"], [205, 4, 1, "", "Tsp"], [211, 4, 1, "", "VehicleRouting"], [217, 4, 1, "", "VertexCover"]], "qiskit_optimization.applications.BinPacking": [[160, 3, 1, "", "get_figure"], [161, 3, 1, "", "interpret"], [162, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Clique": [[164, 3, 1, "", "interpret"], [165, 5, 1, "", "size"], [166, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.ExactCover": [[168, 3, 1, "", "interpret"], [169, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphOptimizationApplication": [[171, 3, 1, "", "draw"], [172, 5, 1, "", "graph"], [173, 3, 1, "", "random_graph"]], "qiskit_optimization.applications.GraphPartition": [[175, 3, 1, "", "interpret"], [176, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Knapsack": [[178, 3, 1, "", "interpret"], [179, 5, 1, "", "max_weight"], [180, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Maxcut": [[182, 3, 1, "", "get_gset_result"], [183, 3, 1, "", "interpret"], [184, 3, 1, "", "parse_gset_format"], [185, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.NumberPartition": [[187, 3, 1, "", "interpret"], [188, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.OptimizationApplication": [[190, 3, 1, "", "interpret"], [191, 3, 1, "", "sample_most_likely"], [192, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SKModel": [[194, 3, 1, "", "disorder"], [195, 5, 1, "", "graph"], [196, 3, 1, "", "interpret"], [197, 5, 1, "", "num_sites"], [198, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SetPacking": [[200, 3, 1, "", "interpret"], [201, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.StableSet": [[203, 3, 1, "", "interpret"], [204, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Tsp": [[206, 3, 1, "", "create_random_instance"], [207, 3, 1, "", "interpret"], [208, 3, 1, "", "parse_tsplib_format"], [209, 3, 1, "", "to_quadratic_program"], [210, 3, 1, "", "tsp_value"]], "qiskit_optimization.applications.VehicleRouting": [[212, 3, 1, "", "create_random_instance"], [213, 5, 1, "", "depot"], [214, 3, 1, "", "interpret"], [215, 5, 1, "", "num_vehicles"], [216, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.VertexCover": [[218, 3, 1, "", "interpret"], [219, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.converters": [[220, 4, 1, "", "InequalityToEquality"], [224, 4, 1, "", "IntegerToBinary"], [227, 4, 1, "", "LinearEqualityToPenalty"], [231, 4, 1, "", "LinearInequalityToPenalty"], [235, 4, 1, "", "MaximizeToMinimize"], [236, 4, 1, "", "MinimizeToMaximize"], [237, 4, 1, "", "QuadraticProgramConverter"], [240, 4, 1, "", "QuadraticProgramToQubo"]], "qiskit_optimization.converters.InequalityToEquality": [[221, 3, 1, "", "convert"], [222, 3, 1, "", "interpret"], [223, 5, 1, "", "mode"]], "qiskit_optimization.converters.IntegerToBinary": [[225, 3, 1, "", "convert"], [226, 3, 1, "", "interpret"]], "qiskit_optimization.converters.LinearEqualityToPenalty": [[228, 3, 1, "", "convert"], [229, 3, 1, "", "interpret"], [230, 5, 1, "", "penalty"]], "qiskit_optimization.converters.LinearInequalityToPenalty": [[232, 3, 1, "", "convert"], [233, 3, 1, "", "interpret"], [234, 5, 1, "", "penalty"]], "qiskit_optimization.converters.QuadraticProgramConverter": [[238, 3, 1, "", "convert"], [239, 3, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramToQubo": [[241, 3, 1, "", "convert"], [242, 3, 1, "", "get_compatibility_msg"], [243, 3, 1, "", "interpret"], [244, 3, 1, "", "is_compatible"], [245, 5, 1, "", "penalty"]], "qiskit_optimization.problems": [[246, 4, 1, "", "Constraint"], [251, 4, 1, "", "LinearConstraint"], [254, 4, 1, "", "LinearExpression"], [262, 4, 1, "", "QuadraticConstraint"], [266, 4, 1, "", "QuadraticExpression"], [274, 4, 1, "", "QuadraticObjective"], [281, 4, 1, "", "QuadraticProgramElement"], [283, 4, 1, "", "Variable"]], "qiskit_optimization.problems.Constraint": [[247, 3, 1, "", "evaluate"], [248, 5, 1, "", "name"], [249, 5, 1, "", "rhs"], [250, 5, 1, "", "sense"]], "qiskit_optimization.problems.LinearConstraint": [[252, 3, 1, "", "evaluate"], [253, 5, 1, "", "linear"]], "qiskit_optimization.problems.LinearExpression": [[255, 3, 1, "", "__getitem__"], [256, 5, 1, "", "bounds"], [257, 5, 1, "", "coefficients"], [258, 3, 1, "", "evaluate"], [259, 3, 1, "", "evaluate_gradient"], [260, 3, 1, "", "to_array"], [261, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticConstraint": [[263, 3, 1, "", "evaluate"], [264, 5, 1, "", "linear"], [265, 5, 1, "", "quadratic"]], "qiskit_optimization.problems.QuadraticExpression": [[267, 3, 1, "", "__getitem__"], [268, 5, 1, "", "bounds"], [269, 5, 1, "", "coefficients"], [270, 3, 1, "", "evaluate"], [271, 3, 1, "", "evaluate_gradient"], [272, 3, 1, "", "to_array"], [273, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticObjective": [[275, 5, 1, "", "constant"], [276, 3, 1, "", "evaluate"], [277, 3, 1, "", "evaluate_gradient"], [278, 5, 1, "", "linear"], [279, 5, 1, "", "quadratic"], [280, 5, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticProgramElement": [[282, 5, 1, "", "quadratic_program"]], "qiskit_optimization.problems.Variable": [[284, 3, 1, "", "as_tuple"], [285, 5, 1, "", "lowerbound"], [286, 5, 1, "", "name"], [287, 5, 1, "", "upperbound"], [288, 5, 1, "", "vartype"]], "qiskit_optimization.runtime": [[289, 4, 1, "", "QAOAClient"], [300, 4, 1, "", "QAOAProgram"], [302, 4, 1, "", "VQEClient"], [316, 4, 1, "", "VQEProgram"], [319, 4, 1, "", "VQEProgramResult"], [320, 4, 1, "", "VQERuntimeResult"]], "qiskit_optimization.runtime.QAOAClient": [[290, 5, 1, "", "alpha"], [291, 5, 1, "", "ansatz"], [292, 5, 1, "", "initial_state"], [293, 5, 1, "", "mixer"], [294, 5, 1, "", "optimization_level"], [295, 3, 1, "", "program_inputs"], [296, 5, 1, "", "reps"], [297, 5, 1, "", "use_initial_mapping"], [298, 5, 1, "", "use_pulse_efficient"], [299, 5, 1, "", "use_swap_strategies"]], "qiskit_optimization.runtime.QAOAProgram": [[301, 3, 1, "", "compute_minimum_eigenvalue"]], "qiskit_optimization.runtime.VQEClient": [[303, 5, 1, "", "ansatz"], [304, 5, 1, "", "backend"], [305, 5, 1, "", "callback"], [306, 3, 1, "", "compute_minimum_eigenvalue"], [307, 5, 1, "", "initial_point"], [308, 5, 1, "", "measurement_error_mitigation"], [309, 5, 1, "", "optimizer"], [310, 5, 1, "", "program_id"], [311, 3, 1, "", "program_inputs"], [312, 5, 1, "", "provider"], [313, 5, 1, "", "shots"], [314, 5, 1, "", "store_intermediate"], [315, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQEProgram": [[317, 3, 1, "", "compute_minimum_eigenvalue"], [318, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQERuntimeResult": [[321, 5, 1, "", "job_id"], [322, 5, 1, "", "optimizer_history"]], "qiskit_optimization.translators": [[323, 7, 1, "", "from_docplex_mp"], [324, 7, 1, "", "from_gurobipy"], [325, 7, 1, "", "from_ising"], [326, 7, 1, "", "to_docplex_mp"], [327, 7, 1, "", "to_gurobipy"], [328, 7, 1, "", "to_ising"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:exception", "3": "py:method", "4": "py:class", "5": "py:property", "6": "py:attribute", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python m\u00f3dulo"], "1": ["py", "data", "Python dados"], "2": ["py", "exception", "Python excep\u00e7\u00e3o"], "3": ["py", "method", "Python m\u00e9todo"], "4": ["py", "class", "Python classe"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python atributo"], "7": ["py", "function", "Python fun\u00e7\u00e3o"]}, "titleterms": {"qiskit": [0, 5, 8, 339, 340], "optimization": [0, 1, 2, 3, 4, 5, 8, 339], "api": 0, "referenc": 0, "s": 0, "modul": 0, "qiskit_optimization": [0, 1, 2, 3, 4, 5, 6], "submodul": 0, "algorithms": 1, "bas": [1, 2, 3], "class": [1, 2, 3, 334, 337], "and": 1, "results": 1, "applications": 2, "converters": 3, "problems": 4, "quadratic": [4, 6, 265, 279], "progr": [4, 6], "runtim": [5, 340], "translators": 6, "primeir": 7, "pass": [7, 335], "instal": 7, "opcion": 7, "pront": 7, "par": [7, 330, 331, 334, 337], "comec": 7, "overview": 8, "next": 8, "steps": 8, "releas": 9, "not": 9, "infinity": 10, "qiskitoptimizationerror": 11, "quadraticprogr": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 329, 339], "binary_v": 13, "binary_var_dict": 14, "binary_var_list": 15, "cle": 16, "continuous_v": 17, "continuous_var_dict": 18, "continuous_var_list": 19, "export_as_lp_string": 20, "from_ising": [21, 325], "get_feasibility_inf": 22, "get_linear_constraint": 23, "get_num_binary_vars": 24, "get_num_continuous_vars": 25, "get_num_integer_vars": 26, "get_num_linear_constraints": 27, "get_num_quadratic_constraints": 28, "get_num_vars": 29, "get_quadratic_constraint": 30, "get_variabl": 31, "integer_v": 32, "integer_var_dict": 33, "integer_var_list": 34, "is_feasibl": 35, "linear_constraint": 36, "linear_constraints": 37, "linear_constraints_index": 38, "maximiz": 39, "minimiz": 40, "nam": [41, 248, 286], "objectiv": 42, "prettyprint": [43, 122], "quadratic_constraint": 44, "quadratic_constraints": 45, "quadratic_constraints_index": 46, "read_from_lp_fil": 47, "remove_linear_constraint": 48, "remove_quadratic_constraint": 49, "status": [50, 125, 151], "substitute_variabl": 51, "to_ising": [52, 328], "variabl": [53, 127, 283, 284, 285, 286, 287, 288], "variables_index": 54, "write_to_lp_fil": 55, "admmoptimizationresult": [56, 57], "stat": 57, "admmoptimiz": [58, 59, 60, 61], "get_compatibility_msg": [59, 67, 72, 78, 89, 94, 107, 115, 138, 146, 242], "parameters": 60, "solv": [61, 68, 74, 80, 91, 96, 109, 117, 139, 147, 158, 333], "admmparameters": 62, "admmstat": 63, "baseaggregator": [64, 65], "aggregat": [65, 102], "cobylaoptimiz": [66, 67, 68], "cplexoptimiz": [69, 70, 71, 72, 73, 74], "cplex_parameters": 70, "disp": [71, 93], "is_cplex_installed": 73, "goemanswilliamsonoptimizationresult": [75, 76], "sdp_solution": 76, "goemanswilliamsonoptimiz": [77, 78, 79, 80], "max_cut_valu": 79, "groveroptimizationresult": [81, 82, 83, 84, 85, 86, 87], "intermediate_fval": 82, "n_input_qubits": 83, "n_output_qubits": 84, "operation_counts": 85, "raw_sampl": [86, 105], "threshold": 87, "groveroptimiz": [88, 89, 90, 91], "quantum_instanc": 90, "gurobioptimiz": [92, 93, 94, 95, 96], "is_gurobi_installed": 95, "intermediateresult": [97, 98, 99, 100], "all_iterations": 98, "last_iteration": 99, "no_iterations": 100, "meanaggregator": [101, 102], "minimumeigenoptimizationresult": [103, 104, 105], "min_eigen_solver_result": 104, "minimumeigenoptimiz": [106, 107, 108, 109, 331], "min_eigen_solv": 108, "multistartoptimiz": [110, 111, 112, 113], "clip": 111, "multi_start_solv": 112, "trials": 113, "optimizationalgorithm": [114, 115, 116, 117], "is_compatibl": [116, 244], "optimizationresult": [118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "__getitem__": [119, 255, 267], "fval": [120, 149], "get_correlations": 121, "raw_results": 123, "sampl": 124, "variable_nam": 126, "variables_dict": 128, "x": [129, 152], "optimizationresultstatus": [130, 131, 132, 133], "failur": 131, "infeasibl": 132, "success": 133, "recursiveminimumeigenoptimizationresult": [134, 135, 136], "history": 135, "replacements": 136, "recursiveminimumeigenoptimiz": [137, 138, 139, 331], "slsqpoptimizationresult": [140, 141, 142, 143, 144], "fx": 141, "imod": 142, "its": 143, "smod": 144, "slsqpoptimiz": [145, 146, 147], "solutionsampl": [148, 149, 150, 151, 152], "probability": 150, "warmstartqaoafactory": [153, 154, 155, 156], "create_initial_stat": 154, "create_initial_variabl": 155, "create_mix": 156, "warmstartqaoaoptimiz": [157, 158], "binpacking": [159, 160, 161, 162], "get_figur": 160, "interpret": [161, 164, 168, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 239, 243], "to_quadratic_progr": [162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219], "cliqu": [163, 164, 165, 166], "siz": 165, "exactcov": [167, 168, 169], "graphoptimizationapplication": [170, 171, 172, 173], "draw": 171, "graph": [172, 195], "random_graph": 173, "graphpartition": [174, 175, 176], "knapsack": [177, 178, 179, 180], "max_weight": 179, "maxcut": [181, 182, 183, 184, 185], "get_gset_result": 182, "parse_gset_format": 184, "numberpartition": [186, 187, 188], "optimizationapplication": [189, 190, 191, 192], "sample_most_likely": 191, "skmodel": [193, 194, 195, 196, 197, 198], "disord": 194, "num_sit": 197, "setpacking": [199, 200, 201], "stableset": [202, 203, 204], "tsp": [205, 206, 207, 208, 209, 210], "create_random_instanc": [206, 212], "parse_tsplib_format": 208, "tsp_valu": 210, "vehiclerouting": [211, 212, 213, 214, 215, 216], "depot": 213, "num_vehicl": 215, "vertexcov": [217, 218, 219], "inequalitytoequality": [220, 221, 222, 223, 330], "convert": [221, 225, 228, 232, 238, 241, 331], "mod": 223, "integertobinary": [224, 225, 226, 330], "linearequalitytopenalty": [227, 228, 229, 230, 330], "penalty": [230, 234, 245], "linearinequalitytopenalty": [231, 232, 233, 234], "maximizetominimiz": 235, "minimizetomaximiz": 236, "quadraticprogramconvert": [237, 238, 239], "quadraticprogramtoqub": [240, 241, 242, 243, 244, 245], "constraint": [246, 247, 248, 249, 250], "evaluat": [247, 252, 258, 263, 270, 276], "rhs": 249, "sens": [250, 280], "linearconstraint": [251, 252, 253], "lin": [253, 264, 278, 329], "linearexpression": [254, 255, 256, 257, 258, 259, 260, 261], "bounds": [256, 268], "coefficients": [257, 269], "evaluate_gradient": [259, 271, 277], "to_array": [260, 272], "to_dict": [261, 273], "quadraticconstraint": [262, 263, 264, 265], "quadraticexpression": [266, 267, 268, 269, 270, 271, 272, 273], "quadraticobjectiv": [274, 275, 276, 277, 278, 279, 280], "constant": 275, "quadraticprogramelement": [281, 282], "quadratic_progr": 282, "as_tupl": 284, "lowerbound": 285, "upperbound": 287, "vartyp": 288, "qaoaclient": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "alpha": 290, "ansatz": [291, 303], "initial_stat": 292, "mix": 293, "optimization_level": 294, "program_inputs": [295, 311], "reps": 296, "use_initial_mapping": 297, "use_pulse_efficient": 298, "use_swap_strategi": 299, "qaoaprogr": [300, 301], "compute_minimum_eigenvalu": [301, 306, 317], "vqeclient": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "backend": 304, "callback": 305, "initial_point": 307, "measurement_error_mitigation": 308, "optimiz": 309, "program_id": 310, "provid": 312, "shots": 313, "store_intermediat": 314, "supports_aux_operators": [315, 318], "vqeprogr": [316, 317, 318], "vqeprogramresult": 319, "vqeruntimeresult": [320, 321, 322], "job_id": 321, "optimizer_history": 322, "from_docplex_mp": 323, "from_gurobipy": 324, "to_docplex_mp": 326, "to_gurobipy": 327, "program": [329, 330, 340], "quadr\u00e1t": [329, 330], "introdu": [329, 331, 332, 333, 334, 335, 336, 337, 338], "loading": 329, "from": 329, "an": 329, "lp": 329, "fil": 329, "carreg": 329, "part": 329, "model": [329, 335, 339], "docplex": [329, 339], "constru": [329, 335], "diret": 329, "adicion": 329, "remov": 329, "restri\u00e7\u00f5": [329, 339], "substitu": 329, "vari": 329, "conversor": 330, "otimiz": [331, 332, 333, 334, 336, 337, 338, 339, 340, 341], "eigen": [331, 336], "m\u00ednim": [331, 332, 336], "referent": [331, 332, 333, 335, 336, 338, 340], "qub": [331, 332, 338], "oper": 331, "resolv": 331, "an\u00e1lis": [331, 338], "result": [331, 333], "grov": 332, "busc": 332, "adapt": 332, "encontr": 332, "problem": [332, 334, 337], "usand": [332, 335, 336], "verifiqu": 332, "valor": 332, "corret": 332, "admm": 333, "inicializ": [333, 335], "exempl": 333, "solu\u00e7\u00e3": [333, 335], "cl\u00e1ssic": [333, 335, 339], "par\u00e2metr": 333, "cham": 333, "algoritm": 333, "3": [333, 335], "h": 333, "qu\u00e2ntic": [333, 334, 335, 336, 338], "max": 334, "cut": 334, "caixeir": 334, "viajant": 334, "ponder": 334, "comput": 334, "universal": 334, "aproxim": 334, "aplic": [334, 337], "abordag": 334, "forc": 334, "brut": 334, "mapeament": 334, "ising": [334, 335], "verific": [334, 337], "hamiltonian": [334, 335, 337], "complet": 334, "oferec": 334, "cust": 334, "cert": 334, "execut": [334, 340], "roteament": 335, "ve\u00edcul": 335, "O": 335, "Do": 335, "formul": 335, "qp": 335, "ibm": 335, "ilog": 335, "cplex": 335, "zer": 335, "1": 335, "2": 335, "4": 335, "5": 335, "melhor": 336, "variacional": 336, "cvar": 336, "portf\u00f3li": 336, "vqe": 336, "cobertur": 337, "v\u00e9rtic": 337, "mochil": 337, "Como": 337, "warm": 338, "start": 338, "prelimin": [338, 340], "relax": 338, "qao": [338, 340], "padr\u00e3": 338, "utiliz": 339, "solucion": 339, "cplexsolv": 339, "gurobisolv": 339, "tradutor": 339, "gurobipy": 339, "indic": 339, "ap\u00eandic": 340, "A": 340, "transpil": 340, "eficient": 340, "puls": 340, "tutori": 341}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 56}})