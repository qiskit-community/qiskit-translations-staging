Search.setIndex({"docnames": ["apidocs/qiskit_optimization", "apidocs/qiskit_optimization.algorithms", "apidocs/qiskit_optimization.applications", "apidocs/qiskit_optimization.converters", "apidocs/qiskit_optimization.problems", "apidocs/qiskit_optimization.runtime", "apidocs/qiskit_optimization.translators", "getting_started", "index", "release_notes", "stubs/qiskit_optimization.INFINITY", "stubs/qiskit_optimization.QiskitOptimizationError", "stubs/qiskit_optimization.QuadraticProgram", "stubs/qiskit_optimization.QuadraticProgram.binary_var", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list", "stubs/qiskit_optimization.QuadraticProgram.clear", "stubs/qiskit_optimization.QuadraticProgram.continuous_var", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string", "stubs/qiskit_optimization.QuadraticProgram.from_ising", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_variable", "stubs/qiskit_optimization.QuadraticProgram.integer_var", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list", "stubs/qiskit_optimization.QuadraticProgram.is_feasible", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.maximize", "stubs/qiskit_optimization.QuadraticProgram.minimize", "stubs/qiskit_optimization.QuadraticProgram.name", "stubs/qiskit_optimization.QuadraticProgram.objective", "stubs/qiskit_optimization.QuadraticProgram.prettyprint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.status", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables", "stubs/qiskit_optimization.QuadraticProgram.to_ising", "stubs/qiskit_optimization.QuadraticProgram.variables", "stubs/qiskit_optimization.QuadraticProgram.variables_index", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state", "stubs/qiskit_optimization.algorithms.ADMMOptimizer", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve", "stubs/qiskit_optimization.algorithms.ADMMParameters", "stubs/qiskit_optimization.algorithms.ADMMState", "stubs/qiskit_optimization.algorithms.BaseAggregator", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate", "stubs/qiskit_optimization.algorithms.CobylaOptimizer", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve", "stubs/qiskit_optimization.algorithms.CplexOptimizer", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold", "stubs/qiskit_optimization.algorithms.GroverOptimizer", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve", "stubs/qiskit_optimization.algorithms.GurobiOptimizer", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve", "stubs/qiskit_optimization.algorithms.IntermediateResult", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS", "stubs/qiskit_optimization.algorithms.MeanAggregator", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve", "stubs/qiskit_optimization.algorithms.OptimizationResult", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples", "stubs/qiskit_optimization.algorithms.OptimizationResult.status", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict", "stubs/qiskit_optimization.algorithms.OptimizationResult.x", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve", "stubs/qiskit_optimization.algorithms.SolutionSample", "stubs/qiskit_optimization.algorithms.SolutionSample.fval", "stubs/qiskit_optimization.algorithms.SolutionSample.probability", "stubs/qiskit_optimization.algorithms.SolutionSample.status", "stubs/qiskit_optimization.algorithms.SolutionSample.x", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve", "stubs/qiskit_optimization.applications.BinPacking", "stubs/qiskit_optimization.applications.BinPacking.get_figure", "stubs/qiskit_optimization.applications.BinPacking.interpret", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.Clique", "stubs/qiskit_optimization.applications.Clique.interpret", "stubs/qiskit_optimization.applications.Clique.size", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program", "stubs/qiskit_optimization.applications.ExactCover", "stubs/qiskit_optimization.applications.ExactCover.interpret", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program", "stubs/qiskit_optimization.applications.GraphOptimizationApplication", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph", "stubs/qiskit_optimization.applications.GraphPartition", "stubs/qiskit_optimization.applications.GraphPartition.interpret", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.Knapsack", "stubs/qiskit_optimization.applications.Knapsack.interpret", "stubs/qiskit_optimization.applications.Knapsack.max_weight", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program", "stubs/qiskit_optimization.applications.Maxcut", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result", "stubs/qiskit_optimization.applications.Maxcut.interpret", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program", "stubs/qiskit_optimization.applications.NumberPartition", "stubs/qiskit_optimization.applications.NumberPartition.interpret", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.OptimizationApplication", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program", "stubs/qiskit_optimization.applications.SKModel", "stubs/qiskit_optimization.applications.SKModel.disorder", "stubs/qiskit_optimization.applications.SKModel.graph", "stubs/qiskit_optimization.applications.SKModel.interpret", "stubs/qiskit_optimization.applications.SKModel.num_sites", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program", "stubs/qiskit_optimization.applications.SetPacking", "stubs/qiskit_optimization.applications.SetPacking.interpret", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.StableSet", "stubs/qiskit_optimization.applications.StableSet.interpret", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp", "stubs/qiskit_optimization.applications.Tsp.create_random_instance", "stubs/qiskit_optimization.applications.Tsp.interpret", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp.tsp_value", "stubs/qiskit_optimization.applications.VehicleRouting", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance", "stubs/qiskit_optimization.applications.VehicleRouting.depot", "stubs/qiskit_optimization.applications.VehicleRouting.interpret", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program", "stubs/qiskit_optimization.applications.VertexCover", "stubs/qiskit_optimization.applications.VertexCover.interpret", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program", "stubs/qiskit_optimization.converters.InequalityToEquality", "stubs/qiskit_optimization.converters.InequalityToEquality.convert", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret", "stubs/qiskit_optimization.converters.InequalityToEquality.mode", "stubs/qiskit_optimization.converters.IntegerToBinary", "stubs/qiskit_optimization.converters.IntegerToBinary.convert", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty", "stubs/qiskit_optimization.converters.MaximizeToMinimize", "stubs/qiskit_optimization.converters.MinimizeToMaximize", "stubs/qiskit_optimization.converters.QuadraticProgramConverter", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty", "stubs/qiskit_optimization.problems.Constraint", "stubs/qiskit_optimization.problems.Constraint.evaluate", "stubs/qiskit_optimization.problems.Constraint.name", "stubs/qiskit_optimization.problems.Constraint.rhs", "stubs/qiskit_optimization.problems.Constraint.sense", "stubs/qiskit_optimization.problems.LinearConstraint", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate", "stubs/qiskit_optimization.problems.LinearConstraint.linear", "stubs/qiskit_optimization.problems.LinearExpression", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__", "stubs/qiskit_optimization.problems.LinearExpression.bounds", "stubs/qiskit_optimization.problems.LinearExpression.coefficients", "stubs/qiskit_optimization.problems.LinearExpression.evaluate", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.LinearExpression.to_array", "stubs/qiskit_optimization.problems.LinearExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticConstraint", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic", "stubs/qiskit_optimization.problems.QuadraticExpression", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticObjective", "stubs/qiskit_optimization.problems.QuadraticObjective.constant", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticObjective.linear", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic", "stubs/qiskit_optimization.problems.QuadraticObjective.sense", "stubs/qiskit_optimization.problems.QuadraticProgramElement", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program", "stubs/qiskit_optimization.problems.Variable", "stubs/qiskit_optimization.problems.Variable.as_tuple", "stubs/qiskit_optimization.problems.Variable.lowerbound", "stubs/qiskit_optimization.problems.Variable.name", "stubs/qiskit_optimization.problems.Variable.upperbound", "stubs/qiskit_optimization.problems.Variable.vartype", "stubs/qiskit_optimization.runtime.QAOAClient", "stubs/qiskit_optimization.runtime.QAOAClient.alpha", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state", "stubs/qiskit_optimization.runtime.QAOAClient.mixer", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs", "stubs/qiskit_optimization.runtime.QAOAClient.reps", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies", "stubs/qiskit_optimization.runtime.QAOAProgram", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient", "stubs/qiskit_optimization.runtime.VQEClient.ansatz", "stubs/qiskit_optimization.runtime.VQEClient.backend", "stubs/qiskit_optimization.runtime.VQEClient.callback", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient.initial_point", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation", "stubs/qiskit_optimization.runtime.VQEClient.optimizer", "stubs/qiskit_optimization.runtime.VQEClient.program_id", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs", "stubs/qiskit_optimization.runtime.VQEClient.provider", "stubs/qiskit_optimization.runtime.VQEClient.shots", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgram", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgramResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history", "stubs/qiskit_optimization.translators.from_docplex_mp", "stubs/qiskit_optimization.translators.from_gurobipy", "stubs/qiskit_optimization.translators.from_ising", "stubs/qiskit_optimization.translators.to_docplex_mp", "stubs/qiskit_optimization.translators.to_gurobipy", "stubs/qiskit_optimization.translators.to_ising", "tutorials/01_quadratic_program", "tutorials/02_converters_for_quadratic_programs", "tutorials/03_minimum_eigen_optimizer", "tutorials/04_grover_optimizer", "tutorials/05_admm_optimizer", "tutorials/06_examples_max_cut_and_tsp", "tutorials/07_examples_vehicle_routing", "tutorials/08_cvar_optimization", "tutorials/09_application_classes", "tutorials/10_warm_start_qaoa", "tutorials/11_using_classical_optimization_solvers_and_models", "tutorials/12_qaoa_runtime", "tutorials/index"], "filenames": ["apidocs/qiskit_optimization.rst", "apidocs/qiskit_optimization.algorithms.rst", "apidocs/qiskit_optimization.applications.rst", "apidocs/qiskit_optimization.converters.rst", "apidocs/qiskit_optimization.problems.rst", "apidocs/qiskit_optimization.runtime.rst", "apidocs/qiskit_optimization.translators.rst", "getting_started.rst", "index.rst", "release_notes.rst", "stubs/qiskit_optimization.INFINITY.rst", "stubs/qiskit_optimization.QiskitOptimizationError.rst", "stubs/qiskit_optimization.QuadraticProgram.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.clear.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string.rst", "stubs/qiskit_optimization.QuadraticProgram.from_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info.rst", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_variable.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.is_feasible.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.maximize.rst", "stubs/qiskit_optimization.QuadraticProgram.minimize.rst", "stubs/qiskit_optimization.QuadraticProgram.name.rst", "stubs/qiskit_optimization.QuadraticProgram.objective.rst", "stubs/qiskit_optimization.QuadraticProgram.prettyprint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.status.rst", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables.rst", "stubs/qiskit_optimization.QuadraticProgram.to_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.variables.rst", "stubs/qiskit_optimization.QuadraticProgram.variables_index.rst", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.ADMMParameters.rst", "stubs/qiskit_optimization.algorithms.ADMMState.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.status.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.x.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.fval.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.probability.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.status.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.x.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve.rst", "stubs/qiskit_optimization.applications.BinPacking.rst", "stubs/qiskit_optimization.applications.BinPacking.get_figure.rst", "stubs/qiskit_optimization.applications.BinPacking.interpret.rst", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Clique.rst", "stubs/qiskit_optimization.applications.Clique.interpret.rst", "stubs/qiskit_optimization.applications.Clique.size.rst", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.ExactCover.rst", "stubs/qiskit_optimization.applications.ExactCover.interpret.rst", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph.rst", "stubs/qiskit_optimization.applications.GraphPartition.rst", "stubs/qiskit_optimization.applications.GraphPartition.interpret.rst", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Knapsack.rst", "stubs/qiskit_optimization.applications.Knapsack.interpret.rst", "stubs/qiskit_optimization.applications.Knapsack.max_weight.rst", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Maxcut.rst", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result.rst", "stubs/qiskit_optimization.applications.Maxcut.interpret.rst", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format.rst", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.NumberPartition.rst", "stubs/qiskit_optimization.applications.NumberPartition.interpret.rst", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SKModel.rst", "stubs/qiskit_optimization.applications.SKModel.disorder.rst", "stubs/qiskit_optimization.applications.SKModel.graph.rst", "stubs/qiskit_optimization.applications.SKModel.interpret.rst", "stubs/qiskit_optimization.applications.SKModel.num_sites.rst", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SetPacking.rst", "stubs/qiskit_optimization.applications.SetPacking.interpret.rst", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.StableSet.rst", "stubs/qiskit_optimization.applications.StableSet.interpret.rst", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.rst", "stubs/qiskit_optimization.applications.Tsp.create_random_instance.rst", "stubs/qiskit_optimization.applications.Tsp.interpret.rst", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format.rst", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.tsp_value.rst", "stubs/qiskit_optimization.applications.VehicleRouting.rst", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance.rst", "stubs/qiskit_optimization.applications.VehicleRouting.depot.rst", "stubs/qiskit_optimization.applications.VehicleRouting.interpret.rst", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles.rst", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.VertexCover.rst", "stubs/qiskit_optimization.applications.VertexCover.interpret.rst", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.convert.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.mode.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.convert.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.MaximizeToMinimize.rst", "stubs/qiskit_optimization.converters.MinimizeToMaximize.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty.rst", "stubs/qiskit_optimization.problems.Constraint.rst", "stubs/qiskit_optimization.problems.Constraint.evaluate.rst", "stubs/qiskit_optimization.problems.Constraint.name.rst", "stubs/qiskit_optimization.problems.Constraint.rhs.rst", "stubs/qiskit_optimization.problems.Constraint.sense.rst", "stubs/qiskit_optimization.problems.LinearConstraint.rst", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.LinearConstraint.linear.rst", "stubs/qiskit_optimization.problems.LinearExpression.rst", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.LinearExpression.bounds.rst", "stubs/qiskit_optimization.problems.LinearExpression.coefficients.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_array.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.constant.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.linear.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.sense.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program.rst", "stubs/qiskit_optimization.problems.Variable.rst", "stubs/qiskit_optimization.problems.Variable.as_tuple.rst", "stubs/qiskit_optimization.problems.Variable.lowerbound.rst", "stubs/qiskit_optimization.problems.Variable.name.rst", "stubs/qiskit_optimization.problems.Variable.upperbound.rst", "stubs/qiskit_optimization.problems.Variable.vartype.rst", "stubs/qiskit_optimization.runtime.QAOAClient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.alpha.rst", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz.rst", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state.rst", "stubs/qiskit_optimization.runtime.QAOAClient.mixer.rst", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level.rst", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.QAOAClient.reps.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.rst", "stubs/qiskit_optimization.runtime.VQEClient.ansatz.rst", "stubs/qiskit_optimization.runtime.VQEClient.backend.rst", "stubs/qiskit_optimization.runtime.VQEClient.callback.rst", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.initial_point.rst", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation.rst", "stubs/qiskit_optimization.runtime.VQEClient.optimizer.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_id.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.VQEClient.provider.rst", "stubs/qiskit_optimization.runtime.VQEClient.shots.rst", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate.rst", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgram.rst", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgramResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history.rst", "stubs/qiskit_optimization.translators.from_docplex_mp.rst", "stubs/qiskit_optimization.translators.from_gurobipy.rst", "stubs/qiskit_optimization.translators.from_ising.rst", "stubs/qiskit_optimization.translators.to_docplex_mp.rst", "stubs/qiskit_optimization.translators.to_gurobipy.rst", "stubs/qiskit_optimization.translators.to_ising.rst", "tutorials/01_quadratic_program.ipynb", "tutorials/02_converters_for_quadratic_programs.ipynb", "tutorials/03_minimum_eigen_optimizer.ipynb", "tutorials/04_grover_optimizer.ipynb", "tutorials/05_admm_optimizer.ipynb", "tutorials/06_examples_max_cut_and_tsp.ipynb", "tutorials/07_examples_vehicle_routing.ipynb", "tutorials/08_cvar_optimization.ipynb", "tutorials/09_application_classes.ipynb", "tutorials/10_warm_start_qaoa.ipynb", "tutorials/11_using_classical_optimization_solvers_and_models.ipynb", "tutorials/12_qaoa_runtime.ipynb", "tutorials/index.rst"], "titles": ["Qiskit Optimization API Reference", "Optimization algorithms (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms</span></code>)", "Optimization applications (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.applications</span></code>)", "Optimization converters (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.converters</span></code>)", "Optimization problems (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.problems</span></code>)", "Qiskit Optimization Runtime (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.runtime</span></code>)", "Quadratic program translators (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.translators</span></code>)", "\u306f\u3058\u3081\u306b", "Qiskit Optimization overview", "Release Notes", "INFINITY", "QiskitOptimizationError", "QuadraticProgram", "QuadraticProgram.binary_var", "QuadraticProgram.binary_var_dict", "QuadraticProgram.binary_var_list", "QuadraticProgram.clear", "QuadraticProgram.continuous_var", "QuadraticProgram.continuous_var_dict", "QuadraticProgram.continuous_var_list", "QuadraticProgram.export_as_lp_string", "QuadraticProgram.from_ising", "QuadraticProgram.get_feasibility_info", "QuadraticProgram.get_linear_constraint", "QuadraticProgram.get_num_binary_vars", "QuadraticProgram.get_num_continuous_vars", "QuadraticProgram.get_num_integer_vars", "QuadraticProgram.get_num_linear_constraints", "QuadraticProgram.get_num_quadratic_constraints", "QuadraticProgram.get_num_vars", "QuadraticProgram.get_quadratic_constraint", "QuadraticProgram.get_variable", "QuadraticProgram.integer_var", "QuadraticProgram.integer_var_dict", "QuadraticProgram.integer_var_list", "QuadraticProgram.is_feasible", "QuadraticProgram.linear_constraint", "QuadraticProgram.linear_constraints", "QuadraticProgram.linear_constraints_index", "QuadraticProgram.maximize", "QuadraticProgram.minimize", "QuadraticProgram.name", "QuadraticProgram.objective", "QuadraticProgram.prettyprint", "QuadraticProgram.quadratic_constraint", "QuadraticProgram.quadratic_constraints", "QuadraticProgram.quadratic_constraints_index", "QuadraticProgram.read_from_lp_file", "QuadraticProgram.remove_linear_constraint", "QuadraticProgram.remove_quadratic_constraint", "QuadraticProgram.status", "QuadraticProgram.substitute_variables", "QuadraticProgram.to_ising", "QuadraticProgram.variables", "QuadraticProgram.variables_index", "QuadraticProgram.write_to_lp_file", "ADMMOptimizationResult", "ADMMOptimizationResult.state", "ADMMOptimizer", "ADMMOptimizer.get_compatibility_msg", "ADMMOptimizer.parameters", "ADMMOptimizer.solve", "ADMMParameters", "ADMMState", "BaseAggregator", "BaseAggregator.aggregate", "CobylaOptimizer", "CobylaOptimizer.get_compatibility_msg", "CobylaOptimizer.solve", "CplexOptimizer", "CplexOptimizer.cplex_parameters", "CplexOptimizer.disp", "CplexOptimizer.get_compatibility_msg", "CplexOptimizer.is_cplex_installed", "CplexOptimizer.solve", "GoemansWilliamsonOptimizationResult", "GoemansWilliamsonOptimizationResult.sdp_solution", "GoemansWilliamsonOptimizer", "GoemansWilliamsonOptimizer.get_compatibility_msg", "GoemansWilliamsonOptimizer.max_cut_value", "GoemansWilliamsonOptimizer.solve", "GroverOptimizationResult", "GroverOptimizationResult.intermediate_fval", "GroverOptimizationResult.n_input_qubits", "GroverOptimizationResult.n_output_qubits", "GroverOptimizationResult.operation_counts", "GroverOptimizationResult.raw_samples", "GroverOptimizationResult.threshold", "GroverOptimizer", "GroverOptimizer.get_compatibility_msg", "GroverOptimizer.quantum_instance", "GroverOptimizer.solve", "GurobiOptimizer", "GurobiOptimizer.disp", "GurobiOptimizer.get_compatibility_msg", "GurobiOptimizer.is_gurobi_installed", "GurobiOptimizer.solve", "IntermediateResult", "IntermediateResult.ALL_ITERATIONS", "IntermediateResult.LAST_ITERATION", "IntermediateResult.NO_ITERATIONS", "MeanAggregator", "MeanAggregator.aggregate", "MinimumEigenOptimizationResult", "MinimumEigenOptimizationResult.min_eigen_solver_result", "MinimumEigenOptimizationResult.raw_samples", "MinimumEigenOptimizer", "MinimumEigenOptimizer.get_compatibility_msg", "MinimumEigenOptimizer.min_eigen_solver", "MinimumEigenOptimizer.solve", "MultiStartOptimizer", "MultiStartOptimizer.clip", "MultiStartOptimizer.multi_start_solve", "MultiStartOptimizer.trials", "OptimizationAlgorithm", "OptimizationAlgorithm.get_compatibility_msg", "OptimizationAlgorithm.is_compatible", "OptimizationAlgorithm.solve", "OptimizationResult", "OptimizationResult.__getitem__", "OptimizationResult.fval", "OptimizationResult.get_correlations", "OptimizationResult.prettyprint", "OptimizationResult.raw_results", "OptimizationResult.samples", "OptimizationResult.status", "OptimizationResult.variable_names", "OptimizationResult.variables", "OptimizationResult.variables_dict", "OptimizationResult.x", "OptimizationResultStatus", "OptimizationResultStatus.FAILURE", "OptimizationResultStatus.INFEASIBLE", "OptimizationResultStatus.SUCCESS", "RecursiveMinimumEigenOptimizationResult", "RecursiveMinimumEigenOptimizationResult.history", "RecursiveMinimumEigenOptimizationResult.replacements", "RecursiveMinimumEigenOptimizer", "RecursiveMinimumEigenOptimizer.get_compatibility_msg", "RecursiveMinimumEigenOptimizer.solve", "SlsqpOptimizationResult", "SlsqpOptimizationResult.fx", "SlsqpOptimizationResult.imode", "SlsqpOptimizationResult.its", "SlsqpOptimizationResult.smode", "SlsqpOptimizer", "SlsqpOptimizer.get_compatibility_msg", "SlsqpOptimizer.solve", "SolutionSample", "SolutionSample.fval", "SolutionSample.probability", "SolutionSample.status", "SolutionSample.x", "WarmStartQAOAFactory", "WarmStartQAOAFactory.create_initial_state", "WarmStartQAOAFactory.create_initial_variables", "WarmStartQAOAFactory.create_mixer", "WarmStartQAOAOptimizer", "WarmStartQAOAOptimizer.solve", "BinPacking", "BinPacking.get_figure", "BinPacking.interpret", "BinPacking.to_quadratic_program", "Clique", "Clique.interpret", "Clique.size", "Clique.to_quadratic_program", "ExactCover", "ExactCover.interpret", "ExactCover.to_quadratic_program", "GraphOptimizationApplication", "GraphOptimizationApplication.draw", "GraphOptimizationApplication.graph", "GraphOptimizationApplication.random_graph", "GraphPartition", "GraphPartition.interpret", "GraphPartition.to_quadratic_program", "Knapsack", "Knapsack.interpret", "Knapsack.max_weight", "Knapsack.to_quadratic_program", "Maxcut", "Maxcut.get_gset_result", "Maxcut.interpret", "Maxcut.parse_gset_format", "Maxcut.to_quadratic_program", "NumberPartition", "NumberPartition.interpret", "NumberPartition.to_quadratic_program", "OptimizationApplication", "OptimizationApplication.interpret", "OptimizationApplication.sample_most_likely", "OptimizationApplication.to_quadratic_program", "SKModel", "SKModel.disorder", "SKModel.graph", "SKModel.interpret", "SKModel.num_sites", "SKModel.to_quadratic_program", "SetPacking", "SetPacking.interpret", "SetPacking.to_quadratic_program", "StableSet", "StableSet.interpret", "StableSet.to_quadratic_program", "Tsp", "Tsp.create_random_instance", "Tsp.interpret", "Tsp.parse_tsplib_format", "Tsp.to_quadratic_program", "Tsp.tsp_value", "VehicleRouting", "VehicleRouting.create_random_instance", "VehicleRouting.depot", "VehicleRouting.interpret", "VehicleRouting.num_vehicles", "VehicleRouting.to_quadratic_program", "VertexCover", "VertexCover.interpret", "VertexCover.to_quadratic_program", "InequalityToEquality", "InequalityToEquality.convert", "InequalityToEquality.interpret", "InequalityToEquality.mode", "IntegerToBinary", "IntegerToBinary.convert", "IntegerToBinary.interpret", "LinearEqualityToPenalty", "LinearEqualityToPenalty.convert", "LinearEqualityToPenalty.interpret", "LinearEqualityToPenalty.penalty", "LinearInequalityToPenalty", "LinearInequalityToPenalty.convert", "LinearInequalityToPenalty.interpret", "LinearInequalityToPenalty.penalty", "MaximizeToMinimize", "MinimizeToMaximize", "QuadraticProgramConverter", "QuadraticProgramConverter.convert", "QuadraticProgramConverter.interpret", "QuadraticProgramToQubo", "QuadraticProgramToQubo.convert", "QuadraticProgramToQubo.get_compatibility_msg", "QuadraticProgramToQubo.interpret", "QuadraticProgramToQubo.is_compatible", "QuadraticProgramToQubo.penalty", "Constraint", "Constraint.evaluate", "Constraint.name", "Constraint.rhs", "Constraint.sense", "LinearConstraint", "LinearConstraint.evaluate", "LinearConstraint.linear", "LinearExpression", "LinearExpression.__getitem__", "LinearExpression.bounds", "LinearExpression.coefficients", "LinearExpression.evaluate", "LinearExpression.evaluate_gradient", "LinearExpression.to_array", "LinearExpression.to_dict", "QuadraticConstraint", "QuadraticConstraint.evaluate", "QuadraticConstraint.linear", "QuadraticConstraint.quadratic", "QuadraticExpression", "QuadraticExpression.__getitem__", "QuadraticExpression.bounds", "QuadraticExpression.coefficients", "QuadraticExpression.evaluate", "QuadraticExpression.evaluate_gradient", "QuadraticExpression.to_array", "QuadraticExpression.to_dict", "QuadraticObjective", "QuadraticObjective.constant", "QuadraticObjective.evaluate", "QuadraticObjective.evaluate_gradient", "QuadraticObjective.linear", "QuadraticObjective.quadratic", "QuadraticObjective.sense", "QuadraticProgramElement", "QuadraticProgramElement.quadratic_program", "Variable", "Variable.as_tuple", "Variable.lowerbound", "Variable.name", "Variable.upperbound", "Variable.vartype", "QAOAClient", "QAOAClient.alpha", "QAOAClient.ansatz", "QAOAClient.initial_state", "QAOAClient.mixer", "QAOAClient.optimization_level", "QAOAClient.program_inputs", "QAOAClient.reps", "QAOAClient.use_initial_mapping", "QAOAClient.use_pulse_efficient", "QAOAClient.use_swap_strategies", "QAOAProgram", "QAOAProgram.compute_minimum_eigenvalue", "VQEClient", "VQEClient.ansatz", "VQEClient.backend", "VQEClient.callback", "VQEClient.compute_minimum_eigenvalue", "VQEClient.initial_point", "VQEClient.measurement_error_mitigation", "VQEClient.optimizer", "VQEClient.program_id", "VQEClient.program_inputs", "VQEClient.provider", "VQEClient.shots", "VQEClient.store_intermediate", "VQEClient.supports_aux_operators", "VQEProgram", "VQEProgram.compute_minimum_eigenvalue", "VQEProgram.supports_aux_operators", "VQEProgramResult", "VQERuntimeResult", "VQERuntimeResult.job_id", "VQERuntimeResult.optimizer_history", "from_docplex_mp", "from_gurobipy", "from_ising", "to_docplex_mp", "to_gurobipy", "to_ising", "\u4e8c\u6b21\u8a08\u753b\u6cd5", "\u4e8c\u6b21\u8a08\u753b\u6cd5\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc", "\u6700\u5c0f\u56fa\u6709\u5024\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc (Minimum Eigen Optimizer)", "\u30b0\u30ed\u30fc\u30d0\u30fc\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc", "ADMM \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc", "\u6700\u5927\u30ab\u30c3\u30c8\u554f\u984c\u3068\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u5de1\u56de\u554f\u984c", "\u914d\u8eca\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0", "CVaR\u3092\u4f7f\u7528\u3057\u305f\u5909\u5206\u91cf\u5b50\u6700\u9069\u5316\u306e\u6539\u5584", "\u6700\u9069\u5316\u554f\u984c\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9", "\u30a6\u30a9\u30fc\u30e0\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u91cf\u5b50\u6700\u9069\u5316", "Qiskit Optimization \u3067\u306e\u53e4\u5178\u7684\u6700\u9069\u5316\u30bd\u30eb\u30d0\u30fc\u3068\u30e2\u30c7\u30eb\u306e\u4f7f\u7528", "QAOA \u30e9\u30f3\u30bf\u30a4\u30e0", "Optimization\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"], "terms": {"covers": [0, 8], "the": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "whole": [0, 8], "range": [0, 8, 48, 49, 119, 153, 157, 334, 335, 336, 338, 340], "from": [0, 7, 8, 21, 47, 66, 69, 79, 92, 99, 103, 104, 106, 110, 118, 121, 123, 137, 140, 142, 144, 145, 155, 157, 162, 166, 169, 176, 180, 182, 184, 185, 188, 191, 193, 198, 201, 204, 206, 208, 209, 212, 216, 219, 220, 224, 229, 233, 240, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "high": [0, 8, 206, 212], "-level": [0, 8, 283], "modeling": [0, 8], "of": [0, 3, 4, 5, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 65, 66, 68, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 96, 97, 101, 102, 103, 104, 105, 106, 109, 110, 112, 113, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 139, 140, 141, 143, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 177, 178, 179, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 199, 200, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 220, 222, 223, 226, 229, 231, 232, 233, 237, 239, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 297, 300, 301, 302, 306, 308, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "problems": [0, 1, 2, 8, 58, 66, 72, 94, 145, 331, 333, 335, 340], "with": [0, 8, 11, 22, 51, 55, 58, 59, 61, 62, 66, 67, 68, 72, 74, 78, 81, 88, 89, 91, 94, 96, 107, 110, 115, 116, 117, 118, 137, 138, 140, 145, 146, 147, 161, 171, 193, 221, 224, 225, 227, 228, 231, 241, 242, 244, 260, 261, 272, 273, 276, 277, 281, 289, 300, 301, 306, 308, 317, 321, 329, 333, 334, 335, 340], "automatic": [0, 8, 340], "conversion": [0, 3, 8, 227, 230, 231, 234, 239, 240, 245], "to": [0, 3, 4, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 29, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 47, 50, 51, 52, 54, 55, 59, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 77, 78, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 94, 96, 97, 102, 106, 107, 109, 112, 115, 116, 117, 118, 119, 120, 133, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 162, 163, 166, 169, 170, 174, 176, 180, 181, 183, 185, 188, 190, 192, 198, 201, 202, 204, 205, 207, 209, 211, 216, 217, 219, 220, 221, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 238, 240, 241, 242, 244, 247, 252, 253, 255, 258, 259, 260, 261, 263, 264, 265, 267, 270, 271, 272, 273, 276, 277, 283, 284, 289, 290, 294, 297, 298, 300, 301, 302, 306, 308, 311, 314, 316, 317, 319, 323, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "different": [0, 3, 8, 88, 106, 137, 140, 157, 336], "required": [0, 8, 238, 335, 340], "representations": [0, 3, 8], "suite": [0, 8], "easy": [0, 8, 190], "-to": [0, 8, 36, 44, 190, 224], "-use": [0, 8], "quantum": [0, 8, 58, 88, 90, 91, 153, 154, 156, 157, 224, 289, 300, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "algorithms": [0, 5, 8, 114, 118], "that": [0, 5, 8, 38, 43, 46, 51, 54, 58, 63, 65, 72, 80, 81, 94, 102, 110, 112, 118, 137, 140, 153, 154, 157, 193, 221, 222, 225, 227, 228, 229, 231, 233, 240, 243, 254, 266, 281, 289, 300, 302, 315, 316, 318, 323, 324, 329, 335, 340], "are": [0, 4, 8, 14, 15, 18, 19, 21, 22, 29, 33, 34, 51, 52, 62, 63, 66, 98, 99, 100, 110, 137, 145, 193, 220, 227, 231, 232, 240, 266, 289, 294, 300, 302, 316, 325, 328, 329, 335, 340], "ready": [0, 8], "run": [0, 8, 90, 158, 289, 297, 298, 300, 302, 316, 333, 334, 335, 336, 340], "on": [0, 3, 8, 29, 58, 66, 74, 96, 137, 163, 174, 181, 202, 205, 211, 217, 227, 231, 240, 289, 300, 302, 316, 333, 334, 336, 340], "classical": [0, 8, 58, 289, 300, 302, 316, 331, 333, 334, 335, 336, 340], "simulators": [0, 8], "as": [0, 8, 12, 14, 15, 16, 18, 19, 20, 21, 22, 33, 34, 35, 51, 62, 63, 66, 69, 92, 106, 118, 119, 128, 137, 145, 156, 161, 163, 164, 168, 170, 174, 175, 178, 181, 182, 183, 184, 187, 191, 193, 196, 200, 202, 203, 205, 207, 211, 214, 217, 218, 231, 241, 254, 260, 261, 266, 272, 273, 284, 289, 300, 302, 316, 319, 320, 324, 325, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340], "well": [0, 8, 12, 16, 106, 289, 300], "real": [0, 8, 339, 340], "devices": [0, 8], "via": [0, 8, 14, 15, 18, 19, 33, 34, 62, 66, 134, 135, 145, 254, 266, 333, 335, 339], "this": [0, 3, 12, 43, 47, 52, 55, 58, 59, 62, 66, 67, 69, 72, 74, 78, 89, 91, 92, 94, 96, 106, 107, 110, 111, 113, 115, 116, 119, 122, 137, 138, 145, 146, 150, 151, 153, 157, 163, 166, 224, 231, 232, 242, 244, 283, 284, 289, 300, 302, 311, 316, 319, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "enables": [0, 8], "efficient": [0, 8], "using": [0, 8, 51, 61, 68, 72, 74, 91, 94, 96, 109, 117, 139, 147, 157, 158, 190, 231, 239, 261, 273, 289, 308, 329, 331, 333, 334, 336, 338, 339, 340], "docplex": [0, 8, 323, 326, 332, 333, 336, 338], "uniform": [0, 8, 289], "interface": [0, 8, 281], "between": [0, 3, 6, 8, 153, 157, 335], "problem": [0, 3, 4, 8, 21, 43, 51, 52, 56, 59, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 80, 81, 88, 89, 91, 92, 94, 96, 103, 106, 107, 109, 112, 115, 116, 117, 118, 126, 127, 134, 137, 138, 139, 140, 145, 146, 147, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 190, 192, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 289, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "allows": [0, 8, 118, 289, 300], "users": [0, 8, 118, 157, 231], "solve": [0, 8, 58, 61, 66, 68, 74, 77, 80, 91, 94, 96, 109, 112, 117, 139, 145, 147, 157, 158, 331, 332, 333, 334, 335, 336, 338, 339], "large": [0, 8], "set": [0, 3, 8, 11, 62, 91, 199, 201, 202, 204, 289, 300, 301, 302, 306, 316, 317, 336, 340], "variational": [0, 8, 137, 331, 332, 335, 336, 340], "such": [0, 8, 22, 35, 106, 319, 320, 329], "approximate": [0, 8, 77, 106, 301, 306, 317, 332, 334], "algorithm": [0, 8, 56, 58, 61, 75, 77, 80, 81, 87, 88, 90, 103, 106, 112, 118, 123, 125, 130, 131, 132, 133, 134, 137, 140, 289, 331, 332, 334, 335, 336, 337, 338, 340], "qaoa": [0, 8, 106, 137, 153, 154, 155, 156, 157, 289, 295, 300, 330, 331, 332, 333, 337, 339], "grover": [0, 8, 81, 87, 88, 91, 332], "adaptive": [0, 8, 88, 332], "search": [0, 8, 88, 332], "groveroptimizer": [0, 8, 86, 330, 331, 333], "leveraging": [0, 8, 340], "fundamental": [0, 8], "provided": [0, 8, 22, 35, 106], "by": [0, 8, 11, 43, 51, 56, 62, 77, 88, 101, 102, 103, 106, 110, 118, 134, 135, 137, 140, 157, 159, 220, 224, 231, 254, 266, 283, 289, 300, 302, 316, 329, 335, 339, 340], "terra": [0, 8, 289, 331], "furthermore": [0, 8], "modular": [0, 8], "design": [0, 8], "it": [0, 8, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 43, 44, 50, 51, 106, 153, 157, 163, 170, 174, 181, 202, 205, 211, 217, 235, 236, 289, 300, 302, 315, 316, 318, 323, 333], "be": [0, 4, 8, 29, 39, 40, 43, 47, 50, 58, 59, 61, 62, 65, 66, 67, 68, 69, 72, 74, 77, 78, 81, 88, 89, 91, 92, 94, 96, 97, 102, 106, 107, 109, 110, 115, 116, 117, 118, 119, 137, 138, 139, 140, 145, 146, 147, 153, 156, 157, 158, 163, 170, 174, 181, 202, 205, 211, 217, 220, 221, 225, 227, 228, 231, 232, 240, 241, 242, 244, 247, 252, 254, 255, 258, 259, 263, 266, 267, 270, 271, 276, 277, 283, 289, 300, 301, 302, 306, 315, 316, 317, 318, 323, 324, 326, 327, 328, 333, 335, 336, 340], "easily": [0, 8], "extended": [0, 8], "and": [0, 3, 5, 6, 8, 11, 12, 14, 15, 18, 19, 21, 33, 34, 36, 44, 47, 51, 58, 62, 66, 67, 75, 79, 81, 89, 97, 103, 106, 107, 110, 118, 119, 128, 134, 136, 137, 138, 145, 146, 153, 157, 160, 193, 208, 231, 232, 238, 242, 254, 256, 262, 266, 268, 284, 289, 300, 301, 302, 306, 308, 316, 317, 319, 320, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "facilitates": [0, 8], "rapid": [0, 8], "development": [0, 8], "testing": [0, 8], "new": [0, 8, 118, 194, 224, 225, 240, 241, 254, 266, 283], "compatible": [0, 8, 61, 67, 89, 107, 109, 116, 138, 146, 158, 242, 244, 335], "optimizers": [0, 8, 110], "also": [0, 8, 94, 302, 333], "for": [0, 4, 8, 11, 21, 23, 30, 31, 43, 52, 58, 62, 63, 64, 66, 69, 70, 75, 77, 81, 88, 92, 106, 110, 111, 113, 114, 118, 123, 137, 145, 153, 155, 157, 159, 163, 166, 167, 170, 171, 172, 173, 174, 177, 179, 181, 183, 186, 189, 193, 195, 199, 202, 205, 206, 211, 212, 214, 217, 220, 223, 224, 237, 247, 258, 259, 266, 270, 271, 276, 277, 281, 289, 300, 301, 302, 306, 311, 315, 316, 317, 318, 323, 325, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340], "validation": [0, 8], "benchmarking": [0, 8], "supports": [0, 12, 231, 302, 315, 316, 318, 323, 324], "quadratically": [0, 12], "constrained": [0, 12, 289, 300, 332], "quadratic": [0, 12, 13, 16, 17, 20, 21, 28, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 77, 80, 106, 145, 237, 246, 251, 254, 262, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 281, 282, 283, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 338, 340], "programs": [0, 5, 237], "simplicity": 0, "we": [0, 266, 301, 306, 317, 336, 340], "refer": [0, 261, 273], "them": [0, 66, 102, 145], "just": [0, 75], "binary": [0, 12, 13, 14, 15, 24, 52, 62, 79, 106, 182, 190, 191, 224, 225, 226, 231, 232, 323, 324, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "integer": [0, 12, 26, 32, 33, 34, 106, 119, 220, 224, 225, 226, 289, 300, 323, 324, 328, 329, 330, 335, 339, 340], "continuous": [0, 12, 17, 18, 19, 25, 58, 62, 66, 67, 145, 146, 157, 220, 323, 324, 328, 329, 333, 338], "variables": [0, 12, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 29, 33, 34, 51, 52, 53, 54, 56, 62, 63, 66, 67, 75, 81, 103, 106, 118, 119, 127, 128, 134, 136, 137, 140, 145, 146, 152, 153, 154, 155, 156, 157, 220, 223, 224, 225, 226, 229, 231, 232, 233, 247, 252, 258, 259, 261, 263, 267, 270, 271, 273, 276, 277, 283, 297, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "equality": [0, 12, 36, 44, 62, 106, 137, 220, 221, 227, 228, 231, 240], "inequality": [0, 12, 220, 221, 228, 231, 232], "constraints": [0, 12, 16, 22, 27, 28, 37, 45, 52, 62, 106, 137, 220, 221, 227, 228, 231, 232, 240, 241, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "class": [0, 11, 12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320, 335], "has": [0, 14, 15, 18, 19, 33, 34, 91, 106, 110, 119, 289, 300, 301, 306, 316, 317, 319, 325, 329, 339, 340], "vast": 0, "amount": 0, "relevant": [0, 63], "applications": [0, 170, 189, 340], "while": 0, "still": [0, 51], "being": [0, 63, 134, 136, 140, 141, 335], "efficiently": 0, "representable": 0, "matrices": 0, "vectors": 0, "some": [0, 43, 231, 335], "very": 0, "interesting": 0, "sub": [0, 110, 311, 329, 335], "-classes": [0, 311], "convex": [0, 74, 96, 333], "which": [0, 22, 231], "can": [0, 50, 58, 59, 62, 66, 67, 72, 78, 89, 94, 107, 115, 116, 119, 137, 138, 145, 146, 153, 158, 163, 170, 174, 181, 202, 205, 211, 217, 242, 244, 254, 255, 266, 267, 289, 300, 301, 302, 306, 311, 315, 316, 317, 318, 333, 340], "solved": [0, 59, 61, 63, 66, 67, 68, 72, 74, 78, 89, 91, 94, 96, 107, 109, 110, 115, 116, 117, 118, 138, 139, 145, 146, 147, 158, 221, 225, 228, 232, 241, 242, 244], "unconstrained": [0, 106, 227, 228, 330, 331, 336], "qubo": [0, 58, 62, 81, 88, 89, 91, 103, 106, 107, 138, 231, 240, 241, 242, 330, 333, 334, 335, 337, 338, 340], "cover": [0, 167, 169, 217, 219, 337], "many": [0, 331], "np": [0, 190, 193, 331, 333, 334, 335, 336, 338, 340], "-complete": 0, ".e": [0, 16, 21, 52, 67, 89, 107, 138, 146, 242, 266, 289, 300, 302, 316, 325, 328, 340], ".,": [0, 13, 14, 15, 16, 17, 18, 19, 21, 32, 33, 34, 36, 44, 51, 52, 58, 62, 67, 89, 106, 107, 137, 138, 146, 157, 193, 242, 266, 325, 328, 329, 331, 336, 339], "classically": [0, 336], "intractable": 0, "representation": [0, 12, 195, 251, 254, 262, 266, 274, 283, 329, 335, 336], "program": [0, 12, 13, 16, 17, 20, 21, 32, 36, 37, 41, 44, 45, 47, 50, 53, 55, 77, 251, 262, 274, 295, 302, 310, 311, 316, 323, 324, 325, 326, 327, 333, 334, 335, 338, 340], "supporting": 0, "in": [0, 5, 21, 22, 35, 47, 52, 58, 62, 66, 72, 75, 79, 81, 88, 90, 110, 114, 118, 120, 129, 131, 134, 137, 140, 145, 153, 156, 157, 161, 173, 182, 184, 190, 193, 207, 208, 222, 224, 226, 229, 230, 233, 234, 237, 241, 245, 266, 272, 273, 283, 289, 300, 301, 302, 306, 316, 317, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "addition": 0, "standard": [0, 153, 157, 289, 300, 302, 316, 340], "python": [0, 7, 335, 339], "errors": [0, 11], "will": [0, 58, 62, 88, 94, 106, 137, 157, 220, 227, 231, 240, 289, 298, 299, 315, 318, 335, 340], "raise": [0, 74, 96, 335], "error": [0, 11, 289, 300, 302, 308, 316, 329, 335, 340], "if": [0, 10, 13, 14, 15, 17, 18, 19, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 43, 44, 47, 48, 49, 51, 52, 55, 58, 59, 61, 62, 66, 68, 69, 73, 74, 77, 78, 91, 92, 95, 96, 106, 109, 110, 115, 116, 117, 118, 119, 137, 145, 147, 153, 157, 158, 208, 220, 221, 225, 227, 228, 229, 231, 232, 233, 235, 236, 240, 244, 256, 268, 276, 277, 283, 289, 294, 297, 298, 300, 301, 302, 306, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 340], "circumstances": 0, "cannot": [0, 55, 91, 329], "proceed": 0, "completion": [0, 145], "constant": [0, 21, 39, 40, 51, 52, 274, 275, 325, 328, 329, 335], "infinity": [0, 329], "common": 2, "is": [3, 8, 13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 35, 36, 43, 44, 48, 49, 51, 52, 55, 58, 59, 61, 62, 63, 66, 67, 68, 69, 72, 73, 74, 77, 78, 81, 88, 89, 91, 92, 95, 96, 106, 107, 110, 115, 116, 117, 119, 134, 135, 136, 137, 138, 145, 146, 147, 153, 157, 158, 164, 166, 168, 171, 178, 187, 193, 200, 203, 208, 218, 221, 224, 225, 227, 228, 231, 232, 235, 236, 240, 242, 244, 272, 273, 283, 289, 300, 302, 308, 315, 316, 318, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "having": 3, "convert": [3, 10, 162, 166, 169, 176, 180, 185, 188, 190, 192, 198, 201, 204, 209, 216, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 238, 240, 241, 243, 323, 330, 336, 338, 339], "functionality": 3, "go": 3, "given": [3, 23, 30, 31, 59, 61, 67, 68, 72, 74, 77, 78, 89, 91, 94, 96, 107, 109, 112, 115, 116, 117, 138, 139, 146, 147, 158, 193, 222, 226, 229, 233, 240, 242, 244, 247, 252, 258, 259, 263, 270, 271, 276, 277, 289, 301, 306, 317, 336, 340], "quadraticprogram": [3, 4, 6, 59, 61, 63, 66, 67, 68, 69, 72, 74, 78, 80, 89, 91, 92, 94, 96, 106, 107, 109, 112, 115, 116, 117, 118, 137, 138, 139, 145, 146, 147, 158, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 224, 225, 228, 232, 238, 240, 241, 242, 244, 246, 254, 266, 281, 282, 283, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340], "interpret": [3, 82, 161, 164, 168, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 238, 239, 243, 330], "result": [3, 22, 35, 56, 61, 65, 66, 68, 69, 74, 81, 91, 92, 96, 102, 103, 104, 106, 109, 112, 117, 118, 122, 123, 134, 137, 139, 140, 145, 147, 158, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 238, 239, 243, 301, 306, 317, 319, 320, 333, 334, 335, 337, 338, 339, 340], "based": [3, 163, 174, 181, 202, 205, 211, 217, 334, 336], "original": [3, 81, 103, 106, 118, 123, 171, 222, 226, 229, 233, 243, 336], "before": [3, 82, 157, 339], "return": [3, 11, 52, 106, 118, 119, 123, 145, 208, 291, 294, 295, 303, 309, 310, 311, 312, 313, 328, 331, 334, 335, 338, 340], "an": [3, 4, 8, 22, 32, 35, 48, 49, 51, 55, 56, 58, 66, 69, 72, 74, 75, 76, 79, 88, 91, 92, 94, 96, 106, 110, 114, 118, 119, 130, 132, 134, 135, 137, 145, 148, 154, 156, 157, 163, 166, 169, 170, 171, 174, 181, 184, 189, 190, 193, 198, 202, 205, 211, 217, 221, 225, 228, 232, 237, 241, 254, 260, 261, 266, 272, 273, 289, 300, 302, 315, 316, 318, 325, 328, 336, 340], "appropriate": 3, "optimizationresult": [3, 56, 68, 74, 75, 81, 91, 96, 103, 112, 117, 134, 135, 139, 140, 147, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 331, 333], "structures": 4, "defining": [4, 335], "following": [4, 231, 232, 323], "classes": 4, "not": [4, 22, 23, 30, 35, 36, 47, 48, 49, 52, 55, 58, 61, 62, 66, 69, 71, 74, 91, 92, 93, 96, 106, 109, 118, 153, 157, 158, 208, 221, 225, 228, 231, 272, 273, 276, 277, 283, 289, 294, 299, 300, 301, 302, 306, 308, 314, 316, 317, 329, 335, 336, 340], "intended": 4, "instantiated": 4, "directly": [4, 163, 170, 174, 181, 202, 205, 211, 217, 329, 339], "objects": [4, 6, 65, 102, 281, 319, 320], "these": [4, 289, 300, 301, 302, 306, 316, 317], "types": [4, 335], "available": 4, "within": [4, 66, 69, 92, 106, 145], "embed": 5, "algorithmic": [5, 66, 145], "interfaces": 5, "facilitate": 5, "usage": [5, 193], "scripts": 5, "cloud": [5, 316], "other": [6, 51, 62, 110, 193], "optimization": [6, 7, 11, 51, 56, 58, 59, 62, 63, 66, 67, 68, 69, 72, 74, 75, 78, 81, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 145, 146, 147, 148, 157, 158, 159, 163, 166, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 237, 240, 242, 244, 274, 289, 294, 300, 302, 314, 316, 330, 331, 332, 333, 334, 336, 337, 338], "models": [6, 231], "or": [6, 10, 13, 14, 15, 17, 18, 19, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 44, 48, 49, 51, 62, 66, 69, 71, 92, 93, 106, 110, 118, 119, 129, 134, 136, 145, 157, 158, 163, 170, 174, 181, 190, 191, 193, 202, 205, 211, 217, 222, 225, 226, 229, 231, 233, 254, 255, 261, 266, 267, 272, 273, 289, 299, 300, 302, 308, 314, 316, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit": [7, 11, 66, 69, 92, 106, 114, 118, 137, 145, 220, 224, 237, 240, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "\u305d\u306e": [7, 329, 331, 332, 334, 335, 338, 340], "\u30b5\u30dd\u30fc\u30c8": [7, 329, 331, 333, 334, 339], "\u74b0\u5883": 7, "\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0": 7, "\u8a73\u8ff0": 7, "\u8aac\u660e": [7, 329, 330, 331, 332, 335, 338, 340], "\u4e3b\u8981": [7, 335], "\u30d1\u30c3\u30b1\u30fc\u30b8": [7, 333, 335, 337], "\u4f9d\u5b58": [7, 330, 338, 339], "\u307e\u3059": [7, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u307e\u305a\u305d\u308c": 7, "\u53c2\u7167": [7, 137, 157, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 231, 330, 331, 332, 334, 335, 339, 340], "\u304f\u3060": [7, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340], "\u3055\u3044": [7, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340], "\u3053\u3053": [7, 329, 330, 331, 332, 333, 334, 335, 338, 340], "\u3059\u308b": [7, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u60c5\u5831": [7, 331, 332, 334, 340], "\u5f93\u3063": [7, 335], "\u56fa\u6709": [7, 332, 333, 334, 335, 337, 340], "\u8ffd\u52a0": [7, 330, 331, 334], "\u3057\u307e\u3057\u3087": [7, 330], "\u30c7\u30d5\u30a9\u30eb\u30c8": [7, 330, 335, 340], "\u30b3\u30fc\u30c9": 7, "\u307e\u305f": [7, 329, 331, 333, 334, 335], "\u30d7\u30ed\u30b0\u30e9\u30e0": [7, 335, 340], "\u3042\u308b\u3044": [7, 334], "\u4e21\u65b9": [7, 334, 339], "\u306a\u3044": [7, 331, 333, 334, 337, 338, 340], "\u305d\u308c\u3089": [7, 334], "\u4f7f\u7528": [7, 329, 330, 331, 333, 334, 338, 340], "\u3067\u304d": [7, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340], "\u3088\u3046": [7, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "\u6a5f\u80fd": [7, 330, 331, 333, 334, 337, 338, 340], "\u3044\u304f\u3064\u304b": [7, 330, 334, 339, 340], "\u3042\u308a": [7, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "\u3002ibm": 7, "cplex": [7, 47, 69, 70, 71, 72, 73, 329, 331, 333, 339], "cvxpy": 7, "matplotlib": [7, 333, 334, 335, 336, 337, 340], "\u8a72\u5f53": [7, 334], "\u8a73\u7d30": [7, 330, 331, 334, 339, 340], "\u306b\u3064\u3044\u3066": [7, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340], "\u30ed\u30fc\u30ab\u30eb": [7, 340], "\u304b\u3089": [7, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "\u958b\u59cb": [7, 330], "\u6700\u3082": [7, 332, 334, 340], "\u7c21\u5358": [7, 329, 333, 334, 337, 338], "\u65b9\u6cd5": [7, 329, 330, 331, 333, 334, 335, 336, 338, 340], "\u59cb\u3081\u308b": 7, "\u3053\u3068": [7, 329, 330, 331, 333, 335, 337, 338, 339], "\u4eee\u60f3": 7, "visualization": 7, "\u540c\u69d8": [7, 334, 335, 339], "\u4ee5\u4e0b": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340], "\u30ea\u30b9\u30c8": [7, 329, 340], "pip": [7, 339], "install": [7, 339], "[optimization": 7, "zsh": 7, "\u30e6\u30fc\u30b6\u30fc": [7, 337], "\u65b0\u3057\u3044": [7, 333, 334, 335], "\u30d0\u30fc\u30b8\u30e7\u30f3": [7, 339, 340], "macos": 7, "\u30c7\u30d5\u30a9\u30eb\u30c8\u30b7\u30a7\u30eb": 7, "\u5834\u5408": [7, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "\u5f15\u7528": 7, "\u56f2\u3080": 7, "\u5fc5\u8981": [7, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340], "]'": [7, 339], "\u30bd\u30fc\u30b9": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 95, 96, 97, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 130, 134, 137, 138, 139, 140, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 284, 289, 295, 300, 301, 302, 306, 311, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328], "\u306b\u3088\u308a": [7, 329, 331, 333, 334, 335, 338, 340], "package": 7, "index": [7, 23, 30, 31, 38, 46, 48, 49, 54, 118, 119, 211, 212, 213, 255, 261, 273, 329, 340], "pypi": [7, 69, 339], "\u30ea\u30dd\u30b8\u30c8\u30ea": 7, "\u4f7f\u3046": [7, 331], "\u4ee3\u308f\u308a": 7, "\u6700\u65b0": [7, 335, 339], "\u30a2\u30af\u30bb\u30b9": [7, 329, 333, 340], "\u3053\u308c": [7, 330, 331, 332, 333, 334, 335, 338, 340], "\u8abf\u67fb": [7, 334, 340], "\u305f\u308a": [7, 331], "\u62e1\u5f35": [7, 334, 335], "\u3088\u308a": [7, 329, 331, 334, 335], "\u52b9\u679c": 7, "\u3067\u304d\u308b": [7, 330, 333, 334, 335, 337, 340], "\u306a\u308a": [7, 329, 330, 331, 332, 334, 335, 338, 339, 340], "\u304a\u308a": [7, 330, 332, 334, 340], "\u5909\u66f4": [7, 334, 335], "\u65b0\u898f": 7, "\u3042\u308b": [7, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340], "\u306e\u3067": 7, "\u307e\u305a": [7, 331, 333, 334, 335, 338, 339, 340], "\u6307\u793a": 7, "\u3060\u3055\u3044": [7, 334], "installing": 7, "source": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u3082\u306e": 7, "\u540c\u3058": [7, 329, 330, 331, 333, 335, 337, 338, 339], "\u958b\u767a": 7, "\u30af\u30ed\u30fc\u30f3": 7, "git": 7, "clone": 7, "https": [7, 21, 52, 66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 289, 300, 325, 328, 329, 339], ":/": [7, 21, 52, 66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 289, 300, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "github": [7, 21, 52, 325, 328], ".com": [7, 21, 52, 69, 325, 328], "/qiskit": [7, 21, 52, 325, 328], "-optimization": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".git": 7, "\u30ec\u30dd\u30b8\u30c8\u30ea": 7, "``": 7, "\u3068\u3044\u3046": [7, 334, 335, 338], "\u540d\u524d": [7, 329, 334, 338], "\u30fb\u30d5\u30a9\u30eb\u30c0": 7, "\u4f5c\u6210": [7, 329, 331, 332, 333, 334, 335, 338], "cd": 7, "\u3082\u3057": [7, 331, 338], "\u30c6\u30b9\u30c8": [7, 333], "\u5b9f\u884c": [7, 329, 332, 333, 335], "\u6587\u6cd5": 7, "\u30c1\u30a7\u30c3\u30af": [7, 335], "\u305f\u3044": [7, 335, 339, 340], "\u5411\u3051": [7, 334], "\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc": 7, "requirements": 7, "-dev": 7, ".txt": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u7de8\u96c6": 7, "\u53ef\u80fd": [7, 330, 331, 332, 333, 334, 335, 338, 339, 340], "\u30e2\u30fc\u30c9": 7, "\u30d7\u30ed\u30b8\u30a7\u30af\u30c8": 7, "\u306a\u3057": [7, 330, 331, 332, 338], "\u624b\u9806": [7, 332, 333, 335], "ibm": [7, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "[cplex": [7, 339], "]\u300f": 7, "lp": [7, 20, 47, 55], "\u30d5\u30a1\u30a4\u30eb": 7, "\u8aad\u307f\u53d6\u308a": 7, ".cplex": [7, 69, 335], "\u30e9\u30c3\u30d1\u30fc": 7, "cplexoptimizer": [7, 118, 333, 338, 339], "\u6709\u52b9": 7, "\u73fe\u5728": [7, 330, 332, 339], "\u307e\u305b": [7, 329, 330, 332], "\u3053\u306e": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30b3\u30de\u30f3\u30c9": 7, "[cvx": 7, "\u30b3\u30de\u30f3\u30c9": 7, "\u308c\u308b": [7, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340], "goemanswilliamsonoptimizer": 7, "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": [7, 334, 335, 338, 340], "\u3068\u3057\u3066": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "goemans": [7, 75, 77, 80], "-williamson": [7, 75, 77, 80], "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": [7, 330, 331, 332, 334, 335, 336, 338, 340], "[matplotlib": 7, "\u30b0\u30e9\u30d5": [7, 332, 334, 335, 337], "\u6700\u9069": [7, 329, 330, 331, 332, 333, 335, 340], "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3": 7, "\u30af\u30e9\u30b9": [7, 329, 330, 331, 333, 335, 338], "draw": [7, 171, 334, 340], "\u30e1\u30bd\u30c3\u30c9": [7, 329, 330, 334, 335], "gurobipy": [7, 92, 324, 327, 339], "[gurobi": [7, 339], "gurobioptimizer": [7, 339], "\u3057\u307e\u3059": [7, 333, 335], "dive": 7, "into": [7, 14, 15, 18, 19, 33, 34, 88, 106, 137, 157, 162, 166, 169, 175, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 222, 224, 225, 228, 231, 232, 238, 239, 241, 243, 323, 324], "tutorials": [7, 8], "find": [7, 66, 88, 106, 133, 145, 340], "out": [7, 23, 30, 48, 49, 119, 163, 170, 174, 181, 202, 205, 211, 217], "about": [7, 118], "open": [8, 55, 340], "-source": 8, "framework": 8, "module": [8, 11, 66, 69, 92, 106, 114, 145, 237], "getting": [8, 334], "started": 8, "1e": [10, 17, 18, 19, 32, 33, 34, 145, 283, 330, 334, 338], "string": [10, 20, 43, 55, 67, 72, 94, 119, 122, 146, 182, 191, 329, 340], "number": [10, 14, 15, 18, 19, 24, 25, 26, 27, 28, 29, 33, 34, 62, 66, 77, 81, 83, 84, 88, 110, 113, 137, 140, 143, 145, 157, 159, 173, 186, 188, 193, 197, 206, 211, 212, 215, 229, 233, 276, 277, 289, 300, 302, 308, 313, 316, 334, 335, 336, 340], "floating": 10, "point": [10, 289, 300, 302, 307, 316, 340], "possible": [10, 75, 220], "exception": [11, 72, 74, 91, 96, 335], "message": [11, 59, 67, 78, 89, 107, 115, 138, 140, 144, 146, 242], "returned": [11, 22, 35, 63, 97, 140, 301, 306, 317], "\u2019s": [11, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 88, 114, 163, 235, 236, 237, 302], "_traceback": 11, ".with": 11, "(tb": 11, "self": [11, 308, 335], "._": 11, "traceback": 11, "__": [11, 335], "tb": 11, "name": [12, 13, 14, 15, 16, 17, 18, 19, 23, 30, 31, 32, 33, 34, 36, 38, 41, 43, 44, 46, 48, 49, 51, 54, 55, 118, 119, 128, 184, 208, 246, 248, 251, 255, 262, 283, 284, 286, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "\u30d9\u30fc\u30b9\u30af\u30e9\u30b9": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "object": [12, 62, 63, 81, 104, 112, 118, 123, 140, 148, 153, 281, 319, 320, 340], "\u30d1\u30e9\u30e1\u30fc\u30bf": [12, 13, 14, 15, 17, 18, 19, 21, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 72, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 96, 102, 103, 106, 107, 109, 110, 112, 115, 116, 117, 118, 119, 134, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 186, 187, 190, 191, 193, 196, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 289, 300, 301, 302, 306, 316, 317, 323, 324, 325, 326, 327, 328, 333, 334, 335], "str": [12, 13, 14, 15, 17, 18, 19, 20, 23, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 54, 55, 59, 67, 69, 70, 72, 78, 81, 85, 89, 94, 107, 115, 119, 122, 126, 128, 134, 136, 138, 140, 144, 146, 184, 208, 220, 223, 242, 246, 247, 248, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 286, 289, 295, 300, 302, 309, 310, 311, 316, 321, 322, 334, 335, 338, 340], "attributes": [12, 56, 58, 66, 69, 75, 81, 88, 92, 97, 103, 106, 110, 118, 130, 134, 140, 145, 148, 157, 163, 170, 174, 177, 181, 193, 202, 205, 211, 217, 220, 227, 231, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "methods": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 101, 103, 106, 110, 114, 118, 119, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 232, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "none": [13, 14, 15, 16, 17, 18, 19, 21, 29, 32, 33, 34, 36, 39, 40, 44, 47, 48, 49, 51, 55, 58, 66, 69, 75, 81, 88, 92, 103, 106, 118, 119, 129, 137, 140, 157, 159, 163, 165, 166, 171, 173, 193, 194, 206, 212, 227, 231, 240, 274, 289, 295, 300, 301, 302, 306, 311, 316, 317, 323, 335, 340], "adds": [13, 17, 32, 36, 44], "variable": [13, 14, 15, 17, 18, 19, 21, 31, 32, 33, 34, 43, 50, 51, 52, 53, 54, 56, 66, 75, 81, 103, 110, 118, 119, 126, 127, 128, 129, 134, 136, 139, 140, 145, 155, 164, 168, 178, 200, 203, 218, 221, 225, 232, 252, 254, 255, 256, 258, 259, 261, 263, 266, 267, 268, 270, 271, 273, 276, 277, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "optional": [13, 14, 15, 17, 18, 19, 29, 32, 33, 34, 36, 44, 51, 58, 66, 69, 70, 75, 76, 81, 86, 88, 103, 105, 106, 118, 120, 129, 137, 140, 141, 142, 143, 144, 157, 159, 163, 165, 171, 173, 206, 212, 227, 230, 231, 234, 240, 245, 289, 291, 292, 294, 300, 301, 302, 304, 306, 307, 312, 316, 317, 322, 323, 333], "empty": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 55, 59, 72, 78, 94, 115, 329], "default": [13, 14, 15, 17, 18, 19, 21, 32, 33, 34, 36, 43, 44, 62, 88, 106, 137, 145, 157, 159, 163, 289, 300, 302, 316, 325, 329, 334, 340], ".g": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 51, 106, 137, 193, 289, 300, 302, 316], "used": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 58, 62, 66, 69, 81, 83, 84, 88, 90, 92, 106, 137, 145, 156, 157, 223, 224, 230, 234, 245, 247, 283, 289, 294, 300, 302, 316, 323, 333, 340], "\u623b\u308a\u5024": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328], "added": [13, 17, 32, 36, 44, 227, 231, 240], "\u4f8b\u5916": [13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 36, 43, 44, 47, 48, 49, 51, 52, 55, 61, 68, 74, 88, 91, 96, 106, 109, 110, 117, 118, 119, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 281, 283, 289, 301, 306, 317, 323, 324, 325, 326, 327, 328], "qiskitoptimizationerror": [13, 14, 15, 17, 18, 19, 21, 22, 32, 33, 34, 36, 43, 44, 51, 52, 61, 68, 74, 91, 96, 106, 109, 117, 118, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 283, 289, 323, 324, 325, 326, 327, 328, 329, 331], "already": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 154, 156], "occupied": [13, 17, 32], "keys": [14, 15, 18, 19, 33, 34, 254, 261, 266, 273, 289, 300, 302, 316], "key": [14, 15, 18, 19, 33, 34, 119, 134, 136, 267, 289, 300, 302, 316, 336, 338], "_format": [14, 15, 18, 19, 33, 34], "{}": [14, 15, 18, 19, 33, 34, 329, 331], "uses": [14, 15, 18, 19, 33, 34, 88, 157, 254, 266], "var": [14, 15, 18, 19, 33, 34, 118, 224, 331], "construct": [14, 15, 18, 19, 33, 34, 231, 289, 333, 334, 335, 340], "dictionary": [14, 18, 33, 38, 46, 54, 128, 134, 136, 254, 261, 266, 273, 289, 300, 302, 309, 316], "(s": [14, 15, 18, 19, 33, 34, 331, 338], ").": [14, 15, 18, 19, 33, 34, 62, 66, 106, 137, 145, 156, 224, 226, 289, 326, 327, 331, 332, 333, 334, 335, 336, 340], "format": [14, 15, 18, 19, 20, 33, 34, 163, 170, 174, 181, 182, 184, 190, 202, 205, 208, 211, 217, 241, 329, 331, 336, 338], "/index": [14, 15, 18, 19, 33, 34, 329], "union": [14, 15, 17, 18, 19, 22, 23, 30, 31, 32, 33, 34, 35, 36, 39, 40, 44, 48, 49, 51, 75, 81, 88, 103, 106, 118, 119, 134, 137, 140, 157, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 183, 187, 190, 191, 193, 196, 200, 202, 203, 205, 207, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 293, 300, 302, 309, 316], "int": [14, 15, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 48, 49, 51, 54, 62, 66, 77, 81, 83, 84, 85, 88, 110, 113, 119, 134, 136, 137, 140, 142, 143, 145, 157, 159, 163, 164, 165, 167, 168, 171, 173, 175, 177, 178, 179, 182, 183, 186, 187, 193, 196, 197, 199, 200, 203, 206, 207, 210, 211, 212, 213, 214, 215, 218, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 294, 296, 300, 302, 313, 316, 330, 331, 334, 336, 337, 338, 339, 340], "sequence": [14, 15, 18, 19, 33, 34], "interpreted": [14, 15, 18, 19, 33, 34], "otherwise": [14, 15, 18, 19, 33, 34, 35, 51, 67, 89, 107, 116, 138, 145, 146, 220, 231, 235, 236, 242, 244, 315, 318, 325, 336], "elements": [14, 15, 18, 19, 33, 34, 323, 324, 326, 327], "converted": [14, 15, 18, 19, 33, 34, 89, 91, 107, 138, 221, 222, 224, 225, 226, 228, 229, 231, 232, 233, 241, 242, 243], "strings": [14, 15, 18, 19, 33, 34, 43], "substituted": [14, 15, 18, 19, 33, 34, 51, 134, 136, 329], "dict": [14, 18, 33, 36, 38, 39, 40, 44, 46, 51, 54, 69, 70, 81, 85, 128, 134, 136, 171, 182, 191, 247, 251, 252, 254, 258, 259, 261, 262, 263, 266, 270, 271, 273, 274, 276, 277, 289, 295, 300, 302, 309, 311, 316, 322, 329, 340], "mapping": [14, 18, 33, 62, 224], "names": [14, 18, 33, 126, 254, 261, 266, 267, 273, 329], "instances": [14, 15, 18, 19, 33, 34], "taken": [14, 15, 18, 19, 33, 34], "less": [14, 15, 18, 19, 33, 34, 36, 44, 77], "than": [14, 15, 18, 19, 21, 33, 34, 66, 77, 110, 145, 283, 289, 325], "one": [14, 15, 18, 19, 33, 34, 66, 75, 88, 106, 110, 137, 145, 157, 221, 224, 241], "instantiation": [14, 15, 18, 19, 33, 34], "attempted": [14, 15, 18, 19, 33, 34], "more": [14, 15, 18, 19, 21, 33, 34, 66, 110, 145, 325], "substitution": [14, 15, 18, 19, 33, 34, 50, 51, 139, 329], "nested": [14, 15, 18, 19, 33, 34], "list": [15, 19, 22, 23, 30, 34, 35, 36, 37, 39, 40, 44, 45, 53, 56, 65, 75, 79, 80, 81, 86, 88, 102, 103, 105, 106, 118, 124, 126, 127, 134, 135, 137, 140, 154, 155, 156, 157, 159, 161, 163, 164, 167, 168, 170, 174, 175, 177, 178, 181, 183, 186, 187, 196, 199, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 258, 259, 262, 263, 266, 270, 271, 274, 276, 277, 301, 306, 317, 331, 333, 334, 335, 340], "clear": 16, "clears": 16, "deletes": 16, "all": [16, 29, 62, 72, 75, 94, 98, 211, 212, 213, 220, 281, 289, 336, 338, 340], "objective": [16, 39, 40, 42, 81, 103, 106, 118, 120, 140, 141, 145, 149, 227, 231, 232, 240, 274, 275, 276, 277, 278, 279, 280, 323, 324, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340], "function": [16, 56, 66, 75, 81, 88, 103, 106, 118, 120, 134, 140, 141, 145, 149, 231, 232, 274, 275, 276, 277, 278, 279, 280, 302, 316, 319, 320, 323, 324, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "lowerbound": [17, 18, 19, 32, 33, 34, 224, 283, 284, 285, 329, 339], "upperbound": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 287, 329, 330, 339], "float": [17, 18, 19, 21, 22, 32, 33, 34, 35, 36, 39, 40, 44, 51, 56, 62, 63, 66, 75, 79, 81, 82, 87, 88, 103, 106, 110, 111, 118, 119, 120, 128, 134, 137, 140, 145, 149, 150, 153, 154, 155, 156, 157, 210, 222, 226, 227, 229, 230, 231, 233, 234, 240, 243, 245, 246, 247, 249, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 275, 276, 277, 283, 284, 285, 287, 289, 290, 300, 302, 316, 323, 325, 328, 331, 340], "lower": [18, 19, 33, 34, 51, 66, 110, 145, 256, 268, 285, 329, 336], "bound": [18, 19, 33, 34, 66, 110, 145, 256, 268, 285, 329], "upper": [18, 19, 33, 34, 51, 66, 110, 145, 256, 266, 268, 329], "export": [20, 329], "returns": [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 38, 41, 42, 43, 45, 46, 53, 54, 57, 59, 60, 67, 70, 71, 72, 73, 76, 77, 78, 80, 86, 89, 93, 94, 95, 104, 105, 107, 108, 111, 113, 115, 116, 119, 120, 122, 124, 125, 126, 127, 128, 129, 135, 136, 138, 141, 142, 143, 144, 146, 157, 223, 230, 234, 242, 244, 245, 248, 249, 250, 253, 255, 256, 257, 260, 261, 264, 265, 267, 268, 269, 272, 273, 275, 278, 279, 280, 282, 284, 285, 286, 287, 288, 292, 293, 296, 304, 305, 307, 308, 314, 326, 327, 336, 340], "representing": [20, 43, 106, 122, 163, 170, 174, 181, 202, 205, 211, 217], "qubit": [21, 52, 301, 306, 317, 325, 328, 332, 337, 340], "_op": [21, 52, 325, 328], "offset": [21, 39, 40, 52, 274, 325, 328, 331, 334, 335, 336, 337], "linear": [21, 23, 27, 36, 37, 38, 39, 40, 44, 48, 106, 137, 231, 241, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 274, 278, 323, 324, 325, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339], "false": [21, 35, 62, 69, 92, 116, 145, 244, 261, 272, 273, 289, 300, 302, 315, 316, 318, 325, 340], "create": [21, 154, 155, 156, 157, 206, 212, 325, 331, 334, 336, 338], "operator": [21, 52, 289, 295, 301, 306, 311, 315, 317, 318, 325, 328, 331, 335, 340], "shift": [21, 325], "value": [21, 22, 35, 43, 52, 56, 62, 63, 75, 77, 79, 81, 82, 88, 97, 103, 110, 111, 118, 119, 120, 128, 130, 134, 136, 137, 140, 141, 149, 157, 206, 210, 212, 231, 258, 259, 270, 271, 276, 277, 289, 300, 315, 318, 323, 325, 328, 331, 332, 333, 334, 336, 337, 338, 339, 340], "mapped": [21, 52, 325, 328], "qubits": [21, 52, 81, 83, 84, 88, 325, 328, 337], "same": [21, 22, 51, 52, 319, 320, 325, 328, 337], "order": [21, 52, 118, 207, 325, 328, 331, 334], "-th": [21, 52, 255, 325, 328], "see": [21, 52, 69, 140, 289, 325, 328], "-terra": [21, 52, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "/issues": [21, 52, 325, 328], "details": [21, 52, 69, 325, 328], "operatorbase": [21, 289, 293, 300, 301, 306, 317, 325, 328], "ising": [21, 52, 106, 325, 328, 331, 334, 336], "hamiltonian": [21, 52, 106, 193, 289, 300, 325, 328, 334, 337, 340], "bool": [21, 35, 62, 69, 71, 77, 92, 93, 116, 145, 157, 244, 261, 272, 273, 289, 297, 298, 299, 300, 302, 308, 314, 315, 316, 318, 325, 339], "true": [21, 35, 62, 73, 77, 95, 116, 157, 244, 289, 297, 298, 315, 318, 325, 334, 338, 340], "treated": [21, 325], "term": [21, 77, 231, 232, 262, 325, 336], "since": [21, 72, 94, 325], "\\}": [21, 193, 325, 330, 331, 332, 333, 335, 338], "else": [21, 69, 92, 334, 335, 336], "there": [21, 43, 77, 88, 137, 193, 220, 231, 325], "pauli": [21, 325, 335, 340], "xs": [21, 325], "any": [21, 69, 70, 112, 118, 123, 231, 246, 251, 254, 256, 262, 266, 268, 274, 283, 289, 295, 300, 302, 309, 311, 316, 322, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "zs": [21, 325], "notimplementederror": [21, 325], "input": [21, 22, 81, 83, 206, 212, 325], "listop": [21, 325], "get": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 59, 67, 72, 78, 85, 89, 94, 107, 115, 118, 121, 138, 146, 160, 182, 242, 301, 306, 317, 331, 335, 340], "whether": [22, 35, 59, 67, 69, 71, 72, 78, 89, 92, 93, 94, 97, 107, 115, 116, 137, 138, 146, 242, 244, 261, 272, 273, 289, 299, 300, 302, 308, 314, 315, 316, 318, 340], "solution": [22, 35, 62, 75, 76, 81, 86, 105, 106, 118, 124, 132, 133, 140, 148, 155, 160, 182, 210, 334, 335, 337, 339], "feasible": [22, 35, 62, 66, 133, 334, 335], "along": 22, "violations": [22, 66], "type": [22, 29, 52, 88, 106, 118, 137, 208, 210, 220, 221, 225, 283, 284, 288, 340], "ndarray": [22, 35, 36, 39, 40, 44, 56, 75, 76, 79, 81, 103, 112, 118, 121, 129, 134, 140, 141, 152, 155, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 182, 183, 184, 187, 190, 191, 196, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 239, 243, 247, 251, 252, 254, 258, 259, 260, 262, 263, 266, 270, 271, 272, 274, 276, 277, 289, 300, 302, 307, 316], "param": [22, 210], "optimizer": [22, 35, 59, 60, 61, 62, 66, 67, 68, 69, 72, 74, 78, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 134, 137, 138, 139, 140, 142, 144, 145, 146, 147, 157, 158, 242, 244, 289, 300, 302, 309, 316, 319, 320, 322, 330, 333, 334, 335, 340], "[variable": 22, "]:": [22, 157, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 231, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "violated": 22, "[constraint": 22, "len": [22, 334, 340], "total": [22, 24, 25, 26, 29, 187, 210, 301, 306, 317, 334, 338, 339], "vars": [22, 339], "constraint": [23, 30, 36, 38, 44, 46, 48, 49, 62, 66, 225, 228, 231, 232, 251, 252, 253, 262, 263, 264, 265], "linearconstraint": [23, 36, 37], "corresponding": [23, 30, 31, 106, 120, 128, 137, 164, 168, 178, 200, 203, 218, 253, 255, 260, 261, 264, 265, 267, 272, 273, 284, 323, 324, 325, 326, 327], "indexerror": [23, 30, 48, 49, 119], "size": [23, 30, 66, 163, 165, 166], "keyerror": [23, 30, 48, 49, 119], "does": [23, 30, 47, 48, 49, 55, 62, 106, 228, 276, 277], "exist": [23, 30, 47, 48, 49, 52, 328], "vartype": [29, 283, 284, 288, 338], "specified": [29, 58, 66, 88, 106, 110, 112, 137, 145, 157, 163, 166, 170, 174, 181, 202, 205, 211, 217, 221, 289, 300], "filtered": [29, 331], "counted": 29, "quadraticconstraint": [30, 44, 45], "sense": [36, 44, 221, 235, 236, 246, 250, 251, 262, 274, 280, 329, 330], "<=": [36, 44, 329, 339], "rhs": [36, 44, 246, 249, 251, 262, 329, 330, 335], "form": [36, 44, 88, 106, 137, 157, 238, 239, 241, 272, 273, 274, 334, 337, 340], "(linear": [36, 118, 145, 329, 330, 331, 340], "spmatrix": [36, 39, 40, 44, 251, 254, 262, 266, 274], "coefficients": [36, 39, 40, 44, 251, 254, 257, 260, 261, 262, 266, 269, 272, 273, 274, 329], "left": [36, 247, 252, 253, 263, 264, 265, 334], "-hand": [36, 44, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265], "side": [36, 44], "constraintsense": [36, 44, 246, 250, 251, 262, 329], "eq": [36, 44, 224, 329], "denote": [36, 44], "equal": [36, 44, 118, 119, 159], "\u300f.": [36, 44], "ge": [36, 44, 329, 330], "greater": [36, 44, 283, 335], "-than": [36, 44], "-or": [36, 44], "-equal": [36, 44], "le": [36, 44, 329, 330], "right": [36, 44, 246, 249, 251, 262, 334, 336], "exists": [36, 44, 228, 232, 328], "valid": [36, 51, 289, 300], "property": [37, 38, 41, 42, 45, 46, 50, 53, 54, 57, 60, 70, 71, 76, 82, 83, 84, 85, 86, 87, 90, 93, 104, 105, 108, 111, 113, 120, 123, 124, 125, 126, 127, 128, 129, 135, 136, 141, 142, 143, 144, 165, 172, 179, 195, 197, 213, 215, 223, 230, 234, 245, 248, 249, 250, 253, 256, 257, 264, 265, 268, 269, 275, 278, 279, 280, 282, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 321, 322], "maps": [38, 46, 54], "its": [38, 46, 54, 62, 140, 143, 207, 254, 266, 289, 300, 302, 316, 334], "maximize": [39, 330, 334, 337, 338, 339], "sets": [39, 40, 183], "maximized": 39, "part": [39, 40, 262, 274, 275, 278, 279, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "],": [39, 40, 44, 145, 224, 262, 266, 273, 274, 329, 331, 334, 335, 336, 337, 338, 340], "tuple": [39, 40, 44, 51, 112, 134, 135, 136, 262, 266, 267, 273, 274, 284, 328, 331, 334, 340], "created": [39, 40, 88, 106, 137, 154, 156, 157, 162, 166, 169, 176, 180, 185, 188, 198, 201, 204, 206, 209, 212, 216, 219], "minimize": [40, 112, 329, 331, 332, 333, 334, 337, 338, 340], "minimized": 40, "quadraticobjective": 42, "prettyprint": [43, 122, 329, 336, 339], "wrap": 43, "pretty": [43, 122], "printed": [43, 122], "text": [43, 231, 232, 329, 340], "width": 43, "output": [43, 66, 69, 81, 84, 92, 145, 272, 273], "disabled": 43, "setting": [43, 71, 93], "note": [43, 231, 323, 324, 329], "might": 43, "exceed": 43, "example": [43, 266], "long": 43, "won": 43, "\u2019t": [43, 158], "wrapped": [43, 66, 69, 92, 145], "non": [43, 72, 94, 326, 327, 339], "-printable": 43, "(x": [44, 193, 231, 232, 329, 331, 332, 333, 334, 335, 336, 338, 339], "read": [47, 184, 208], "filename": [47, 55, 184, 208], "loads": 47, "file": [47, 55, 184, 208, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "loaded": [47, 323, 324], "filenotfounderror": 47, "method": [47, 59, 62, 66, 77, 78, 110, 112, 115, 116, 145, 244, 311, 329, 333], "requires": 47, "installed": [47, 69, 73, 92, 95, 333], "present": 47, "pythonpath": 47, "remove": [48, 49, 329], "status": [50, 56, 75, 81, 103, 118, 125, 130, 134, 140, 145, 148, 151, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340], "quadraticprogramstatus": [50, 329], "infeasible": [50, 132, 139, 329, 331], "due": [50, 74, 91, 96, 139, 329, 335], "substitute": [51, 329], "constants": [51, 329], "substitutes": 51, "replace": 51, "'x": [51, 329], "':": [51, 118, 289, 300, 302, 316], "means": 51, "]]": [51, 145, 207, 214, 301, 306, 317, 329, 334, 340], "weighted": [51, 106], "need": [51, 65, 102, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "copy": [51, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "everything": 51, "reference": [51, 66, 145, 333, 336], "make": [51, 329], "sure": 51, "indices": [51, 161, 164, 175, 178, 183, 203, 207, 218, 254, 261, 266, 267, 273], "matched": 51, "correctly": 51, "bounds": [51, 256, 268, 329, 339], "updated": [51, 63], "accordingly": 51, "('": [51, 118, 329], "',": [51, 224, 289, 300, 302, 316, 329], ")}": [51, 329, 331, 333, 335, 338], "substituting": [51, 134, 136], ".status": [51, 329, 331, 340], ".valid": 51, "gets": [51, 329], ".infeasible": [51, 329], "invalid": [51, 88, 106, 137], "follows": [51, 118, 289, 300, 302, 316, 324], "multiple": 51, "times": [51, 329, 333], "coefficient": [51, 255, 267, 325], "zero": [51, 66, 110, 145], "write": [55, 92], "writes": 55, "model": [55, 163, 166, 193, 194, 198, 323, 324, 326, 327, 329, 332, 333, 336, 338, 339], "written": 55, "directory": [55, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "my": [55, 329, 335], "_problem": [55, 159, 177, 186, 205, 211, 335, 338], ".lp": 55, "appended": 55, "end": [55, 97, 231, 232, 329, 332, 338, 339], "\u300f,": 55, "suffix": 55, "oserror": 55, "docplexexception": 55, "fval": [56, 75, 81, 82, 103, 118, 120, 134, 140, 148, 149, 331, 333, 339], "state": [56, 57, 63, 106, 137, 153, 154, 157, 191, 289, 292, 300, 301, 306, 315, 317, 318, 331, 333, 340], "admmoptimization": 56, "optimal": [56, 62, 75, 103, 106, 134, 336], "found": [56, 59, 62, 75, 78, 103, 115, 118, 120, 129, 134, 335, 339], "admm": [56, 58, 61, 62, 63], "admmstate": [56, 57], "internal": [56, 63, 137, 336], "computation": [56, 63], "optimizationresultstatus": [56, 75, 81, 103, 118, 125, 134, 140, 151, 331], "termination": [56, 75, 81, 103, 118, 125, 130, 134, 140], "_optimizer": [58, 134, 135, 137, 331, 332, 333, 334, 335], "params": [58, 333, 336], "optimizationalgorithm": [58, 66, 69, 77, 88, 92, 106, 110, 137, 145, 157], "implementation": [58, 62, 63, 153, 157], "-based": [58, 340], "heuristic": [58, 289, 340], "introduced": [58, 137, 289, 300], "].": [58, 137, 153, 157, 177, 193, 231, 289, 331, 335, 336, 338, 340], "references": 58, "[1": [58, 137, 157, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 231, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gambella": [58, 333], "simonetto": [58, 333], "multi": [58, 66, 110, 112, 145, 333], "-block": [58, 333], "heuristics": [58, 333], "mixed": [58, 333], "-binary": [58, 224, 333], "computers": [58, 333], "arxiv": [58, 137, 157, 193, 224, 231, 289, 300, 330, 331, 332, 333, 334, 335, 338], "preprint": [58, 331, 332, 333], "instance": [58, 88, 90, 91, 104, 106, 110, 134, 135, 137, 157, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 206, 208, 209, 212, 216, 219, 281, 301, 306, 317, 335, 336, 337], "effectively": 58, "then": [58, 62, 66, 106, 110, 145, 153, 157, 289, 298, 315, 318, 340], "minimumeigenoptimizer": [58, 134, 135, 137, 157, 332, 333, 334, 335, 336, 337, 338, 339, 340], "initialized": 58, "numpyminimumeigensolver": [58, 137, 331, 332, 333, 334, 335, 336, 337, 338], "slsqpoptimizer": 58, "admmparameters": [58, 60, 333], "checks": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244], "implementing": [59, 78, 115, 116, 244], "check": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244, 335], "compatibility": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244], "incompatibility": [59, 67, 74, 78, 89, 91, 96, 107, 115, 138, 146, 242], "no": [59, 66, 78, 88, 100, 106, 115, 225, 329, 330, 331, 332, 334, 337, 338, 340], "issues": [59, 78, 115], "were": [59, 78, 115], "parameters": [60, 62, 66, 69, 70, 137, 145, 289, 300, 302, 316, 335, 339, 340], "current": [60, 289, 300, 302, 316], "tries": [61, 68, 74, 91, 96, 109, 117, 139, 147, 158], "solves": [61, 68, 74, 91, 96, 109, 117, 147, 158], "admmoptimizationresult": 61, "applied": [61, 66, 68, 74, 91, 96, 109, 112, 117, 137, 139, 145, 147, 158], "rho": [62, 63, 333], "_initial": [62, 63, 157, 289, 333, 340], "factor": [62, 88, 106, 137, 157, 227, 230, 231, 232, 234, 240, 245, 333, 336], "_c": [62, 333], "beta": [62, 333, 338, 340], "maxiter": [62, 289, 300, 302, 316, 333, 336], "tol": [62, 333], "max": [62, 77, 79, 80, 159, 177, 179, 181, 183, 185, 334, 335, 337, 338], "_time": [62, 334, 337], "inf": 62, "three": [62, 333], "_block": [62, 333], "vary": 62, "_rho": 62, "tau": 62, "_incr": 62, "_decr": 62, "mu": [62, 336, 338], "_res": [62, 338], "_merit": 62, "warm": [62, 153, 154, 155, 157, 158, 289, 300, 338], "_start": [62, 157, 338], "defines": [62, 97, 140, 335], "their": [62, 77, 157, 301, 306, 311, 317], "values": [62, 63, 66, 75, 77, 79, 81, 103, 110, 118, 128, 129, 145, 152, 155, 177, 247, 252, 254, 258, 259, 263, 266, 270, 271, 276, 277, 289, 300, 301, 302, 306, 316, 317, 319, 320, 331, 332, 333, 334, 336, 337, 338, 339, 340], "initial": [62, 63, 66, 110, 145, 153, 154, 155, 156, 157, 289, 292, 300, 302, 307, 316, 331, 338, 340], "parameter": [62, 63, 66, 110, 145, 153, 157, 289, 300, 302, 316, 319, 320, 335, 338], "penalizing": 62, "when": [62, 66, 88, 106, 118, 137, 145, 153, 157, 163, 165, 166, 171, 289, 329, 340], "penalization": 62, "decision": [62, 297], "maximum": [62, 66, 145, 159, 177, 181, 206, 212], "iterations": [62, 88, 140, 143, 145, 333, 336], "tolerance": [62, 66], "residual": 62, "convergence": 62, "running": [62, 340], "time": [62, 333, 334, 337, 339], "seconds": 62, "boolean": [62, 289, 340], "flag": [62, 289, 340], "select": 62, "block": 62, "rule": 62, "update": [62, 340], "increases": 62, "at": [62, 97, 134, 135, 137, 193, 266, 301, 306, 317, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "each": [62, 63, 81, 85, 97, 101, 137, 145, 161, 214, 289, 300, 302, 316, 336, 340], "iteration": [62, 81, 85, 97, 99, 137, 340], "modified": [62, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "according": [62, 80, 153, 157], "primal": 62, "dual": 62, "residuals": [62, 333], "_by": 62, "_residuals": 62, "boyd": [62, 333], "parikh": [62, 333], "chu": [62, 333], "peleato": [62, 333], "eckstein": [62, 333], "distributed": [62, 333], "statistical": [62, 333], "learning": [62, 333, 340], "alternating": [62, 333], "direction": [62, 333], "multipliers": [62, 333], "foundations": [62, 333], "trends": [62, 333], "machine": [62, 333], "),": [62, 157, 289, 329, 331, 333, 334, 335, 336, 339, 340], "compute": [62, 79, 191, 210, 301, 306, 315, 317, 318, 335], "merit": 62, "start": [62, 110, 112, 153, 154, 155, 157, 329], "pre": [62, 157, 158, 334, 338], "-initialized": 62, "solving": [62, 63, 334], "relaxed": [62, 155, 157, 338], "first": [62, 66, 110, 134, 135, 145, 329, 335], "option": 62, "guarantee": 62, "even": [62, 333], "should": [62, 97, 110, 118, 153, 157, 326, 327], "tuning": 62, "options": [62, 220, 340], "help": 62, "considered": 62, "hint": 62, "where": [62, 160, 193, 211, 212, 213, 231, 232, 255, 267, 334], "iterative": [62, 137], "process": 62, "op": [63, 331, 337, 340], "keeps": 63, "track": 63, "various": 63, "stored": [63, 97, 98, 99, 100, 137], "during": [63, 106, 289, 300, 302, 316], "recreated": 63, "third": 63, "abc": [64, 110, 114, 189, 237], "base": [64, 118, 157], "abstract": [64, 65, 110, 114, 115, 117, 170, 189, 190, 192, 237, 238, 239, 246, 247], "aggregates": [64, 65, 101, 157], "results": [64, 65, 75, 97, 98, 99, 100, 101, 102, 118, 123, 134, 135, 137, 157, 193, 332, 334, 336], "aggregate": [65, 102], "minimumeigenoptimizationresult": [65, 102, 109, 134, 135, 158], "combined": [65, 102], "solutionsample": [65, 75, 81, 86, 102, 103, 105, 118, 124, 331, 339], "aggregated": [65, 102], "samples": [65, 75, 81, 86, 102, 103, 105, 118, 121, 124, 289, 331, 338, 339, 340], "rhobeg": 66, "rhoend": 66, "maxfun": 66, "disp": [66, 69, 71, 92, 93, 339], "catol": 66, "trials": [66, 110, 113, 145], "clip": [66, 110, 111, 145], "multistartoptimizer": [66, 145], "scipy": [66, 140, 145], "cobyla": [66, 333, 336, 339], "provides": [66, 69, 92, 106, 145], "wrapper": [66, 69, 92, 106, 145], ".optimize": [66, 140, 145], ".fmin": [66, 140, 145], "_cobyla": 66, "docs": [66, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".scipy": [66, 145], ".org": [66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "/doc": [66, 145], "/scipy": [66, 145], "/generated": [66, 145], ".html": [66, 145, 329], "arguments": [66, 145], "fmin": [66, 145], "passed": [66, 145, 157, 227, 231, 240, 289, 300, 302, 316], "constructor": [66, 145, 283], "\u30b5\u30f3\u30d7\u30eb": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 334, 335], ">>": [66, 69, 92, 118, 145, 220, 224, 240], "_optimization": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 300, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".problems": [66, 69, 92, 106, 137, 145, 220, 224, 240, 329, 332, 333, 334, 338, 339], "import": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".algorithms": [66, 69, 92, 106, 118, 137, 145, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "()": [66, 69, 92, 106, 118, 137, 145, 193, 220, 224, 240, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "specify": [66, 69, 92, 106, 137, 145], "here": [66, 69, 92, 106, 137, 145, 302], ".solve": [66, 69, 92, 106, 118, 137, 145, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "(problem": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 338], "initializes": [66, 69, 92, 137, 145, 157, 246], "initializer": [66, 106, 137, 145, 335], "takes": [66, 106, 137, 145], "stores": [66, 145, 254, 266], "later": [66, 145], "use": [66, 88, 106, 137, 145, 157, 220, 261, 273, 289, 294, 297, 298, 299, 300, 302, 308, 316, 329, 333, 335, 336, 339, 340], "invoked": [66, 145], "local": [66, 112, 145], "optimum": [66, 145, 336], "consisting": [66, 106, 145, 262, 284, 340], "only": [66, 67, 77, 99, 106, 145, 146, 157, 221, 227, 235, 236, 289, 300, 302, 316, 324, 339, 340], "reasonable": 66, "changes": [66, 153, 157], "final": [66, 141, 145, 336, 340], "accuracy": [66, 145], "precisely": 66, "guaranteed": 66, "trust": 66, "region": 66, "controls": 66, "frequency": 66, "implies": 66, "}.": [66, 266, 334], "evaluations": 66, "absolute": 66, "-start": [66, 110, 145, 158, 338], "trial": [66, 110, 145], "guess": [66, 110, 145], "guesses": [66, 110, 145], "uniformly": [66, 110, 145, 193], "drawn": [66, 110, 145], "[lowerbound": [66, 110, 145], "potential": [66, 110, 145], "clipping": [66, 110, 145], "unbounded": [66, 110, 145, 256, 268], "/or": [66, 110, 145], "replaced": [66, 110, 145], "-clip": [66, 110, 145], "correspondingly": [66, 110, 145], "contains": [67, 75, 146, 225, 256, 268, 319, 320, 323, 324, 326], "explaining": [67, 89, 107, 138, 146, 242], "describing": [67, 89, 107, 138, 140, 144, 146, 242, 309], "runs": [68, 74, 91, 96, 109, 117, 139, 147, 289, 340], "try": [68, 74, 91, 96, 109, 117, 139, 147, 158, 329, 335], "incompatible": [68, 74, 91, 96, 117, 139, 147, 241], "_parameters": [69, 336, 339], "/project": [69, 339], "/cplex": [69, 339], ".is": [69, 92, 334], "_cplex": 69, "_installed": [69, 92], "print": [69, 71, 92, 93, 118, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "www": [69, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".ibm": 69, "/docs": 69, "/en": 69, "/icos": 69, "topic": 69, "=cplex": 69, "-parameters": 69, "display": [71, 93, 329, 339], "information": [71, 93, 118, 123, 145, 206, 212, 238, 239, 314, 319, 320], "accepts": [72, 94], "modeled": [72, 94], "may": [72, 74, 77, 96, 140, 221, 225, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "throw": 72, "case": [72, 118, 129, 137, 157, 222, 226, 229, 233, 241, 333, 334, 336], "determined": [72, 231], "-convex": [72, 94], "static": [73, 79, 95, 173, 182, 184, 191, 206, 208, 210, 212, 242], "depending": [74, 96], "settings": [74, 96, 289, 300, 302, 316], "sdp": [75, 76], "_solution": [75, 334, 335], "properties": [75, 81, 140], "contain": [75, 221, 225, 228, 289, 300, 302, 316], "explore": 75, "solutions": [75, 157, 335], "num": [77, 88, 137, 157, 173, 193, 197, 211, 212, 215, 332, 334, 337], "_cuts": 77, "sort": [77, 336], "unique": 77, "seed": [77, 173, 193, 206, 212, 331, 334, 335, 336, 337, 338], "-cut": [77, 80, 181, 183, 185, 334, 335, 337], "sum": [77, 160, 187, 193, 231, 232, 330, 334, 335, 336, 338], "_{": [77, 193, 231, 232, 332, 333, 334, 335, 338], ",j": [77, 193, 334], "<i": 77, "[i": [77, 331, 334, 335, 336, 338, 340], "]*": 77, "[j": [77, 334, 336, 338, 340], "])": [77, 118, 329, 331, 334, 335, 336, 338, 340], "therefore": 77, "encodes": [77, 80], "negative": 77, "adjacency": [77, 79, 184, 210, 340], "matrix": [77, 79, 121, 184, 210, 254, 266, 329, 334, 336, 340], "graph": [77, 163, 170, 171, 172, 173, 174, 176, 181, 182, 184, 195, 202, 205, 208, 211, 217, 334, 337], "cuts": [77, 80], "generate": [77, 194, 329, 335], "thus": 77, "random": [77, 173, 193, 206, 212, 289, 300, 302, 316, 334, 336, 340], "generator": [77, 193], "adj": [79, 210, 334, 340], "_matrix": [79, 210, 254, 257, 266, 269, 334], "cut": [79, 181, 340], "numpy": [79, 182, 184, 191, 193, 331, 333, 334, 335, 336, 337, 338, 340], "array": [79, 163, 170, 174, 181, 182, 184, 190, 202, 205, 211, 217, 254, 260, 266, 272, 329, 340], "generated": [80, 329, 339], "operation": [81, 85, 145], "_counts": 81, "_input": 81, "_qubits": [81, 88, 334, 337, 340], "_output": [81, 145], "intermediate": [81, 82, 97, 98, 100, 134, 135, 137, 289, 300, 302, 314, 316, 336, 337], "_fval": 81, "threshold": [81, 87, 137, 331], "raw": [81, 86, 103, 105, 118, 123], "_samples": [81, 103, 331, 338], "constructs": [81, 110, 134, 140, 262, 274], "specific": [81, 140], "defined": [81, 140, 254, 266], "counts": [81, 85, 191, 336], "performed": [81, 85], "per": [81, 85, 289, 300, 302, 316, 319, 320, 340], "represent": [81, 83, 84, 160], "minimization": [81, 235, 236, 241], "expected": [81, 281, 336], "consistent": 81, "probability": [81, 101, 103, 148, 150, 331, 336, 338, 339, 340], "sampling": [81, 103], "getter": [82, 83, 84, 87, 165, 172, 179, 195, 197, 213, 215], "_value": [88, 334, 335], "_iterations": [88, 332], "_instance": [88, 331, 332, 333, 334, 335, 336, 337, 338, 339], "converters": [88, 106, 118, 137, 157, 237, 330], "penalty": [88, 106, 137, 157, 227, 230, 231, 232, 234, 240, 245, 336], "gas": [88, 332], "minimum": [88, 103, 106, 108, 137, 206, 212, 289, 300, 301, 302, 306, 315, 316, 317, 318, 330, 333, 334], "improvement": 88, "quantuminstance": [88, 90, 331, 334, 335, 337, 338, 339], "backend": [88, 289, 300, 301, 302, 304, 306, 316, 317, 332, 334, 336, 337, 340], "selected": [88, 221], "defaults": [88, 289, 340], "aer": [88, 334, 336, 337, 339], "statevector": [88, 331, 332, 333, 336, 338], "simulator": [88, 336], "quadraticprogramconverter": [88, 106, 137, 157, 220, 224, 227, 231, 240], "converting": [88, 106, 137, 157], "internally": [88, 106, 137, 157, 254, 266], "quadraticprogramtoqubo": [88, 106, 137, 157, 330, 334, 337, 338], "converter": [88, 223], "typeerror": [88, 106, 119, 137, 281], "circuits": [90, 153, 157, 289, 300, 302, 316], "raises": 91, "attributeerror": 91, "been": [91, 300, 301, 306, 316, 317, 319, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gurobi": [92, 93, 94, 95, 339], "_gurobi": 92, "suppress": 92, "info": 92, "stdout": 92, "sys": [92, 335], "devnull": 92, "...": 92, "def": [92, 331, 334, 335, 336, 338, 340], "noop": 92, "(*": 92, "args": 92, "**": [92, 333, 334, 335, 336, 340], "kwargs": 92, "):": [92, 266, 329, 334, 335, 336, 338, 339, 340], "pass": [92, 298], "..": [92, 340], "close": 92, "flush": 92, "writelines": 92, ".stdout": 92, "enum": [97, 130], "recursiveminimumeigenoptimizer": 97, "user": 97, "last": [99, 134, 135, 137, 334], "baseaggregator": [101, 157], "averaging": [101, 102], "sample": [101, 148, 150, 151, 191, 339], "min": [103, 104, 106, 108, 134, 135, 137, 331, 332, 335, 336, 338], "_eigen": [103, 106, 331, 335, 336, 337], "_solver": [103, 106, 157, 332, 335, 336, 337, 338], "_result": [103, 331, 332, 336, 337, 338, 339], "eigen": [103, 106, 134, 137, 330, 333, 334], "minimumeigensolver": [103, 104, 105, 106, 108, 302, 331, 333, 336], "minimumeigensolverresult": [103, 104, 301, 306, 317], "obtained": [103, 104, 118, 132, 134, 135, 155, 335, 339], "underlying": 103, "solvers": [106, 157], "assumes": 106, "thereof": 106, "converts": [106, 232], "expanding": 106, "adding": 106, "terms": [106, 137, 227, 231, 232, 340], "resulting": [106, 336], "translated": [106, 326, 327, 328], "whose": [106, 119, 164, 168, 178, 187, 200, 203, 207, 218, 340], "minimal": 106, "vector": [106, 191, 289, 300, 302, 316], "eigenstate": [106, 301, 306, 315, 317, 318, 340], "correspond": [106, 183, 207], "solver": [106, 137, 158, 331, 333], "ground": [106, 301, 306, 317], "good": 106, "outline": [106, 137], "how": [106, 137, 329], "(..": [106, 137], ".)": [106, 137, 329], "(qaoa": [106, 137, 331, 333, 334, 338, 339, 340], "scale": [106, 137, 227, 231, 240, 298], "computed": 106, "todo": 106, "applying": [106, 157], "logic": [106, 157], "eigensolver": [106, 108, 315, 318, 332, 334, 335, 336, 337], "implements": 110, "-classed": 110, "valueerror": [110, 301, 306, 317], "smaller": [110, 289], "applies": [112, 137], "callable": [112, 289, 300, 302, 305, 316], "minimizes": 112, "_results": [118, 335, 340], "specifying": [118, 251, 262, 289, 300, 302, 316], ".binary": [118, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340], "_var": [118, 145, 224, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340], "')": [118, 329], ".minimize": [118, 274, 329, 331, 332, 333, 335, 340], "={": [118, 329, 330, 331, 339, 340], "x1": [118, 332, 338], "x3": [118, 338], "})": [118, 329, 330, 331, 334, 335, 338, 339, 340], "([": [118, 331, 333, 334, 335, 336, 338, 339, 340], ".name": [118, 331, 340], ".variables": [118, 283, 331, 335, 338], "['": 118, "x2": [118, 332, 338], "']": 118, "(result": [118, 333, 334, 337, 338, 339, 340], ".variable": [118, 338], "_names": 118, "['x1": 118, ".x": [118, 331, 334, 335, 338], ".]": [118, 331, 334, 335, 339, 340], "1'": 118, ".fval": [118, 331, 336, 338], "_dict": [118, 329], "{'x1": 118, "maintain": 118, "generating": [118, 334, 335], "possibly": 118, "failure": [118, 129, 131, 222, 226, 229, 233, 331], "sizes": 118, "do": [118, 231, 336], "match": [118, 231, 276, 277], "_getitem": [119, 255, 267], "neither": 119, "nor": 119, "zi": 121, "zj": 121, "correlation": 121, "currently": 123, "dump": 123, "leftovers": 123, "additional": [123, 140, 223, 289, 300, 302, 316, 334], "ended": 131, "success": [133, 331, 332, 333, 334, 336, 337, 338, 339, 340], "succeeded": 133, "replacements": [134, 136], "history": [134, 135, 137, 319, 320, 322, 336], "recursive": [134, 137, 139], "weight": [134, 136, 159, 177, 179, 208, 334], "either": [134, 136, 157, 261, 273, 329], "containing": [134, 319, 320], "element": [134, 135], "minimumeigenoptimizerresult": [134, 135], "invoking": [134, 135], "iteratively": [134, 135], "second": [134, 135], "step": [134, 135, 319, 320], "_num": [134, 135, 137, 331], "_vars": [134, 135, 137, 331], "intermediateresult": 137, ".last": 137, "_iteration": 137, "meta": [137, 157], "-algorithm": [137, 157], "top": [137, 283, 289, 329, 340], "called": 137, "(internal": 137, "bravyi": [137, 331], "et": [137, 157, 231, 335, 336], "al": [137, 157, 231, 335, 336], "obstacles": [137, 331], "preparation": [137, 331], "symmetry": [137, 331], "protection": [137, 331], "until": 137, "apply": [137, 339, 340], "scheme": 137, "once": 137, "reached": 137, "every": [137, 227, 231, 240, 308], "after": [137, 339], "remaining": 137, "_min": 137, "fx": [140, 141], "imode": [140, 142], "smode": [140, 144], "slsqp": [140, 145], "optimized": [140, 141, 340], "exit": [140, 142, 144], "mode": [140, 142, 144, 220, 221, 223], "documentation": 140, "_slsqp": [140, 145], "actually": 141, "iter": 145, "acc": 145, "iprint": 145, "full": [145, 333, 334], ".continuous": [145, 283, 329, 333, 338], "(name": [145, 224, 329, 332, 333, 339], "=\"": [145, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340], "\")": [145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".maximize": [145, 329, 330, 336, 338, 339], "=[": [145, 329, 331, 337, 338, 340], "[-": [145, 336, 338], "requested": 145, "verbosity": 145, "silent": 145, "summary": 145, "upon": 145, "iterate": 145, "minimizer": 145, "func": 145, "epsilon": [153, 157, 338], "factory": [153, 157], "produces": 153, "overridden": 153, "modify": 153, "behavior": 153, "generates": 153, "mixer": [153, 156, 157, 289, 293, 300, 338], "regularization": [153, 157], "xi": [153, 157], "corresponds": [153, 157], "_variables": [154, 156, 329], "creates": [154, 155, 156, 254, 266, 283], "circuit": [154, 156, 157, 289, 300, 302, 316, 340], "quantumcircuit": [154, 156, 289, 291, 292, 293, 300, 302, 303, 316, 338, 340], "represents": 154, "constructed": 155, "evolved": 156, "ry": [156, 334], "(theta": [156, 338], ")rz": 156, "(-": [156, 332, 338, 339], "2beta": 156, ")ry": 156, "theta": [156, 334, 335, 338], "relax": [157, 338], "_for": [157, 330, 331, 338], "_pre": [157, 338], "_solutions": 157, "_factory": 157, "aggregator": 157, "-solver": [157, 158], "version": [157, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "must": [157, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "implement": 157, "own": [157, 311], "inheriting": 157, "daniel": 157, "egger": [157, 338, 340], "-starting": [157, 289, 300, 338], "correct": [157, 335], "initialization": 157, "explicit": 157, "warmstartqaoacircuitfactory": 157, "ignored": [157, 315, 318], "passing": 157, "computations": 157, "warmstartqaoafactory": 157, "several": 157, "states": 157, "next": 158, "presolver": 158, "weights": [159, 160, 177, 335, 337], "_weight": [159, 177, 337], "_number": 159, "_of": 159, "_bins": [159, 161], "optimizationapplication": [159, 167, 170, 177, 186, 193, 199], "application": [159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 337], "bin": [159, 160, 161, 162], "packing": [159, 160, 162, 199, 201], "\u300d,": [159, 167, 174, 177, 181, 186, 193, 199, 205, 211, 217], "en": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], ".wikipedia": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "/wiki": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "/bin": 159, "_packing": [159, 199], "items": [159, 161, 177, 178, 340], "capacity": [159, 177], "bins": [159, 160], "plot": [160, 331, 334, 336, 340], "calculated": [160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 227, 231, 240], "respectively": 160, "fig": [160, 340], "item": [161, 178], "lists": [161, 183, 329], "_in": 161, "graphoptimizationapplication": [163, 174, 181, 202, 205, 211, 217, 337], "networkx": [163, 170, 173, 174, 181, 202, 205, 211, 217, 334, 337], "theory": [163, 202], ")\u300d": [163, 202], "/clique": 163, "_(": [163, 202], "_theory": [163, 202], "suitable": [163, 170, 174, 181, 202, 205, 211, 217], "build": [163, 170, 174, 181, 202, 205, 211, 217], "makes": [163, 166], "maximal": [163, 165, 166, 179], "instead": [163, 166, 333], "node": [164, 175, 183, 203, 206, 207, 211, 212, 213, 218, 334, 339], "subsets": [167, 168, 187, 199, 200], "exact": [167, 169, 331, 332, 333, 334, 338], "/exact": 167, "_cover": [167, 217, 337], "pos": [171, 334, 337], "without": 171, "colors": [171, 334], "positions": [171, 266], "nodes": [171, 173, 206, 207, 212, 334, 335], "_nodes": [173, 334], "_edges": [173, 334], "edges": 173, "partition": [174, 176, 186], "/graph": 174, "_partition": 174, "divided": 175, "two": [175, 183, 340], "groups": 175, "/knapsack": 177, "/maximum": 181, "_cut": [181, 334, 340], "gset": [182, 184], "parse": [184, 208], "2d": [184, 208], "_set": [186, 202], "/partition": 186, "integers": [186, 339], "half": 187, "partitioning": 188, "calculation": 190, ".ndarray": [190, 191, 340], "answer": 190, "-understand": 190, "_vector": 191, "most": 191, "likely": 191, "ints": 191, "_sites": 193, "rng": 193, "_or": [193, 323], "_seed": [193, 331, 334, 335, 336, 337, 338], "sherrington": 193, "kirkpatrick": 193, "sk": [193, 194, 198], "over": [193, 336], "spins": [193, 196], ")=": 193, "/\\": 193, "sqrt": [193, 338], "{n": [193, 333], "<j": [193, 334], "}x": [193, 329, 334, 338], "_ix": 193, "_j": [193, 231, 232, 334, 335], "_i": [193, 231, 232, 329, 330, 334, 335, 338], "\\in": [193, 333, 335, 338], "\\{": [193, 333, 335, 338], "pm": 193, "configuration": [193, 196], "}\\": [193, 329, 334, 335, 337], "disorder": [193, 194], "chosen": [193, 289, 340], "independently": 193, "notice": [193, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "variants": 193, "disorders": 193, "normal": 193, "distribution": [193, 289, 340], "mean": [193, 289, 300, 302, 316], "variance": 193, "dmitry": 193, "panchenko": 193, "-kirkpatrick": 193, "overview": 193, "/abs": [193, 289, 300], "sites": [193, 197], "pseudo": 193, "-random": 193, ".random": [193, 331, 334, 335, 336, 337, 338, 340], ".default": 193, "_rng": 193, "(<": 193, ">)": 193, "rtype": [195, 197], ":returns": [195, 197], "/set": 199, "stable": [202, 204], "independent": 202, "/independent": 202, "traveling": [205, 206, 209, 334, 335, 337], "salesman": [205, 206, 209, 334, 335, 337], "travelling": [205, 335], "/travelling": 205, "_salesman": 205, "low": [206, 212], "coordinate": [206, 212], "coordinates": [206, 212], "prospective": 207, "cycle": 207, "tsplib": 208, "edge": [208, 334], "euc": 208, "data": [208, 289, 300, 302, 316, 335], "cities": 210, ":param": 210, "length": [210, 335], "_vehicles": 211, "depot": [211, 212, 213, 335], "vehicle": [211, 212, 214, 216], "routing": [211, 212, 216, 335], "/vehicle": 211, "_routing": [211, 335], "vehicles": [211, 212, 213, 215, 335], "depart": [211, 212, 213], "_vehicle": [212, 335], "routes": 214, "vertex": [217, 219, 337], "/vertex": 217, "'auto": 220, "introducing": 220, "slack": [220, 223, 231, 330], ".converters": [220, 224, 240, 330, 334, 336, 337, 338], "define": [220, 240, 333, 339, 340], "conv": [220, 224, 240, 337], ".convert": [220, 224, 240, 330, 334, 336, 337], "choose": [220, 340], "\u300finteger": 220, "\u300f:": 220, "\u300fcontinuous": 220, "\u300fauto": 220, "supported": [221, 225, 289, 300, 302, 315, 316, 318], "unsupported": [221, 232, 323, 324], "encoding": [224, 329, 339], "bounded": 224, "-coefficient": 224, "proposed": 224, ".integer": [224, 329, 330, 339], "='": 224, "sahar": 224, "karimi": 224, "pooya": 224, "ronagh": 224, "practical": 224, "annealers": 224, "back": [226, 229, 233], "automatically": [227, 231, 240, 323, 336], "differs": [229, 233], "require": 231, "\\begin": [231, 232, 329, 332, 338], "{array": [231, 232], "}{": [231, 232, 334], "}\n\\": [231, 232], "\\\nx": [231, 232], "leq": [231, 232, 329, 330, 333, 335], "rightarrow": [231, 232], "& p": [231, 232], "-x": [231, 232, 333, 334], "\\\\": [231, 232, 329], "geq": [231, 232, 330], "(y": [231, 232], "}^": [231, 232, 333, 334, 335, 338], "supplied": 231, "patterns": [231, 232], "they": [231, 315, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "kept": 231, "fred": 231, "glover": 231, "tutorial": [231, 333], "formulating": 231, "-type": 232, "_flipproblemsense": [235, 236], "maximization": [235, 236], "unchanged": [235, 236], "another": [238, 239], "keep": [238, 290], "_program": [246, 251, 254, 262, 266, 274, 281, 283, 326, 327, 329, 334, 337, 338, 340], "quadraticprogramelement": [246, 254, 266, 274, 283], "parent": [246, 251, 254, 262, 266, 274, 281, 282, 283], "-side": [246, 247, 249, 251, 252, 253, 262, 263, 264, 265], "evaluate": [247, 252, 258, 259, 263, 270, 271, 276, 277, 336], "evaluated": [252, 258, 259, 263, 270, 271, 276, 277, 289, 300, 301, 302, 306, 315, 316, 317, 318, 336, 340], "linearexpression": [253, 264, 278], "expression": [253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 273], "sparse": [254, 266, 289, 329, 340], "dok": [254, 257, 266, 269], "addressed": [255, 267], "expressionbounds": [256, 268], "gradient": [259, 271, 277], "_name": [261, 273, 329, 336, 340], "determines": [261, 272, 273], "quadraticexpression": [265, 279], "compressed": 266, "way": [266, 335], "symmetric": [266, 272, 273, 329], "summed": 266, "up": 266, "triangle": 266, "{(": [266, 329, 338], "->": [266, 335, 338, 340], "tuples": 273, "objsense": [274, 280], "shape": [276, 277], "have": [281, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "initialize": [281, 333, 335, 336], "exposed": 283, "meant": 283, "externally": 283, "reps": [289, 296, 300, 334, 336, 340], "_state": [289, 300, 338], "_point": [289, 300, 302, 316, 331, 338, 340], "alpha": [289, 290, 334, 336, 340], "provider": [289, 300, 301, 302, 306, 312, 316, 317, 340], "shots": [289, 290, 300, 302, 308, 313, 316, 336, 340], "measurement": [289, 300, 302, 308, 316, 340], "_error": [289, 300, 302, 316, 335, 340], "_mitigation": [289, 300, 302, 316, 340], "callback": [289, 300, 302, 305, 316, 336], "store": [289, 300, 302, 314, 316, 336], "_intermediate": [289, 300, 302, 316], "_swap": [289, 340], "_strategies": [289, 340], "_mapping": [289, 340], "_pulse": [289, 340], "_efficient": [289, 340], "_level": [289, 340], "vqeclient": [289, 316, 320], "runtime": [289, 301, 302, 306, 311, 316, 317, 321, 340], "client": [289, 302, 316], "spsa": [289, 300, 302, 316, 334, 335, 340], "qn": [289, 300, 302, 316], "-spsa": [289, 300, 302, 316], "'name": [289, 300, 302, 316], "prepend": [289, 300], "evolve": [289, 300], "custom": [289, 300], "support": [289, 300], "optimizations": [289, 300], "subspaces": [289, 300], "http": [289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "vqe": [289, 301, 302, 306, 317, 321, 330, 331, 332, 333, 334, 335], "fraction": [289, 290, 340], "expectation": [289, 301, 306, 315, 317, 318, 336, 340], "cvar": [289, 340], "contained": 289, "interval": 289, "mitigation": [289, 300, 302, 308, 316, 340], "access": [289, 300, 302, 316], "four": [289, 300, 302, 316], "evaluation": [289, 300, 302, 316, 340], "works": [289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "towards": [289, 300, 302, 316], "count": [289, 300, 301, 302, 306, 316, 317, 335], "ansatz": [289, 291, 300, 302, 303, 316, 336, 340], "deviation": [289, 300, 302, 316], "steps": [289, 300, 302, 316], "swap": [289, 294, 299, 340], "strategies": [289, 294, 299, 340], "transpiling": [289, 340], "transpiler": [289, 298, 340], "level": [289, 294, 335, 340], "permute": [289, 340], "paulis": [289, 340], "cost": [289, 334, 335, 338, 340], "better": [289, 297, 340], "fit": [289, 297, 340], "coupling": [289, 340], "map": [289, 340], "strategy": [289, 340], "needed": [289, 340], "transpile": [289, 340], "pulse": [289, 298, 340], "-efficient": [289, 298, 340], "transpilation": [289, 299, 340], "best": [290, 334, 339], "aux": [295, 301, 306, 311, 315, 317, 318, 340], "_operators": [295, 301, 306, 311, 317], "inputs": [295, 311, 340], "permutation": 297, "device": 297, "cr": [298, 340], "gates": [298, 340], "qaoaclient": [300, 302, 340], "deprecated": [300, 316, 319], "renamed": [300, 316, 319], ".runtime": [300, 316, 340], ".qaoaclient": 300, "calls": [301, 306, 317], "observable": [301, 306, 317], "auxiliary": [301, 306, 315, 317, 318], "operators": [301, 306, 315, 317, 318, 340], "eigenvalue": [301, 306, 317, 334, 340], "main": [301, 306, 315, 317, 318, 340], "chemistry": [301, 306, 317], "dipole": [301, 306, 317], "particle": [301, 306, 317], "so": [301, 306, 317], "yet": [301, 306, 317], "runtimeerror": [301, 306, 317], "job": [301, 306, 317, 321, 340], "execution": [301, 306, 317], "failed": [301, 306, 317], "call": 302, "equivalent": 302, "nature": 302, "but": [302, 333], "serves": 302, "basis": 302, "parameterized": [302, 316], "wave": [302, 316], "feature": [302, 316], "readout": 308, "done": 308, "complete": 308, "fitter": [308, 340], ".shots": 308, "re": [308, 340], "-calibrations": 308, "minutes": 308, "id": [310, 321, 335, 340], "override": 311, "add": [311, 329, 334], "classmethod": [315, 318], "computing": [315, 318, 334], "computes": [315, 318], "_operator": [315, 318], "expectations": [315, 318], ".vqeclient": 316, "renaming": 316, "reflects": 316, "executed": 316, "vqeruntimeresult": 319, "vqeprogram": 319, "vqeresult": [319, 320], "additionally": [319, 320], "associated": 321, "indicator": 323, "_big": 323, "_m": [323, 332], "translate": [323, 324, 336], ".mp": [323, 326, 329, 332, 333, 336, 338, 339], "features": 323, "logical": 323, "expressions": 323, "_not": 323, "_and": [323, 334, 339], "big": [323, 335, 339], "-m": [323, 339], "formulation": [323, 335], "derived": 323, "basic": 324, "functions": [324, 336], "treat": 325, "ys": 325, "imaginary": 325, "-supported": [326, 327], "never": [326, 327], "happen": [326, 327], "quad": [328, 329, 333, 335], "_prog": 328, "comprising": 328, "\u30da\u30fc\u30b8": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "/tutorials": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".ipynb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u751f\u6210": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u307e\u3057": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": [329, 330, 331, 333, 334, 340], "\u30e2\u30b8\u30e5\u30fc\u30eb": [329, 330, 334, 338, 340], "\u5229\u7528": [329, 333, 334, 335, 337, 338, 339, 340], "\u554f\u984c": [329, 330, 331, 333, 335, 336, 338, 339, 340], "\u30d3\u30eb\u30c9": 329, "\u7d39\u4ecb": [329, 331, 333, 335, 336, 337], "\u305f\u3081": [329, 330, 331, 332, 333, 335, 336, 337, 338, 340], "\u5c0e\u5165": [329, 330, 331, 337], "\u6b63\u78ba": [329, 331, 333, 335, 337], "\u8a08\u753b": [329, 330, 331, 332, 333, 335], "\u6271\u3044": [329, 334, 338], "{align": [329, 338], "{minimize": 329, "^\\": 329, "{subject": 329, ",\\": [329, 335], "dots": [329, 335], "\u884c\u5217": [329, 331, 333, 338], "\u6b21\u5143": [329, 335], "\u30d9\u30af\u30c8\u30eb": [329, 333, 335, 337, 338], "\u30d0\u30a4\u30ca\u30ea\u30fc": [329, 330, 331, 333, 335, 338, 339], "\u6574\u6570": [329, 330, 331, 332, 335, 337, 338, 340], "\u9023\u7d9a": [329, 333, 335, 338], "\u5b9a\u7fa9": [329, 330, 332, 333, 334, 335, 336, 338, 339], "\\leq": [329, 330], "\u52a0\u3048": [329, 334, 338], "\\geq": [329, 330], "\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7": 329, "\u30a4\u30f3\u30dd\u30fc\u30c8": [329, 337], ".translators": [329, 332, 333, 336, 338, 339], "_docplex": [329, 332, 333, 336, 338, 339], "_mp": [329, 332, 333, 336, 338, 339], "you": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "explained": 329, "section": [329, 337, 339], "constructing": 329, "\u5909\u63db": [329, 330, 332, 334, 335, 338, 339], "\u3002docplex": [329, 339], "\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8": 329, "ibmdecisonoptimization": 329, ".github": 329, ".io": 329, "/docplex": 329, "-doc": 329, "/mp": 329, "\u306b\u3042\u308a": [329, 337], "\u95a2\u6570": [329, 330, 331, 332, 333, 334, 335, 336], "\u547c\u3073\u51fa\u3059": [329, 340], "\u8aad\u307f\u8fbc\u3080": 329, "[2": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".model": [329, 332, 333, 336, 338, 339], "mdl": [329, 333, 336, 338], "(\"": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "(lb": 329, "=-": [329, 331, 339], "ub": [329, 335, 339], ".add": [329, 333, 334, 335, 336, 338, 339], "_constraint": [329, 330, 333, 336, 338, 339], "((": [329, 335, 338, 340], "* (": [329, 335], "(mdl": [329, 333, 336, 338], ".export": [329, 339], "_as": [329, 339], "_lp": [329, 339], "_string": [329, 339], "=iso": [329, 339], "obj": [329, 336, 339], "subject": [329, 330, 331, 332, 333, 334, 337, 338, 339, 340], "qc1": 329, "[ x": [329, 339], "lt": [329, 330, 331, 333, 337, 338, 339], ";=": [329, 330, 333, 337, 338, 339], "binaries": [329, 339], "generals": [329, 339], "comprehensive": 329, "[3": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "load": [329, 333, 335], "mod": 329, "(type": 329, "(mod": 329, "))": [329, 331, 333, 334, 335, 336, 337, 338, 339, 340], ".prettyprint": [329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "&lt": 329, ";class": 329, ".quadratic": [329, 335, 338], ".quadraticprogram": 329, "&#": [329, 330, 331, 333, 334, 337, 338, 339, 340], ";&": 329, "gt": [329, 330, 333, 337, 339], "\u59cb\u3081": [329, 334], "\u307e\u3057\u3087": 329, "[4": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u7a2e\u985e": [329, 330], "\u30bf\u30a4\u30d7": [329, 330], "\u4e0b\u9650": [329, 330], "\u4e0a\u9650": [329, 330], "\u6307\u5b9a": [329, 334, 340], "[5": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\",": [329, 330, 331, 334, 336, 339, 340], "\u76ee\u7684": [329, 330, 331, 332, 333, 334, 335, 336], "\u8a2d\u5b9a": [329, 333, 336, 338, 339, 340], "\u8f9e\u66f8": [329, 340], "\u306e\u3044": [329, 333], "\u305a\u308c": [329, 333], "\u6b21\u9805": 329, "\u5b9a\u6570": [329, 331], "\u5f62\u5f0f": [329, 330, 331, 334, 335, 338], "\u90e8\u5206": [329, 330, 335, 337, 340], "\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0": [329, 335, 340], "\u6ce8\u610f": [329, 330, 331, 332, 334, 335, 337, 338], "\u304c\u3063": [329, 331, 340], "\u5370\u5237": 329, "\u6700\u521d": [329, 330, 331, 332, 333, 334, 335, 337, 338, 340], "\u4e57\u7b97": [329, 332], "\u9664\u7b97": 329, "\u30aa\u30d5\u30bb\u30c3\u30c8": [329, 331, 332], "\uff09\u3001": [329, 331, 335], "\u7dda\u5f62\u9805": 329, "^{": [329, 333], "}qx": 329, "3\u3064": [329, 330, 331, 332], "\u3067\u3059": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "\u30bb\u30eb": 329, "\u5ba3\u8a00": 329, "\u793a\u3057": [329, 331, 332, 333, 334, 335, 336, 340], "\u30ad\u30fc": [329, 340], "\u5bfe\u5fdc": [329, 330, 331, 332, 333, 334, 336, 337, 340], "\u4fc2\u6570": [329, 330, 334], "2\u3064": [329, 330, 333, 334, 335, 339, 340], "\u518d\u3073": 329, "[6": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "dictionaries": [329, 336], "(constant": 329, "\"x": [329, 330, 339, 340], "\":": [329, 330, 336, 338, 339, 340], "},": [329, 330, 333, 334, 335, 337, 338, 339, 340], "(\"x": [329, 331, 339, 340], "\"y": [329, 331, 339, 340], "(\"z": 329, "\"z": [329, 331, 340], "*y": [329, 330, 331, 339, 340], "\u914d\u5217": 329, "\u4e00\u6b21\u9805": 329, "\u6570\u5b66": [329, 334], "\u5b9a\u5f0f": [329, 330, 334, 339], "\u306b\u5bfe\u5fdc": [329, 334, 340], "\u4e8c\u6b21\u9805": [329, 340], "\u9806\u5e8f": [329, 334, 340], "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8": [329, 330, 332, 334, 339, 340], "[7": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "/arrays": 329, "1]": 329, ".objective": [329, 334, 335, 336], ".{": 329, "\u305d\u308c\u305e\u308c": [329, 330, 331, 332, 333, 334, 337, 339], "\u8abf\u3079\u308b": [329, 335], "\u5bc6\u884c": 329, "_array": 329, "\u758e\u884c\u5217": 329, "\u53d6\u5f97": [329, 334, 335, 340], "\u30a4\u30f3\u30c7\u30c3\u30af\u30b9": [329, 334, 335], "\u304b\u3069": [329, 340], "\u5727\u7e2e": 329, "\u683c\u7d0d": 329, "\u3068\u3048": [329, 330, 334, 340], "'y": 329, "('y": 329, "(symmetric": 329, "=true": [329, 331, 333, 334, 335, 338, 339], "\u5bfe\u79f0": [329, 333], "\u30da\u30a2": 329, "[8": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], ":\\": 329, "\\t": 329, ".constant": [329, 335], ".linear": [329, 330, 335, 339], ".to": [329, 331, 334, 336, 337, 340], ".coefficients": 329, "\"\\n": 329, "(use": 329, ", \"": 329, "\\n": [329, 334], "\"\\": 329, "(&": 329, ";)": [329, 331, 339, 340], ")\u3001": 329, "\u7dda\u5f62\u5f0f": 329, "\u691c\u51fa": 329, "(sense": 329, "\u53f3\u5074": [329, 330], "\u2019,": 329, "[9": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "==": [329, 334, 335, 336, 338], "lin": 329, "_eq": [329, 330], "_leq": [329, 330], ">=": 329, "_geq": [329, 330], "\u3060\u3051": [329, 331, 332, 334], "\u306a\u304f": [329, 331, 335], "10": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "(\"y": 329, "*z": [329, 330, 331, 340], "11": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], ".get": [329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "_linear": 329, ":\"": [329, 331, 334, 335, 337], ", lin": 329, ".sense": [329, 335], ".rhs": 329, "_quadratic": [329, 330, 334, 337], "{&": [329, 331], ";:": [329, 331], ".ge": 329, "\u306b\u3088\u3063": [329, 330, 331, 334, 335, 337, 338, 339], "12": [329, 331, 333, 334, 335, 336, 337, 338, 340], ".remove": 329, "\u4e00\u90e8": [329, 334], "\u63db\u3048\u308b": [329, 334], "\u30b1\u30fc\u30b9": [329, 335], "\u51e6\u7406": [329, 330, 331, 334, 340], "(constants": 329, "=..": 329, "\u304c\u3042\u308a": 329, "leftarrow": 329, "{x": [329, 333, 334], "13": [329, 331, 333, 334, 335, 337, 338, 340], ".substitute": 329, "(sub": 329, "-z": [329, 334], "\u7d50\u679c": [329, 330, 331, 332, 334, 335, 337, 338, 340], "\u751f\u3058\u308b": [329, 338], "\u4e0d\u53ef\u80fd": 329, "\u30b9\u30c6\u30fc\u30bf\u30b9": [329, 331], "\u8fd4\u3057": [329, 332], "\u3068\u3057": [329, 331, 334, 335], "\u3001-": 329, "\u7bc4\u56f2": [329, 338], "14": [329, 331, 334, 335, 337, 338, 340], "\u8907\u6570": [329, 331, 334], "\u56de\u7f6e": 329, "\u30a8\u30e9\u30fc": [329, 340], "\u767a\u751f": [329, 334], "15": [329, 331, 334, 335, 337, 338, 340], "except": [329, 335], "\".": [329, 331, 335, 336], "(e": [329, 335], "itself": 329, ";-": 329, "your": 329, "denotes": 329, "included": 329, "ones": 329, "character": 329, "specification": 329, "16": [329, 331, 334, 337, 338, 340], "_e": 329, "17": [329, 331, 334, 338, 340], ".tools": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".jupyter": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "_version": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "_table": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "_copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "softwareversionqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dev": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dbd": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "-aer": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "-ibmq": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "-provider": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "1qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0system": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationpython": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "compilergcc": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "buildmain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "oslinuxcpus": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4memory": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "wed": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "jst": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "code": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "&copy": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "licensed": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "under": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apache": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "license": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "mayobtain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "root": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tree": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], ".apache": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "/licenses": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "/license": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "modifications": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "derivative": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "retain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "thiscopyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "files": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "carry": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "indicatingthat": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "altered": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "originals": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "_programs": 330, "\u8868\u3055": [330, 331, 334, 335], "\u4e00\u822c": [330, 332, 334, 335], "\u5f37\u529b": [330, 335], "\u8868\u73fe": [330, 331, 334, 340], "\u4e8c\u6b21": [330, 331, 332, 333, 335, 338], "\u7279\u5b9a": [330, 332, 333, 334, 335, 336, 337], "\u306b\u5bfe\u3057": [330, 331, 332, 333, 334, 335, 340], "\u9069\u5207": [330, 331, 333, 335], "\uff08qubo": 330, "\u63d0\u4f9b": [330, 331, 334, 335, 336, 337, 340], "\u3053\u308c\u3089": [330, 334, 335, 339, 340], ".opflow": [330, 336, 340], "\u30a4\u30b8\u30f3\u30b0\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [330, 331, 335], "\u30de\u30c3\u30d4\u30f3\u30b0": [330, 331], "\u57fa\u5e95": [330, 331, 334, 335, 338], "\u72b6\u614b": [330, 331, 332, 334, 335, 338, 340], "\u8fd1\u4f3c": [330, 332, 335, 338], "\u306a\u3069": [330, 331, 332, 333, 334, 335, 339], "\u77e5\u3089": [330, 333, 335], "\u3044\u308b": [330, 331, 332, 333, 334, 335, 338, 340], "\u57fa\u790e": [330, 338], "\u306a\u308b": [330, 331, 334, 335, 337, 338], "\u30eb\u30fc\u30c1\u30f3": [330, 334], "\u306b\u95a2\u3059\u308b": [330, 331, 332, 333, 340], "\u52d5\u4f5c": [330, 332, 333, 338], "\u7570\u306a\u308b": [330, 331], "\u5b58\u5728": [330, 334], "\u6b63\u3057\u3044": [330, 335], "\u5165\u529b": [330, 331, 332, 333, 340], "\u3055\u307e\u3056\u307e\u306a": [330, 333, 334, 335, 340], "\u5f53\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": 330, "\u6982\u8981": 330, "\u542b\u307e": [330, 331, 333, 334, 340], "\u4e0d\u7b49": [330, 333], "\u5f0f\u5236": [330, 333], "\u30b9\u30e9\u30c3\u30af": 330, "\u5909\u6570": [330, 331, 332, 333, 334, 335, 338, 339, 340], "\u7b49\u5f0f": [330, 333, 335], "\u5236\u7d04": [330, 331, 332, 333, 334, 335, 338], "\u30d0\u30a4\u30ca\u30ea": [330, 331, 332, 335, 338], "maximizetominimize": 330, "\u7b49\u4fa1": [330, 331, 334], "\u6700\u5c0f": [330, 332, 334, 335, 337], "\u5316\u554f": [330, 332, 334], "minimizetomaximize": 330, "\u6700\u5927": [330, 332, 337, 340], "linearinequalitytopenalty": 330, "inequalitytoequalityconverter": 330, "\u524a\u9664": 330, "\u5de6\u5074": 330, "\u8a08\u7b97": [330, 335, 338], "\u7b26\u53f7": 330, "\u8a18\u53f7": 330, "\u30e2\u30c7\u30eb": [330, 332, 334, 338, 340], "\u8a18\u8ff0": [330, 332, 334, 335], "qp": [330, 331, 332, 333, 334, 336, 337, 338, 339], "(lowerbound": 330, "xyz": 330, "(qp": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "\u547c\u3073\u51fa\u3057": [330, 331], "ineq": 330, "2eq": 330, "@int": 330, "_slack": [330, 337], "\u5909\u63db\u5f8c": 330, "\u4e0a\u8a18": [330, 332, 334, 335, 338, 340], "\u51fa\u529b": 330, "\u3054\u89a7": 330, "\u3068\u304a\u308a": [330, 334, 335], "\\_": 330, "leg": 330, "\\text": 330, "{@": 330, "\u7f6e\u304d": [330, 331], "\u63db\u3048": [330, 331], "\u3089\u308c": [330, 331, 332, 333, 334, 335, 336, 337, 338, 340], "\u3069\u306e": [330, 334, 335, 340], "\u305f\u3068\u3048": [330, 332, 334, 335], "\u304a\u3088\u3073": [330, 331, 332, 333, 334, 335, 339], "\u305f\u304c\u3063": [330, 335, 336], "\u3067\u3082": [330, 335, 339], "\u6e80\u305f": 330, "\u3067\u306a\u3051\u308c": 330, "\u306e\u307f": [330, 332, 334, 335, 339, 340], "\u5c0f\u6570": 330, "\u70b9\u4ee5": 330, "\u5207\u308a": 330, "\u53d6\u308b": [330, 331], "\u756a\u76ee": [330, 335], "\u57fa\u672c": [330, 331, 335], "\u30a2\u30d7\u30ed\u30fc\u30c1": [330, 331, 335], "\u9069\u7528": [330, 331, 332, 335, 336, 337, 338, 339, 340], "\u305f\u3060\u3057": [330, 334, 335, 337, 340], "\u30de\u30a4\u30ca\u30b9": 330, "\uff08\u5f0f": 330, "\uff09\uff09": 330, "\u63d0\u6848": [330, 333, 334], "\u6709\u754c": 330, "\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0": 330, "\u30a8\u30f3\u30b3\u30fc\u30c9": [330, 332, 335], "\u8ad6\u6587": 330, "\u53c2\u7167\u7528": 330, "\u518d\u5ea6": 330, "\u8868\u793a": [330, 332, 335, 339], "2bin": 330, "_bin": [330, 336], "\u6ce8\u8a18": 330, "\u3053\u3053\u3067": [330, 335], "\u53d6\u308a\u5f97\u308b": 330, "ldots": [330, 335], "\u3082\u3064": [330, 333], "\u4e0b\u754c": 330, "\u4e0a\u754c": 330, "\u5f93\u3046": [330, 335], "\u30b5\u30d6\u30bb\u30c3\u30c8": [330, 334, 337], "\u3068\u3063": 330, "\u4e0e\u3048": [330, 331, 334, 336, 337, 338], "\u30de\u30c3\u30d7": [330, 335, 340], "\u7dda\u5f62": [330, 331, 335, 338, 339], "\u30da\u30ca\u30eb\u30c6\u30a3": [330, 331, 333, 334, 338], "\u6301\u3064": [330, 331, 333, 334, 336, 337, 340], "\u6027\u5236": 330, "\u4f8b\u3048": [330, 331, 333, 338], "\u6570\u5024": [330, 331], "\u30da\u30ca\u30eb\u30c6\u30a3\u30d5\u30a1\u30af\u30bf\u30fc": 330, "\u5927\u304d\u306a": 330, "(b": [330, 334], ")^": [330, 334, 335], "\u5316\u304b": 330, "\u3059\u3079\u3066": [330, 332, 335], "lineq": 330, "2penalty": [330, 336], "(qubo": [330, 331, 332, 334, 337, 338, 340], "*xyz": 330, "\u591a\u304f": [330, 333, 334, 335], "\u91cf\u5b50": [330, 331, 332, 337, 340], "\u4e92\u63db": 330, "\u4ee5\u524d": [330, 331], "\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0": 331, "\u8208\u5473": [331, 340], "\u6df1\u3044": [331, 340], "\u4e8c\u5024": [331, 338], "\u3002qubo": [331, 338], "\u6c42\u3081\u308b": 331, "\u30a4\u30b8\u30f3\u30b0": 331, "\u30fb\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [331, 334], "\u898b\u3064\u3051\u308b": [331, 334, 335, 337], "\u76f8\u5f53": [331, 332, 334], "\u5316\u5b66": 331, "\u7269\u7406\u5b66": 331, "\u91cd\u8981": [331, 334, 335, 340], "{-": 331, "\u30b9\u30d4\u30f3": 331, "\u30d1\u30a6\u30ea": [331, 340], "\u306b\u3088\u3063\u3066": [331, 332, 334, 335, 337], "\u3089\u308c\u308b": [331, 333, 335], "\u7f6e\u63db": 331, "\u3001[": [331, 333], "\u81ea\u52d5": [331, 339], "\u306a\u3059\u3079": [331, 334], "\u6d3b\u7528": [331, 332, 338, 340], "\u53e4\u5178": [331, 334, 340], "\u53b3\u5bc6": [331, 337], "\uff09\u3002": [331, 332, 340], "\u3068\u3082": [331, 334], "\u547c\u3070": [331, 333, 334], "\u30e9\u30c3\u30d7": [331, 333], "\u3078\u306e": [331, 335], "\u306e\u306b": [331, 335], "\u306b\u3069\u3046": 331, "\u3002qiskit": [331, 338, 339], "\u3042\u308c": [331, 333, 334], "\u3057\u3088": 331, "2\u6b21": [331, 338], "\u6295\u3052": 331, "\u56de\u8def": [331, 334, 335, 338, 340], "\u6df1\u3055": [331, 334, 335, 340], "\u5927\u304d\u3055": 331, "\u5fdc\u3058": [331, 334, 335], "\u5fc5\u7136": 331, "\u5897\u52a0": 331, "\u8fd1\u672a": 331, "\u30c7\u30d0\u30a4\u30b9": [331, 333, 334, 340], "\u306b\u3068\u3063\u3066": 331, "\u969c\u5bb3": 331, "\u8003\u3048": [331, 334], "\u56de\u907f": 331, "\u518d\u5e30": 331, "\u6700\u5f8c": [331, 333, 334, 335], "\u6982\u5ff5": 331, "\u4e00\u822c\u5316": 331, "lucas": [331, 334], "formulations": [331, 335], "front": 331, "phys": [331, 334, 340], "kliesch": 331, "koenig": 331, "tang": 331, "basicaer": [331, 332, 333, 335, 338], ".utils": [331, 334, 335, 336, 337, 338, 339], "_globals": [331, 334, 335, 336, 337, 338], ".visualization": [331, 334], "_histogram": [331, 334], "typing": [331, 333], "\u30aa\u30da\u30ec\u30fc\u30bf": 331, "\u30b7\u30d5\u30c8": [331, 332], "\u8003\u616e": [331, 335, 336, 340], "\u3079\u304d": 331, "_ising": [331, 334, 336, 337], "(offset": 331, "(op": [331, 337, 340], "iiz": 331, "izi": 331, "zii": 331, "izz": [331, 340], "ziz": [331, 340], "zzi": [331, 340], "\u3068\u304d": 331, "\u76f4\u63a5": [331, 334, 339, 340], "\u623b\u3059": 331, "\u5099\u3048": 331, ".from": [331, 340], "x0": [331, 332, 338], "\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc": [331, 337, 338], "\u57fa\u3065\u3044": [331, 333, 335, 340], "\u521d\u671f\u5316": [331, 333, 335], "_backend": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "_simulator": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "=algorithm": [331, 335, 338], "_transpiler": [331, 334, 335, 337, 338], "_mes": [331, 338, 340], "(quantum": [331, 333, 335, 338], "=quantum": [331, 334, 335, 338], "(exact": [331, 332], "\u5c0f\u3055": [331, 335], "\u30d9\u30f3\u30c1\u30de\u30fc\u30af": [331, 333], "\u6c42\u3081": [331, 335, 337], "\u8868\u8a18": [331, 335], "\u6709\u7528": [331, 334, 335], "\u5272\u5408": 331, "\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [331, 337, 338], "\u5358\u4e00": [331, 332, 338], "\u7d71\u5408": 331, "\u5c5e\u6027": [331, 333], "\u7dcf\u8a08": 331, ", [": 331, ".samples": [331, 338, 339], "[&": [331, 338], ";]": [331, 338, 339], "=array": [331, 339], "=&": [331, 339], ";optimizationresultstatus": [331, 339], ".success": [331, 339], "&gt": [331, 339], "\u78ba\u7387": [331, 332, 334, 338], "\u30d5\u30a3\u30eb\u30bf\u30fc": 331, "_filtered": 331, "[solutionsample": 331, "allowed": 331, "_status": 331, "[optimizationresultstatus": 331, "= (": [331, 335], ",)": [331, 334], ",\n)": 331, "res": [331, 338, 340], ".probability": [331, 338], ".append": [331, 335, 338, 340], "=(": [331, 334, 336, 340], "\u826f\u3044": [331, 336, 337, 338], "\u5168\u4f53": [331, 334, 335, 340], "\u307f\u305f\u3051\u308c": 331, "\u5024\u3068": 331, "\u306b\u95a2\u3057": 331, "\u7d71\u8a08": [331, 333, 334], "\u5f79\u7acb\u3061": [331, 335], "\u5e73\u5747": [331, 336], "\u6a19\u6e96": [331, 336, 340], "\u504f\u5dee": 331, "\u7406\u89e3": [331, 340], "fvals": 331, "[s": 331, "probabilities": [331, 336], ".mean": 331, "(fvals": 331, ".std": 331, "\u3042\u3089\u3086\u308b": 331, "\u5dee\u3057\u7f6e\u3044": 331, "\u53ef\u8996": [331, 332, 333], "\u901a\u5e38": [331, 334, 335], "\u65e9\u671f": 331, "_plot": 331, "join": [331, 335, 338], "(f": [331, 337, 340], "\"{": [331, 336], "}=": [331, 334], "(v": [331, 333, 334, 335], "enumerate": [331, 338, 340], ": s": 331, "(samples": [331, 338], "\u53d6\u308a": [331, 337], "\u30b9\u30ad\u30fc\u30e0": 331, "\u30b5\u30a4\u30ba": [331, 332, 337], "\u4e00\u5ea6": [331, 334, 337], "\u305a\u3064": 331, "\u5c0f\u3055\u304f": 331, "\u4e2d\u9593": 331, "\u3057\u304d\u3044": [331, 332], "\u4e0b\u56de\u308b": 331, "\u30bd\u30eb\u30d0\u30fc": [331, 332, 335, 338], "\u3002\uff08": [331, 335], "\u57fa\u3065\u304f": [331, 334], "\u3064\u306e": [331, 337], "\u69cb\u7bc9": [331, 332, 333, 334, 338, 340], "1\u3064": [331, 332, 334, 335], "\u7e2e\u5c0f": [331, 332], "\u691c\u8a0e": [331, 332, 334, 335], "rqaoa": 331, "=exact": 331, "18": [331, 334, 338, 340], "(rqaoa": 331, "19": [331, 334, 338, 340], "\uff08grover": 332, "\u5909\u5206": [332, 333, 335], "\u3068\u3068\u3082\u306b": 332, "\u7d44\u307f\u5408\u308f\u305b": [332, 334, 335], "\u304a\u3051\u308b": [332, 334], "\u89e3\u6c7a": [332, 333, 334, 335, 338], "\u691c\u7d22": [332, 334, 337], "\u7e70\u308a\u8fd4\u3057": [332, 334], "\u76f4\u524d": 332, "\u307e\u3067": [332, 333, 334, 335, 340], "\u3088\u3044": 332, "\u601d\u308f": 332, "\u898b\u3064\u3051": [332, 334, 335, 337], "\u3002gas": 332, "\u30a2\u30c0\u30d7\u30c6\u30a3\u30d6\u30aa\u30e9\u30af\u30eb": 332, "\u5024\u3088\u308a": 332, "\u4e0a\u307e": 332, "\u4e0b\u306e": 332, "\u3059\u3079": [332, 333, 334, 335], "\u8a8d\u8b58": 332, "\u898b\u3064\u304b\u308b": 332, "\u66f4\u65b0": [332, 333], "\u305f\u3073": [332, 334, 340], "\u30b9\u30da\u30fc\u30b9": 332, "\u30ce\u30fc\u30c8\u30d6\u30c3\u30af": [332, 335, 336], "\u8a18\u8f09": 332, "\u624b\u6cd5": [332, 340], "\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8": [332, 337], "gilliam": 332, "woerner": [332, 338, 340], "gonciulea": 332, "polynomial": 332, "\u30b3\u30a2": 332, "\u8981\u7d20": 332, "\u6750\u6599": 332, "\u5168\u3066": [332, 337], "\u91cd\u306d\u5408\u308f": 332, "\u305b\u308b": 332, "\u6e96\u5099": [332, 335], "\u6f14\u7b97\u5b50": [332, 333, 334, 338, 340], "\u95a2\u5fc3": [332, 334], "\u632f\u5e45": 332, "-1": 332, "\u30aa\u30e9\u30af\u30eb": 332, "rangle": [332, 334, 335, 338], "_n": [332, 335, 338], "\u639b\u3051\u308b": 332, "\u62e1\u6563": 332, "\u5b9f\u88c5": [332, 333, 334, 340], "\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9": [332, 335], "\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af": 332, "\u5927\u307e\u304b": 332, "\u5f93\u3044": 332, "quadraticprogramtonegativevalueoracle": 332, "_y": [332, 338], "-qubit": [332, 340], "\u30ec\u30b8\u30b9\u30bf": 332, "|x": 332, "\\rangle": 332, "|q": 332, ")-": 332, "\u8868\u3057": [332, 333, 334, 335, 340], "(q": [332, 335], "- y": 332, "\u30d5\u30e9\u30b0": 332, "\u4ed8\u3051": [332, 334, 335], "\u72ec\u7acb": 332, "\u5fc5\u9808": 332, "\u660e\u78ba": 332, "\u6b63\u5f0f": [332, 334], "\u8a00\u3048": [332, 334, 335], "\u69cb\u6210": [332, 334, 335], "\u30d0\u30a4\u30ca\u30ea\u30fc\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0": 332, "\u95be\u5024": 332, "\u4e0a\u307e\u305f": 332, "\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8": [332, 334], "\u6e1b\u5c11": 332, "\u6b8b\u308b": 332, "\u7a7a\u9593": [332, 334], "\u5177\u4f53": 332, "\u30bb\u30af\u30b7\u30e7\u30f3": 332, "\u304a\u3082": 332, "\u3061\u3083": 332, "{eqnarray": 332, "2x": 332, "0x": 332, "1x": 332, "3x": 332, "\u30b9\u30c6\u30c3\u30d7": [332, 334, 338], "\u305d\u3057\u3066": 332, "\u8868\u3059": [332, 340], "(model": 332, "_model": [332, 336, 338, 339], "*x": [332, 334, 337], "\u9032\u884c": 332, "\u56de\u7e70\u308a\u8fd4\u3055": 332, "\u7d42\u4e86": [332, 333], "\u3064\u307e\u308a": [332, 333, 334, 335], "\u5909\u5316": 332, "\u5148\u307b\u3069": 332, "\u53d7\u3051\u53d6\u308a": 332, "\u542b\u3080": 332, "=backend": [332, 336], "(results": [332, 336], "\u6700\u9069\u89e3": [332, 335, 339], "\u5f97\u3089\u308c": 332, "\u3068\u306a\u308a": 332, "\u307b\u3068\u3093\u3069": [332, 335], "\u6642\u9593": [332, 334, 335], "\u30e9\u30f3\u30c0\u30e0": [332, 335], "\u306b\u3088\u308b": [332, 333, 334, 337, 338], "\u30ab\u30b9\u30bf\u30e0": 332, "\u793a\u3055": 332, "\u53cd\u5fa9": [332, 340], "(=": 332, "\u30ab\u30a6\u30f3\u30bf\u30fc": 332, "\u30bf\u30a4\u30c8\u30eb": 332, "\u3002x": 332, "\\rightarrow": [332, 334], "y\u8ef8": 332, "\u5f37\u5ea6": 332, "\u6e2c\u5b9a": [332, 340], "\u660e\u308b\u3044": 332, "\u9ad8\u3044": [332, 334], "\u5b9f\u969b": [332, 334, 335, 337], "\u30d5\u30a7\u30fc\u30ba": [332, 333], "\u30ab\u30e9\u30fc\u30db\u30a4\u30fc\u30eb": 332, "\u3002\u3064\u307e\u308a": [332, 333, 335, 340], "\u5206\u5e03": [332, 334, 335, 338], "\u5c11\u306a\u304f": 332, "\u6b63\u3057\u304f": 332, "(numpyminimumeigensolver": [332, 333, 334, 336], "\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af": 333, "\u91d1\u878d": [333, 334], "\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30ba": 333, "\u30fb\u30ea\u30b5\u30fc\u30c1": 333, "\u6df7\u5408": [333, 335], "\u4ee5\u4e0bmbco": 333, "\u89e3\u304f": [333, 338, 339], "\u8a2d\u8a08": [333, 335], "(p": [333, 334], "\u53d6\u308a\u7d44\u3080": 333, "\\min": [333, 335], "mathcal": 333, "\\mathcal": 333, "{u": [333, 335], "subseteq": 333, "mathbb": [333, 335], "{r": [333, 335], "+ \\": [333, 334], "varphi": 333, "(u": [333, 339], "\u5bfe\u8c61": [333, 334, 335], "\\mathrm": [333, 334], "{s": 333, ".t": [333, 335, 336], ".:": 333, "~}": 333, "ell": 333, "\u4eee\u5b9a": [333, 334], "\u6b63\u65b9": 333, "intercal": 333, "= x": 333, "^n": [333, 335], "(i": [333, 334, 335, 336], "forall": [333, 334, 335], "\u5f37\u5236": [333, 335], "\\mathbb": 333, "'}": 333, "\\varphi": 333, "\u51f8\u96c6\u5408": 333, "\\ell": 333, "\\times": [333, 338], "\u4e00\u4f53": 333, "mbo": 333, "\u4ea4\u4e92": 333, "\u65b9\u5411": 333, "\u4e57\u6570": 333, ")[": [333, 334, 335], "\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u30b9": 333, "\u3002admm": 333, "\u51f8\u6700": 333, "\u9069\u5316": [333, 335], "\u9577\u3044": 333, "\u6b74\u53f2": 333, "\u5206\u5272": [333, 337], "\u51f8\u6027": 333, "\u6210\u308a\u7acb\u3064": 333, "\u6b8b\u5dee": 333, "\u53cc\u5bfe": 333, "\u53ce\u675f": [333, 334], "\u7279\u6027": 333, "\u5206\u89e3": [333, 340], "\u4ecb\u3057": [333, 335, 340], "qubo\u30b5\u30d6": 333, "\u52b9\u7387": [333, 334], "\u51f8\u5236": 333, "\u7d04\u4ed8": 333, "\u30b5\u30d6": 333, ");": 333, "\u5404\u53cd": [333, 340], "($": 333, "\\ldots": 333, "\u884c\u3044": [333, 338], "\u51f8\u554f\u984c": 333, "\u30b3\u30b9\u30c8": [333, 335, 340], "\u8fd4\u3059": 333, "\u5b9f\u73fe": [333, 335, 338], "\u6761\u4ef6": [333, 334, 335], "\u5305\u62ec": 333, "\u8b70\u8ad6": [333, 335], "\u30d6\u30ed\u30c3\u30af": [333, 340], "\u30d0\u30ea\u30a2\u30f3\u30c8": 333, "\u30ed\u30fc\u30c9": [333, 335, 339, 340], ".pyplot": [333, 334, 335, 336, 340], "plt": [333, 334, 335, 336, 340], "cobylaoptimizer": 333, ".admm": 333, "admmoptimizer": 333, "uncomment": 333, "line": 333, ".optimization": [333, 340], "\u4e88\u5b9a": 333, "\u9078\u629e": [333, 334, 335, 337, 340], "\uff08cplex": 333, "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": [333, 335, 337, 339], "\u305d\u3057": 333, "\u3069\u3061\u3089\u304b": 333, "\u4ee3\u66ff": [333, 335, 340], "\u51f8\u9023": 333, "\u3001qubo": 333, "\u7528\u3044": 333, "minimeigenoptimizer": 333, "\u691c\u8a3c": 333, "\u884c\u3046": [333, 334, 338], "handle": 333, "=basicaer": 333, "benchmark": 333, "qubos": 333, ")\u3002": [333, 335], "\u305d\u308c": [333, 334, 335, 338, 339], "ex6": 333, "cons": 333, "\u3002\u307e\u305a": 333, "\u89e3\u304d": [333, 337, 338], "\u304b\u3064": 333, "\u51f8\u554f": 333, "\u5f8c\u8ff0": 333, "\u3044\u308c": 333, "\u30ab\u30b9\u30bf\u30de\u30a4\u30ba": 333, "\u5f15\u6570": [333, 340], "\\rho": 333, "\u304c\u305d\u308c\u305e\u308c": 333, "gx": 333, "\u4e00\u6b21": 333, "\u8a31\u5bb9": 333, "\u8aa4\u5dee": 333, "\u5b9a\u7406": 333, "\u4fdd\u8a3c": [333, 334, 335], "\u30a2\u30af\u30c6\u30a3\u30d6": [333, 335], "=false": [333, 340], "\u5b9f\u8cea": 333, "_params": 333, "0e": 333, "\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9": [333, 334, 335, 336, 337, 338, 340], "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6": 333, "\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc": 333, "\u5206\u96e2": 333, "=admm": 333, "=qubo": 333, "=convex": 333, "\u30d7\u30ea\u30f3\u30c8": 333, "\u6c7a\u5b9a": [333, 334, 335, 340], "\u306f\u305d\u306e": 333, "\u30d5\u30a3\u30fc\u30eb\u30c9": 333, "\u89e3\u6790": 333, "\u539f\u59cb": 333, "\u89b3\u70b9": [333, 334], ".plot": [333, 335, 336], ".state": 333, ".residuals": 333, ".xlabel": [333, 336], ".ylabel": [333, 336], ".show": [333, 335, 336], "\u30b7\u30df\u30e5\u30ec\u30fc\u30c8": 333, "\u30bd\u30eb\u30d0\u30fcqaoa": 333, "\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30d0\u30c3\u30af\u30a8\u30f3\u30c9": 333, "_q": 333, ".clf": 333, "examples": [334, 335], "_max": 334, "_tsp": 334, "\u5de5\u5b66": 334, "\u5b9a\u91cf": 334, "\u5206\u91ce": 334, "\u8907\u96d1": 334, "\u610f\u601d": 334, "\u6226\u7565": [334, 340], "\u4e2d\u5fc3": 334, "\u6700\u9069\u5316": [334, 335], "\u7d44\u5408": [334, 335, 337], "\u6709\u9650": 334, "\u52a0\u7b97": 334, "\u7121\u9650": 334, "\u6f5c\u5728": 334, "\u7b56\u96c6": 334, "\u63a2\u7d22": 334, "\u610f\u5473": [334, 335, 340], "\u57fa\u6e96": 334, "\u5178\u578b": 334, "\u6700\u5c0f\u5316": [334, 340], "\u8ddd\u96e2": [334, 335, 337], "\u30c8\u30e9\u30d0\u30fc\u30b5\u30eb": 334, "\u9577\u3055": [334, 340], "\u91cd\u91cf": [334, 337], "\u8cc7\u6750": 334, "\u30a8\u30cd\u30eb\u30ae\u30fc": [334, 340], "\u6d88\u8cbb": 334, "\u6700\u5927\u5316": 334, "\u5229\u76ca": 334, "\u4fa1\u5024": [334, 335, 336], "\u751f\u7523": 334, "\u30ea\u30bf\u30fc\u30f3": 334, "\u5229\u56de\u308a": 334, "\u5bb9\u91cf": [334, 337], "\u5b9f\u7528": 334, "\u306b\u3059\u308c": 334, "\u624b\u52d5": 334, "\u5b8c\u5168": [334, 335, 337, 340], "\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0": 334, "\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b5\u30a4\u30a8\u30f3\u30b9": 334, "\u7269\u7406": 334, "\u5fdc\u7528": 334, "\u628a\u63e1": 334, "\u4eba\u3005": 334, "\u76f8\u4e92": [334, 340], "\u4f5c\u7528": 334, "\u5f71\u97ff": 334, "\u53ca\u307c": 334, "\u3042\u3046": 334, "\u30b7\u30b9\u30c6\u30e0": 334, "\u307f\u3066": 334, "\u500b\u4eba": 334, "\u9802\u70b9": 334, "\u30a8\u30c3\u30b8": [334, 335, 337, 340], "\u30da\u30a2\u30ef\u30a4\u30ba": [334, 335], "\u63a5\u7d9a": [334, 335, 337, 340], "\u5ff5\u982d": 334, "\u7f6e\u304f": 334, "\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0": 334, "\u304a\u4e92\u3044": 334, "\u8cfc\u8cb7": 334, "\u60f3\u5b9a": [334, 340], "\u3069\u308c": 334, "\u307b\u3069": 334, "\u5f37\u3044": 334, "\u77e5\u8b58": [334, 340], "\u5272\u308a": 334, "\u5f53\u3066": 334, "\u88fd\u54c1": 334, "\u7121\u6599": [334, 339], "\u4e88\u6e2c": 334, "\u53ce\u76ca": 334, "\u5165\u624b": [334, 340], "\u554f\u3046": 334, "\u3002:": 334, "\u30ce\u30fc\u30c9": [334, 335, 337], "\u7121\u5411": [334, 337], "|v": 334, "= n": 334, ")\\": [334, 335], "\u306b\u304a\u3051\u308b": 334, "ij": [334, 335], "}>": [334, 335], "ji": [334, 335], "\u30bb\u30c3\u30c8v": 334, "\uff12\u3064": [334, 337], "\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3": 334, "\u4ea4\u5dee": 334, "\u5408\u8a08": [334, 335, 337], "\u5272\u308a\u5f53\u3066\u308b": 334, "\u5316\u3057": 334, "\u3053\u3053\u3068": 334, ",\u2026": 334, "\\tilde": 334, "{c": [334, 338], "}(": [334, 335], "textbf": 334, "\u5358\u7d14": [334, 335], "\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u30e2\u30c7\u30eb": 334, "\u5165\u308c": 334, "\u8cfc\u5165": 334, "\u539f\u5247": 334, "\u5927\u304d\u304f": 334, "\u500b\u3005": [334, 335], "\u7dcf\u8cfc": 334, "\u5165\u78ba": 334, "\u5c06\u6765": 334, "\u7dcf\u5229": 334, "\u597d\u90fd\u5408": 334, "\u306a\u3082\u306e": [334, 335], "\u81ea\u4f53": 334, "\u305f\u3061": [334, 335], "\u306a\u3059": 334, "(\\": [334, 335, 338], ")+": 334, "\u304a\u3044": 334, "\u89e3\u6c7a\u7b56": 334, ")/": 334, "\u4ee3\u5165": 334, "\\pm": 334, "\u30d1\u30a6\u30eaz": 334, "{z": 334, "frac": 334, "{w": 334, "}}": [334, 335], ")(": [334, 335], "+z": 334, "-\\": [334, 339], "\\right": 334, "mathrm": [334, 335], "{const": 334, "= \\": [334, 335], "}w": 334, "}/": 334, "+\\": 334, "\u8a00\u3044": 334, "_iz": 334, "\u8fd1\u5e74": 334, "\u6027\u8cea": [334, 335], "\u8003\u3048\u308b": [334, 335], "\u6700\u826f": [334, 340], "\u6bd4\u8f03": [334, 338, 339], "\u6307\u6570": [334, 338], "\u52a0\u901f": 334, "\u3002\u3057\u304b\u3057": [334, 338], "\u306a\u304c\u3089": 334, "\u9ad8\u901f": [334, 335], "\u5f97\u308b": [334, 339], "\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af": [334, 335], "\u307f\u3044": 334, "\u3060\u305b": 334, "farhi": [334, 335], "goldstone": [334, 335], "gutmann": [334, 335], "\u524d\u63d0": [334, 335], "\u30bf\u30fc\u30b2\u30c3\u30c8": 334, "\u3055\u3089\u306b": [334, 335], "\u7d2f\u4e57": 334, "\u8a31\u53ef": [334, 335], "\u9069\u5fdc": [334, 335], "\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb": [334, 335], "\\theta": [334, 335, 338], "\u30bb\u30c3\u30c8": [334, 335, 336, 337], "\u6210\u5206": [334, 335, 338], "\u5236\u5fa1": [334, 335, 338], "\u4f4d\u76f8": [334, 335], "\u30b2\u30fc\u30c8": [334, 335, 340], "\u5358\u4e00\u91cf\u5b50": [334, 335, 340], "\u30d3\u30c3\u30c8": [334, 335, 338, 340], "\u56de\u8ee2": [334, 335, 338], "\u8a66\u884c": [334, 335], "\\psi": [334, 335], "boldsymbol": [334, 335], "\u8a55\u4fa1": [334, 335], "langle": [334, 335], ")~": 334, "|h": [334, 335], "|~": 334, "psi": [334, 335], "\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0": [334, 335, 338], "\u671f\u5f85": [334, 335, 336, 340], "\\boldsymbol": [334, 335], "\u5468\u8fba": [334, 335], "\u63a8\u5b9a": [334, 335], "\u6700\u5c0f\u5024": [334, 335, 336], "\u9054\u3059\u308b": [334, 335], "\u7d9a\u3051": [334, 335], "^*": [334, 335, 338], "\u5341\u5206": [334, 335, 338], "\u8fd1\u3065\u3051": [334, 335], "\\langle": 334, "~|": 334, "|^": [334, 335], "\\;": [334, 335], "\u6700\u7d42": [334, 335], "\u7b54\u3048": [334, 335], "\u512a\u308c": 334, "\u96e3\u3057": 334, "\u6ce2\u52d5": [334, 335], "\u5e30\u7740": [334, 338], "\u4fe1\u5ff5": 334, "\u30a8\u30f3\u30bf\u30f3\u30b0\u30eb\u30e1\u30f3\u30c8": 334, "\u3088\u304f": [334, 340], "\u4e00\u81f4": [334, 335], "= [": [334, 335], "_\\": [334, 335], "{single": [334, 335], "{entangler": [334, 335], "}]": [334, 335], "^m": [334, 335], "\u7d61\u307f\u5408\u3046": 334, "\u30b3\u30ec\u30af\u30b7\u30e7\u30f3": [334, 337], "prod": [334, 335], "\u52d5\u6a5f": 334, "\u901f\u304f": 334, "\u65ad\u71b1": 334, "\u5229\u70b9": 334, "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2": [334, 340], "\u9650\u5b9a": 334, "_jz": 334, "_k": 334, "\u9ad8\u6b21": 334, "\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0": 334, "\u975e\u73fe": 334, "\u5b9f\u7684": 334, "\u53c2\u8003": 334, "\u6587\u732e": 334, "frontiers": 334, "physics": 334, "-print": [334, 335], "wecker": 334, "hastings": 334, "troyer": 334, "rev": [334, 340], "neven": 334, "\u984c\u7528": 334, "\u3001\u300c": [334, 335], "useful": 334, "packages": [334, 335], ".axes": 334, "axes": 334, "nx": [334, 337], ".circuit": [334, 335, 336, 338, 340], ".library": [334, 335, 336, 340], "twolocal": [334, 335], ".applications": [334, 337], "maxcut": 334, "tsp": 334, ".optimizers": [334, 335, 336, 339, 340], ".graph": 334, "_from": 334, "(np": [334, 335, 338], ".arange": 334, "elist": 334, ")]": [334, 335, 336], "_weighted": 334, "(elist": 334, "[\"": [334, 340], ".nodes": 334, ".spring": [334, 337], "_layout": [334, 337], "(g": [334, 335], "_graph": [334, 337], "_axes": 334, "(frameon": 334, ".draw": [334, 337, 338, 340], "_networkx": 334, "_color": 334, "=colors": 334, "_size": 334, "ax": 334, "=default": 334, "=pos": [334, 337], "_labels": 334, "_edge": 334, "_attributes": 334, "=edge": 334, ".zeros": [334, 335, 336, 340], "(n": [334, 335, 336, 340], "temp": 334, "_data": 334, "\"]": [334, 340], "(w": [334, 335], "[[": 334, "\u8a66\u3057": 334, "\u6301\u3063": 334, "\u6271\u3046": [334, 338], "_cost": [334, 335, 340], "_brute": 334, "(t": 334, "reversed": [334, 336], "(list": [334, 340], "(bin": 334, ":]": [334, 335], "zfill": 334, "* x": [334, 336, 338, 340], "xbest": 334, "(cost": [334, 338], "nbest": 334, "(xbest": 334, "(best": 334, "\u4ed5\u69d8": 334, "qubitop": 334, ", offset": 334, "(str": [334, 335], "(qubitop": 334, "iizz": 334, "iziz": 334, "izzi": 334, "ziiz": 334, "zzii": 334, "\u4e00\u81f4\u3057": [334, 335], "making": 334, "lowest": 334, "eigenvector": 334, "ee": 334, ".compute": [334, 335, 336], "_minimum": 334, "_eigenvalue": 334, ".sample": 334, "_most": 334, "_likely": 334, ".eigenstate": [334, 336], "energy": [334, 340], ", result": [334, 337], ".eigenvalue": 334, ".real": [334, 340], ", x": 334, ".evaluate": [334, 336], "\u30a8\u30f3\u30bf\u30f3\u30b0\u30e9\u30fc": 334, "\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30eb\u30fc\u30d7": 334, "_statevector": [334, 336], "(backend": [334, 336, 339, 340], "=seed": [334, 337], "(maxiter": [334, 336, 339, 340], ".num": [334, 336, 337, 340], "cz": 334, "entanglement": 334, "(ry": 334, "=spsa": 334, ".optimizer": [334, 337, 340], "(vqe": [334, 336], "\u4e16\u7d00": 334, "\u4ee5\u4e0a": [334, 335], "\u306b\u308f\u305f\u308a": 334, "\u79d1\u5b66": 334, "\u5f15\u3044": 334, "\u60aa\u540d": 334, "\u793a\u5506": 334, "\u8ca1\u52d9": 334, "\u901a\u4fd7": 334, "\u5546\u54c1": 334, "\u8ca9\u58f2": 334, "\u90fd\u5e02": 334, "\u884c\u304f": 334, "\u8a2a\u308c": [334, 337], "\u6545\u90f7": 334, "\u65c5\u884c": 334, "\u623b\u308b": [334, 335], "\u6700\u77ed": 334, "\u58f2\u4e0a": 334, "\u96e3\u6613\u5ea6": 334, "\u95a2\u9023": [334, 335], "\u666e\u904d": 334, "\u8d77\u56e0": 334, "\u521d\u982d": 334, "\u3001w": 334, ".r": [334, 336], "\u30cf\u30df\u30eb\u30c8\u30f3": 334, "\u521d\u671f": [334, 335, 338], "\u5206\u6790": 334, "\u4f34\u3046": 334, "\u62bd\u8c61": 334, "\u901a\u904e": 334, "\u30b5\u30a4\u30af\u30eb": 334, "\u8981\u6c42": 334, "\u9589\u3058": 334, "\u7d4c\u8def": 334, "\u4e0d\u660e": 334, "\u591a\u9805": [334, 335], "\u4e88\u60f3": 334, "=|": 334, ",e": 334, ",p": 334, "\u3068\u308a": 334, "\u3002\u3059\u3079\u3066": 334, "\u51fa\u73fe": 334, "\u4ee5\u964d": [334, 335], "\u88ab\u52a0": 334, "\u6e21\u308a": 334, "\\sum": [334, 335], "~\\": 334, "notin": 334, "\u30fb\u30da\u30ca\u30eb\u30c6\u30a3": 334, "\u306f\u305a": 334, "\u901a\u308a": [334, 335], "\\notin": 334, "=n": [334, 335], "equiv": 334, "\u5883\u754c": [334, 335], "\u3044\u307e\u305b": 334, "=\\": [334, 338], "\u3053\u308c\u3089\u3059\u3079\u3066": 334, "\u76ee\u6a19": 334, "\u307e\u3068\u3081\u3066": 334, "}+": 334, "_p": 334, "\\left": 334, "+a": 334, "\u81ea\u7531": 334, "\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc": [334, 335, 339, 340], "\u5c0a\u91cd": 334, "\u5927\u304d\u3044": [334, 335], "{max": 334, "\u3068\u306a\u308b": 334, ".create": 334, "_random": 334, "_numpy": 334, "(tsp": 334, "distance": [334, 335], "[node": 334, "][": [334, 335, 336], "itertools": 334, "permutations": 334, "brute": 334, "_force": 334, "(permutations": 334, "(range": [334, 336], "_best": 334, "_distance": 334, "[pre": 334, "_order": 334, "(order": 334, "(distance": 334, "(adj": 334, "force": 334, "g2": 334, ".digraph": 334, "% n": 334, "=g": 334, "[order": 334, "font": 334, "qp2qubo": 334, "2qubo": 334, "iiiiiiiiz": [334, 337], "iiiiiiizi": [334, 337], "iiiiiizii": [334, 337], "iiiiiziii": [334, 337], "iiiiziiii": [334, 337], "iiiziiiii": [334, 337], "iiziiiiii": [334, 337], "iziiiiiii": [334, 337], "ziiiiiiii": [334, 337], "iiiiiiizz": [334, 337], "iiiiiiziz": [334, 337], "iiiiiizzi": [334, 337], "iiiiiziiz": [334, 337], "iiiiizizi": [334, 337], "iiiiizzii": [334, 337], "iiiiziiiz": [334, 337], "iiiiziizi": [334, 337], "iiiizizii": [334, 337], "iiiizziii": [334, 337], "iiiziiiiz": [334, 337], "iiiziiizi": [334, 337], "iiiziizii": [334, 337], "iiiziziii": [334, 337], "iiizziiii": [334, 337], "iiziiiiiz": [334, 337], "iiziiiizi": [334, 337], "iiziiizii": [334, 337], "iiziiziii": [334, 337], "iiziziiii": [334, 337], "iizziiiii": [334, 337], "iziiiiiiz": [334, 337], "iziiiiizi": [334, 337], "iziiiizii": [334, 337], "iziiiziii": [334, 337], "iziiziiii": [334, 337], "iziziiiii": [334, 337], "izziiiiii": [334, 337], "ziiiiiiiz": [334, 337], "ziiiiiizi": [334, 337], "ziiiiizii": [334, 337], "ziiiiziii": [334, 337], "ziiiziiii": [334, 337], "ziiziiiii": [334, 337], "ziziiiiii": [334, 337], "zziiiiiii": [334, 337], ", qubo": 334, "_feasible": 334, ".interpret": [334, 337], ", z": 334, ", tsp": 334, ".tsp": 334, "(z": [334, 335, 340], "warnings": 334, ".filterwarnings": 334, "ignore": 334, "category": 334, "=userwarning": 334, "\u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9": 335, "\u7523\u696d": 335, "\u4e16\u754c": 335, "\u30c9\u30eb": 335, "\u63a8\u8a08": 335, "\u30b5\u30fc\u30d3\u30b9\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc": 335, "\u591a\u6570": 335, "\u8eca\u4e21": [335, 337], "\u30c8\u30e9\u30c3\u30af": 335, "\u30b3\u30f3\u30c6\u30ca": 335, "\u591c\u9593": 335, "\u62e0\u70b9": 335, "\u30c7\u30dd": 335, "\u904b\u55b6": 335, "\u6bce\u65e5": 335, "\u5404\u8eca": 335, "\u30af\u30e9\u30a4\u30a2\u30f3\u30c8": 335, "\u5834\u6240": 335, "\u30b5\u30fc\u30d3\u30b9": 335, "\u305f\u304f": [335, 338], "\u3055\u3093": [335, 338], "\u8a08\u7b97\u4e0a": 335, "\u8ab2\u984c": 335, "\u884c\u3063": [335, 338], "\u30eb\u30fc\u30c8": [335, 337], "\u3059\u308c": 335, "\u8d70\u884c": 335, "\u8cbb\u3084": 335, "\u985e\u3059\u308b": 335, "\u7406\u60f3": 335, "gutman": 335, "\u30ef\u30fc\u30af\u30d5\u30ed\u30fc": [335, 340], "\u78ba\u7acb": 335, "\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9": 335, "\u914d\u4fe1": 335, "\u79fb\u52d5": 335, "\u30ab\u30e9\u30b9": 335, "\u98db\u3076": 335, "\u30e6\u30fc\u30af\u30ea\u30c3\u30c9": 335, "\u304a\u305d\u3089\u304f": 335, "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc": [335, 337], "\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 335, "\u8996\u899a": 335, "\u30d7\u30ed\u30c3\u30c8": 335, "\u30c7\u30fc\u30bf": 335, "\u9032\u3080\u524d": 335, "\u6570\u5b66\u7684": 335, "\uff08vehicle": 335, "vrp": 335, "\u623b\u308a": [335, 340], "\u5de1\u56de": [335, 337], "\u30bb\u30fc\u30eb\u30b9\u30de\u30f3": [335, 337], "applegate": 335, "mtz": 335, "miller": 335, "tucker": 335, "zemlin": 335, "\u30bb\u30b0\u30e1\u30f3\u30c8": 335, "\u30ce\u30fc\u30c9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9": 335, "\u6163\u4f8b": 335, "\uff09\u30c7\u30dd": 335, "\u30ea\u30f3\u30af": 335, "sim": 335, "\u9650\u308a": [335, 338], "\\delta": 335, "delta": 335, "\u3001i": 335, "\u30b5\u30d6\u30c4\u30a2\u30fc": 335, "\u6392\u9664": 335, "(vrp": 335, "\\{x": 335, "}_{": 335, "\\sim": 335, ", \\": 335, "_{i": 335, "\u8a2a\u554f": 335, "+}": 335, "\\,": 335, "-}": 335, "0i": 335, "= k": 335, "\u9664\u53bb": 335, "-q": [335, 340], "neq": 335, "\u7279\u306b": [335, 340], "\u91cd\u307f": [335, 337, 340], "\u30a2\u30fc\u30c1": 335, "\u4e00\u9023": [335, 337], ">q": 335, "branch": 335, "-and": 335, "-bound": 335, "\uff08mixed": 335, "-integer": 335, "milp": 335, "\u30d1\u30c3\u30af": 335, "\\bf": 335, "]^": [335, 338], "\u6bd4\u4f8b": 335, "\u5f37\u8abf": 335, "\u304a\u304d": 335, "\u9650\u3089": 335, "\u96e3\u3057\u3044": [335, 338], "\u672c\u8cea": 335, "\u540c\u6642\u306b": 335, "\u3002\u3044\u304f\u3064\u304b": 335, "\u3067\u3057\u3087": 335, "\u8981\u7d04": 335, "\u5f0f\u6700": 335, "\u306a\u3089": [335, 338], "\u30da\u30ca\u30eb\u30c6\u30a3\u30fc": 335, "\u30fb\u30e1\u30bd\u30c3\u30c9": 335, "\\big": 335, "|\\": [335, 338], "\u901a\u3057": 335, "[u": 335, "|+": 335, "\u30a8\u30f3\u30bf\u30f3\u30b0\u30eb": 335, "\u96c6\u5408": [335, 337], "\u30e9\u30b0\u30e9\u30f3\u30b8\u30a2\u30f3": 335, "\u66f8\u304f": 335, "(ih": 335, "} \\": 335, "- k": 335, "\\dots": 335, "{\\": 335, "bf": 335, "^{n": 335, "({": [335, 339], "}_": 335, "otimes": 335, "^t": [335, 338], "= a": 335, "[(": 335, "\u7b2c\u4e8c": 335, "\u7b2c\u4e09": 335, "2an": 335, "2ak": 335, "\u30b9\u30bf\u30c3\u30af": 335, "programming": 335, "\u201d.": 335, "acm": 335, "doi": 335, "bixby": 335, "chv": 335, "\u00e1tal": 335, "cook": 335, "princeton": 335, "university": 335, "press": 335, "isbn": 335, "\u306a\u3059\u3079\u3066": 335, "\u5f93\u6765": 335, ".version": 335, "_info": 335, "please": 335, ".\"": [335, 338, 340], ".exceptions": 335, "cplexerror": 335, "warning": 335, "math": 335, ".quantum": 335, "\u5143\u5e73\u9762": 335, "\u914d\u7f6e": 335, "init": [335, 338], ".n": 335, "(self": 335, ".seed": 335, "xc": 335, ".rand": 335, "yc": 335, "ii": 335, "jj": 335, "(ii": 335, "[ii": 335, "[jj": 335, "randomly": 335, ".generate": 335, "ilogcplex": 335, "classicaloptimizer": 335, ".instance": 335, ".k": 335, "_allowed": 335, "_combinations": 335, ".factorial": 335, "/ f": 335, "refactoring": 335, "_obj": 335, "(instance": 335, ".reshape": 335, "1)": [335, 340], "_ub": 335, "_lb": 335, "_ctype": 335, "\"i": 335, "\"\"": [335, 338, 340], "[\"c": 335, "_rhs": 335, "_sense": 335, "\"e": 335, "n)]": 335, "\"l": 335, "_prob": 335, ".populatebyrow": 335, "(my": 335, "exc": 335, "(exc": 335, ".solution": 335, "_values": [335, 336], ".array": [335, 336, 338, 340], "_objective": 335, "populatebyrow": 335, "prob": [335, 337], ".set": 335, "(prob": 335, "(obj": 335, "=my": 335, "lb": [335, 339], "_log": 335, "_stream": 335, "(none": 335, "_warning": 335, "rows": 335, "col": 335, "[x": 335, "coef": 335, "-tour": 335, "elimination": 335, "_constraints": 335, "(lin": 335, "_expr": 335, "=rows": 335, "senses": 335, "instantiate": 335, "(classical": 335, "fashion": 335, "put": 335, "/ n": 335, "missing": 335, "visualize": 335, "(xc": 335, "title": 335, "_str": [335, 340], ".figure": [335, 336], ".scatter": 335, "(len": [335, 336, 338], ".annotate": 335, ", size": 335, "color": 335, "\"r": [335, 336], "*\"": 335, ", ms": 335, ".grid": 335, "ix": 335, "iy": 335, ".arrow": 335, "[ix": 335, "[iy": 335, "_includes": 335, "_head": 335, "head": 335, "_width": 335, ".title": 335, "(title": 335, "(int": [335, 338, 340], "(c": [335, 338], "\u661f\u4ed8\u304d": 335, "\u77e2\u5370": 335, "\u4ed8\u304d": 335, "quantumoptimizer": 335, "\u5c0e\u304d\u51fa\u3057": 335, "_representation": 335, "(m": 335, "\u4ee3\u6570": 335, "minimuneigenoptimizer": 335, "_sol": 335, ".max": 335, "# a": 335, "determine": 335, "_vec": 335, "_list": [335, 336, 340], "= w": 335, ".eye": 335, "im": 335, ".ones": 335, "iv": 335, "neg": 335, "_iv": 335, "/ (": 335, "!=": 335, "vn": 335, ".sum": [335, 336, 338], ", axis": 335, "interactions": 335, ".kron": 335, "(id": 335, ".dot": 335, "# g": 335, "contribution": 335, "individual": 335, "(iv": 335, "(neg": 335, "+ v": 335, "[0": 335, "(k": 335, "evaluates": 335, "path": 335, "fun": 335, "lambda": [335, 336], ".around": 335, "qasm": [335, 336, 337], "(min": [335, 337], "=vqe": 335, ", _": 335, ", level": 335, "=result": 335, "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u30af\u30e9\u30b9": 335, "\uff08ih": 335, "-qp": 335, "\u6574\u5408\u6027": 335, "\u78ba\u8a8d": [335, 338, 340], "\u540c\u3058\u89e3": 335, "=z": 335, ", binary": 335, ", classical": 335, ".abs": [335, 336], "(binary": 335, "could": 335, "verify": 335, "correctness": 335, "unavailable": 335, "nameerror": 335, "cells": 335, "above": [335, 340], ".construct": 335, "\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3": 335, "\u304b\u304b\u308b": 335, "\u304b\u304b\u308a": 335, "\u30ed\u30ae\u30f3\u30b0": 335, "_quantum": 335, "kk": 335, "[kk": 335, "comparison": 335, "\u305f\u307e\u305f": 335, "ilp": 335, "\u53d6\u308a\u7d44\u3093": 335, "\u5c40\u6240": 335, "\u56f0\u96e3": [335, 338], "conditional": 336, "risk": 336, "\uff08cvar": 336, "\u5ba2\u89b3": 336, "\u30b7\u30e7\u30c3\u30c8": [336, 340], "\u4fe1\u983c": 336, "\u6c34\u6e96": 336, "\\alpha": [336, 340], "\u30d9\u30b9\u30c8\u30b7\u30e7\u30c3\u30c8": 336, "\u306f\u3088\u308a": 336, "\u7126\u70b9": 336, "\u5408\u308f\u305b\u308b": 336, "\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5": 336, "\u30e9\u30f3\u30c9\u30b9\u30b1\u30fc\u30d7": 336, "\u30b9\u30e0\u30fc\u30ba": 336, "barkoutsos": [336, 340], "improving": [336, 340], "realamplitudes": 336, "pauliexpectation": [336, 340], "cvarexpectation": [336, 340], "linearequalitytopenalty": 336, "execute": 336, "prepare": 336, "assets": 336, "budget": 336, "scaling": 336, "sigma": [336, 338], "portfolio": 336, "covariance": 336, "= q": 336, "(objective": [336, 338], "opt": 336, "(opt": 336, "further": 336, "analysis": 336, "would": 336, "necessary": 336, "translation": 336, "(penalty": 336, "=penalty": 336, "_,": 336, "=maxiter": 336, "simlator": 336, "alphas": 336, "confidence": 336, "levels": 336, "progress": 336, "objectives": 336, "[]": 336, "tested": 336, "stddev": 336, "[alpha": 336, "+=": 336, "-(": 336, "loop": 336, "_alpha": 336, "_exp": 336, "(alpha": [336, 340], "_variance": 336, "fixed": 336, "pr": 336, "=cvar": 336, "=optimizer": 336, "=ansatz": 336, "=lambda": [336, 338], "-vqe": 336, "_alg": 336, "}:": 336, "(figsize": 336, "--": [336, 339, 340], "linewidth": 336, "label": 336, "(objectives": 336, "2f": 336, ".legend": 336, "(loc": 336, "fontsize": 336, ".xlim": 336, ".xticks": 336, "(fontsize": 336, ".yticks": 336, "sb": 336, "}\"": [336, 340], "ind": [336, 339], ".argsort": 336, "= \"": [336, 340], "(counts": 336, ".values": [336, 340], "val": 336, ".items": 336, "(key": 336, "probabilitiy": 336, "%.": 336, "4f": 336, "% (": 336, "[ind": 336, "1:": 336, "_classes": 337, "\u69d8\u3005": 337, "\u8a66\u307f\u308b": 337, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9": 337, "\u30a2\u30a4\u30c6\u30e0": 337, "\uff11\u56de": 337, "\u30ab\u30d0\u30fc": 337, "\u30b5\u30d6\u30b3\u30ec\u30af\u30b7\u30e7\u30f3": 337, "\u63a2\u3057": 337, "\u30de\u30eb\u30c1\u30bb\u30c3\u30c8": 337, "\u6240\u4e0e": 337, "\u7b49\u3057\u3044": 337, "\u30d1\u30c3\u30ad\u30f3\u30b0": 337, "\u4e92\u3044": 337, "\u30af\u30ea\u30fc\u30af": 337, "\u8a98\u5c0e": 337, "\u6570\u307e": 337, "\u30ab\u30c3\u30c8": [337, 340], "\u4e8c\u3064": 337, "\u5b89\u5b9a": 337, "\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0": 337, "\u5009\u5eab": 337, "\u8eca\u8f0c": 337, "\u9664\u304f": 337, "\u6700\u4f4e": 337, "\u4e00\u3064": 337, "\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8": 337, "\u30ce\u30fc\u30c9\u30b5\u30d6\u30bb\u30c3\u30c8": 337, "\u63cf\u753b": 337, "\u3042\u3089\u304b\u3058\u3081": 337, "\u4f8b\u3068\u3057\u3066": 337, "vertexcover": 337, "\u30e9\u30f3\u30c0\u30e0\u30b0\u30e9\u30d5": 337, ".vertex": 337, "qins": [337, 339], "=aer": [337, 339], ", shots": [337, 339], "_regular": 337, "(d": 337, "(graph": 337, "(pos": 337, "\u89e3\u3051": 337, "\u3002qaoa": [337, 340], "meo": [337, 339], "=numpyminimumeigensolver": 337, "nsolution": 337, ", prob": 337, "=qaoa": [337, 338], "(reps": 337, "=qins": [337, 339], "ntime": 337, ".min": 337, "\u7dcf\u91cd": 337, "\u7dcf\u4fa1": 337, "knapsack": 337, "(values": 337, "previous": 337, "c0": [337, 339], "\"num": 337, "_qaoa": 338, "\u3057\u3070\u3057\u3070": 338, "\u3059\u306a\u308f\u3061": [338, 339], "\\sigma": 338, "^tx": 338, "-hard": 338, "\u306a\u306e": 338, "\u5bfe\u89d2": 338, "\\mu": 338, "\u3084\u3059\u3044": 338, "\u534a\u6b63": 338, "\u5b9a\u5024": 338, "\u89e3\u3051\u308b": 338, "marecek": 338, "modelling": 338, "imports": 338, ".algorithm": 338, "_to": 338, "_qubo": 338, "\u534a\u78ba": 338, "\u5b9a\u6b63": 338, "\u30ea\u30e9\u30c3\u30af\u30b9": 338, "\u3057\u3084\u3059\u3044": 338, "(mu": 338, "\"\"\"": [338, 340], "%s": 338, "% i": 338, "(sigma": 338, "change": 338, ".deepcopy": 338, ".vartype": 338, "x4": 338, "x5": 338, "\u306b\u304f\u3044": 338, "\u5c0f\u3055\u3044": [338, 340], "\u6301\u3061": 338, "\u5185\u90e8": 338, "\u6574\u5408": [338, 340], "\u4fdd\u3064": 338, "(quadraticprogramtoqubo": 338, "\u7570\u306a\u308a": 338, "sol": 338, "(sol": 338, "_stars": 338, "\u4f9d\u7136": 338, "\u4f7f\u3044": [338, 339], "phi": 338, "bigotimes": 338, ")|": 338, "arcsin": 338, "thetas": 338, ".arcsin": 338, ".sqrt": 338, "_star": 338, "_qc": 338, "idx": [338, 340], "(thetas": 338, ".ry": 338, "(output": 338, "mpl": [338, 340], "\u30df\u30ad\u30b5\u30fc": 338, "\u306a\u3063": 338, "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": 338, "\u9078\u3073": 338, ",i": 338, "ws": 338, "=\n\\": 338, "begin": 338, "{pmatrix": 338, "2c": 338, "-i": 338, "\\beta": [338, 340], "\u4e57\u3058": 338, "\u3068\u308b": 338, "\u03b2\"": 338, "_mixer": 338, ".rz": [338, 340], "\u3053\u3046\u3057\u3066": 338, "\u6e21\u3059": 338, "=init": 338, "=ws": 338, "(ws": 338, "\u3069\u3061\u3089": 338, "\u89b3\u5bdf": 338, "\u9ad8\u304f": 338, "_len": 338, "(_": 338, ", s": 338, "sorted": 338, "+ f": 338, "{_": 338, "3f": 338, "*_": 338, "1f": 338, "}%": 338, "%&": 338, "warmstartqaoaoptimizer": 338, "=cplexoptimizer": 338, ", relax": 338, "_classical": 339, "_solvers": 339, "_models": 339, "groubi": 339, "groubipy": 339, "api": 339, "\u4fdd\u5b58": 339, "\u95a2\u4fc2": 339, "\u5236\u9650": 339, "\u3002\u307e\u305f": [339, 340], "7\u6708": 339, "(quadratic": 339, "(cplex": 339, "(gurobi": 339, "restricted": 339, "-production": 339, "expires": 339, "\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8": 339, "(disp": 339, "threads": 339, "timelimit": 339, "identifier": 339, "fbec": 339, "cpxparam": 339, "_read": 339, "_datacheck": 339, "_threads": 339, "_timelimit": 339, "incumbent": 339, "sec": 339, "ticks": 339, "processing": 339, "&amp": 339, ";c": 339, "sequential": 339, "+branch": 339, ";cut": 339, "(cobyla": 339, "ndisplay": 339, "[:": [339, 340], "(sample": 339, "= y": 339, "//": 339, "single": [339, 340], "dvar": 339, "gp": 339, ".addvar": 339, "(vtype": 339, "=gp": 339, ".grb": 339, ".setobjective": 339, ".addconstr": 339, ".update": 339, ".display": 339, ";gurobi": 339, ".quadexpr": 339, "y ]": 339, "r0": 339, ".linexpr": 339, "general": 339, "\u898b\u3066": 339, "\u307f\u307e\u3057\u3087": 339, "_gurobipy": 339, "(docplex": 339, "docpblex": 339, "-\"": 339, "(gurobipy": 339, "(qp2": 339, "gmod": 339, "(from": 339, "dmod": 339, "nconvert": 339, "(dmod": 339, "> x": 339, "= z": 339, "_mod": 339, "_indicator": 339, "(ind": 339, "lc1": 339, "\u305a\u306b": 339, "\u3002cplex": 339, "\u30cd\u30a4\u30c6\u30a3\u30d6": 339, "ncplex": 339, "_runtime": 340, "qiskit\u30e9\u30f3\u30bf\u30a4\u30e0": 340, "\u30d0\u30c3\u30af\u30a8\u30f3\u30c9": 340, "qaoa\u30e9\u30f3\u30bf\u30a4\u30e0": 340, "ibmq": 340, ".load": 340, "_account": 340, "_provider": 340, "(hub": 340, "group": 340, "project": 340, "\u8abf\u3079": 340, "\u5024\u578b": 340, "\u8fd4\u3055": 340, "\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc": 340, "_id": 340, ".program": 340, "(program": 340, "\"program": 340, ".parameters": 340, "parameternamespace": 340, "description": 340, "optimizati": 340, "_initia": 340, "| a": 340, "measuremen": 340, "tensored": 340, "measurements": 340, "repetitions": 340, "depth": 340, "typically": 340, "labeled": 340, "_operat": 340, "[paulisumop": 340, "_po": 340, "`&": 340, ";`": 340, "smallest": 340, "trying": 340, "paulisumop": 340, "calibration": 340, "rate": 340, "_s": 340, "\u8a73\u3057\u304f": 340, "zz": 340, "\u3072\u3068\u3064": 340, "\u4e09\u89d2\u5f62": 340, "\u9589\u30eb\u30fc\u30d7": 340, "\u30ce\u30a4\u30ba": 340, "\u30ec\u30a4\u30e4\u30fc": 340, "\\gamma": 340, "\u521d\u671f\u5024": 340, "gamma": 340, "\uff08\u3064\u307e\u308a": 340, "\u53ce\u96c6": 340, "1\u3088\u308a": 340, "\u4fdd\u6301": 340, "\u8aad\u307f\u51fa\u3057": 340, "\u8efd\u6e1b": 340, "tensoredmeasfitter": 340, "\u53ef\u63db": 340, "\u7d50\u5408": 340, "\u5c02\u7528": 340, "\u30b9\u30ef\u30c3\u30d7": 340, "\u30aa\u30d7\u30b7\u30e7\u30f3": 340, "\u30ec\u30d9\u30eb": 340, "\u30c8\u30e9\u30f3\u30b9\u30d1\u30a4\u30e9\u30fc": 340, "cartan": 340, "kak": 340, "rzxgate": 340, "\u5171\u632f": 340, "\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 340, "\u9069\u5408": 340, "\u4e26\u3079": 340, "\u66ff\u3048": 340, "\u9806\u5217": 340, "kl": 340, "nannicini": 340, "robert": 340, "tavernelli": 340, "earnest": 340, "tornow": 340, "cross": 340, "-resonance": 340, "hardware": 340, "research": 340, "\u30af\u30e9\u30a6\u30c9": 340, "\u30b7\u30fc\u30e0\u30ec\u30b9": 340, "_monitor": 340, "- (": 340, "+ (": 340, "helps": 340, "deal": 340, "noisy": 340, "environments": 340, "programm": 340, "{\"": 340, "_qasm": 340, "\"}": 340, "described": 340, "_inputs": 340, "backends": 340, "reduce": 340, "optimizing": 340, "echoed": 340, "-cross": 340, ".run": 340, "=program": 340, "=options": 340, "=runtime": 340, "(job": 340, "successfully": 340, "\"job": 340, ".job": 340, "\"bob": 340, "9qh": 340, "9mekcirf": 340, "2adkkhvg": 340, "bob": 340, "jobstatus": 340, ".done": 340, "\u30b8\u30e7\u30d6": 340, "\u6b63\u5e38": 340, "\u81ea\u5df1": 340, "\"inputs": 340, ".result": 340, "collections": 340, "defaultdict": 340, "_adj": 340, "_mat": 340, "extract": 340, "coeff": 340, ".primitive": 340, "(pauli": 340, ":-": 340, "z\"]": 340, "[idx": 340, ", adj": 340, "(coeff": 340, "(bit": 340, "bit": 340, "_distribution": 340, "(paulisumop": 340, "amp": 340, "vals": 340, "[res": 340, "(vals": 340, "_vals": 340, "axs": 340, ".subplots": 340, "figsize": 340, "_history": 340, "bar": 340, "(cut": 340, ".keys": 340, "_xlabel": 340, "_ylabel": 340, "=provider": 340, ", reps": 340, "\u6700\u5c0f\u9650": 340, "\u6291\u3048": 340, "systems": 340, "\u30a8\u30b3\u30fc": 340, "\u30af\u30ed\u30b9": 340, "\u30ec\u30be\u30ca\u30f3\u30b9": 340, "\u671f\u3059": 340, "\u30d1\u30b9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc": 340, ".transpiler": 340, "passmanager": 340, ".standard": 340, "_gates": 340, ".equivalence": 340, "_library": 340, "standardequivalencelibrary": 340, "std": 340, "_eqlib": 340, ".passes": 340, "collect": 340, "2qblocks": 340, "consolidateblocks": 340, "unrollcustomdefinitions": 340, "basistranslator": 340, "optimize": 340, "1qgatesdecomposition": 340, ".calibration": 340, ".builders": 340, "rzxcalibrationbuildernoecho": 340, ".echo": 340, "_rzx": 340, "_weyl": 340, "_decomposition": 340, "echorzxweyldecomposition": 340, ".test": 340, ".mock": 340, "fakebelem": 340, "\u30d1\u30b9": 340, "\u30c8\u30e9\u30f3\u30b9\u30d1\u30a4\u30e9\u30fc\u30d1\u30b9": 340, "\u5171\u9cf4": 340, "\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3": 340, "cnot": 340, "\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb": 340, "inst": 340, "_map": 340, ".defaults": 340, "instruction": 340, "_schedule": 340, "channel": 340, ".configuration": 340, "_channel": 340, "rzx": 340, "_basis": 340, "rz": 340, "sx\"": 340, "consolidate": 340, "consecutive": 340, "operations": 340, "(basis": 340, "sx": 340, "rxx": 340, "rewrite": 340, "weyl": 340, "-decomposed": 340, "attach": 340, "scaled": 340, "schedules": 340, "=inst": 340, "=channel": 340, "simplify": 340, "(std": 340, "(rzx": 340, "\u793a\u3059": 340, "\u30d3\u30c3\u30c8\u30b2\u30fc\u30c8": 340, "\u4efb\u610f": 340, "circ": 340, ".h": 340, ".rzx": 340, ".swap": 340, ".cx": 340, ".rx": 340, "(circ": 340, "fold": 340, "cffbb": 340, "fri": 340}, "objects": {"": [[0, 0, 0, "-", "qiskit_optimization"]], "qiskit_optimization": [[10, 1, 1, "", "INFINITY"], [11, 2, 1, "", "QiskitOptimizationError"], [12, 4, 1, "", "QuadraticProgram"], [1, 0, 0, "-", "algorithms"], [2, 0, 0, "-", "applications"], [3, 0, 0, "-", "converters"], [4, 0, 0, "-", "problems"], [5, 0, 0, "-", "runtime"], [6, 0, 0, "-", "translators"]], "qiskit_optimization.QiskitOptimizationError": [[11, 3, 1, "", "with_traceback"]], "qiskit_optimization.QuadraticProgram": [[13, 3, 1, "", "binary_var"], [14, 3, 1, "", "binary_var_dict"], [15, 3, 1, "", "binary_var_list"], [16, 3, 1, "", "clear"], [17, 3, 1, "", "continuous_var"], [18, 3, 1, "", "continuous_var_dict"], [19, 3, 1, "", "continuous_var_list"], [20, 3, 1, "", "export_as_lp_string"], [21, 3, 1, "", "from_ising"], [22, 3, 1, "", "get_feasibility_info"], [23, 3, 1, "", "get_linear_constraint"], [24, 3, 1, "", "get_num_binary_vars"], [25, 3, 1, "", "get_num_continuous_vars"], [26, 3, 1, "", "get_num_integer_vars"], [27, 3, 1, "", "get_num_linear_constraints"], [28, 3, 1, "", "get_num_quadratic_constraints"], [29, 3, 1, "", "get_num_vars"], [30, 3, 1, "", "get_quadratic_constraint"], [31, 3, 1, "", "get_variable"], [32, 3, 1, "", "integer_var"], [33, 3, 1, "", "integer_var_dict"], [34, 3, 1, "", "integer_var_list"], [35, 3, 1, "", "is_feasible"], [36, 3, 1, "", "linear_constraint"], [37, 5, 1, "", "linear_constraints"], [38, 5, 1, "", "linear_constraints_index"], [39, 3, 1, "", "maximize"], [40, 3, 1, "", "minimize"], [41, 5, 1, "", "name"], [42, 5, 1, "", "objective"], [43, 3, 1, "", "prettyprint"], [44, 3, 1, "", "quadratic_constraint"], [45, 5, 1, "", "quadratic_constraints"], [46, 5, 1, "", "quadratic_constraints_index"], [47, 3, 1, "", "read_from_lp_file"], [48, 3, 1, "", "remove_linear_constraint"], [49, 3, 1, "", "remove_quadratic_constraint"], [50, 5, 1, "", "status"], [51, 3, 1, "", "substitute_variables"], [52, 3, 1, "", "to_ising"], [53, 5, 1, "", "variables"], [54, 5, 1, "", "variables_index"], [55, 3, 1, "", "write_to_lp_file"]], "qiskit_optimization.algorithms": [[56, 4, 1, "", "ADMMOptimizationResult"], [58, 4, 1, "", "ADMMOptimizer"], [62, 4, 1, "", "ADMMParameters"], [63, 4, 1, "", "ADMMState"], [64, 4, 1, "", "BaseAggregator"], [66, 4, 1, "", "CobylaOptimizer"], [69, 4, 1, "", "CplexOptimizer"], [75, 4, 1, "", "GoemansWilliamsonOptimizationResult"], [77, 4, 1, "", "GoemansWilliamsonOptimizer"], [81, 4, 1, "", "GroverOptimizationResult"], [88, 4, 1, "", "GroverOptimizer"], [92, 4, 1, "", "GurobiOptimizer"], [97, 4, 1, "", "IntermediateResult"], [101, 4, 1, "", "MeanAggregator"], [103, 4, 1, "", "MinimumEigenOptimizationResult"], [106, 4, 1, "", "MinimumEigenOptimizer"], [110, 4, 1, "", "MultiStartOptimizer"], [114, 4, 1, "", "OptimizationAlgorithm"], [118, 4, 1, "", "OptimizationResult"], [130, 4, 1, "", "OptimizationResultStatus"], [134, 4, 1, "", "RecursiveMinimumEigenOptimizationResult"], [137, 4, 1, "", "RecursiveMinimumEigenOptimizer"], [140, 4, 1, "", "SlsqpOptimizationResult"], [145, 4, 1, "", "SlsqpOptimizer"], [148, 4, 1, "", "SolutionSample"], [153, 4, 1, "", "WarmStartQAOAFactory"], [157, 4, 1, "", "WarmStartQAOAOptimizer"]], "qiskit_optimization.algorithms.ADMMOptimizationResult": [[57, 5, 1, "", "state"]], "qiskit_optimization.algorithms.ADMMOptimizer": [[59, 3, 1, "", "get_compatibility_msg"], [60, 5, 1, "", "parameters"], [61, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.BaseAggregator": [[65, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.CobylaOptimizer": [[67, 3, 1, "", "get_compatibility_msg"], [68, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.CplexOptimizer": [[70, 5, 1, "", "cplex_parameters"], [71, 5, 1, "", "disp"], [72, 3, 1, "", "get_compatibility_msg"], [73, 3, 1, "", "is_cplex_installed"], [74, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult": [[76, 5, 1, "", "sdp_solution"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer": [[78, 3, 1, "", "get_compatibility_msg"], [79, 3, 1, "", "max_cut_value"], [80, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GroverOptimizationResult": [[82, 5, 1, "", "intermediate_fval"], [83, 5, 1, "", "n_input_qubits"], [84, 5, 1, "", "n_output_qubits"], [85, 5, 1, "", "operation_counts"], [86, 5, 1, "", "raw_samples"], [87, 5, 1, "", "threshold"]], "qiskit_optimization.algorithms.GroverOptimizer": [[89, 3, 1, "", "get_compatibility_msg"], [90, 5, 1, "", "quantum_instance"], [91, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GurobiOptimizer": [[93, 5, 1, "", "disp"], [94, 3, 1, "", "get_compatibility_msg"], [95, 3, 1, "", "is_gurobi_installed"], [96, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.IntermediateResult": [[98, 6, 1, "", "ALL_ITERATIONS"], [99, 6, 1, "", "LAST_ITERATION"], [100, 6, 1, "", "NO_ITERATIONS"]], "qiskit_optimization.algorithms.MeanAggregator": [[102, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.MinimumEigenOptimizationResult": [[104, 5, 1, "", "min_eigen_solver_result"], [105, 5, 1, "", "raw_samples"]], "qiskit_optimization.algorithms.MinimumEigenOptimizer": [[107, 3, 1, "", "get_compatibility_msg"], [108, 5, 1, "", "min_eigen_solver"], [109, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.MultiStartOptimizer": [[111, 5, 1, "", "clip"], [112, 3, 1, "", "multi_start_solve"], [113, 5, 1, "", "trials"]], "qiskit_optimization.algorithms.OptimizationAlgorithm": [[115, 3, 1, "", "get_compatibility_msg"], [116, 3, 1, "", "is_compatible"], [117, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.OptimizationResult": [[119, 3, 1, "", "__getitem__"], [120, 5, 1, "", "fval"], [121, 3, 1, "", "get_correlations"], [122, 3, 1, "", "prettyprint"], [123, 5, 1, "", "raw_results"], [124, 5, 1, "", "samples"], [125, 5, 1, "", "status"], [126, 5, 1, "", "variable_names"], [127, 5, 1, "", "variables"], [128, 5, 1, "", "variables_dict"], [129, 5, 1, "", "x"]], "qiskit_optimization.algorithms.OptimizationResultStatus": [[131, 6, 1, "", "FAILURE"], [132, 6, 1, "", "INFEASIBLE"], [133, 6, 1, "", "SUCCESS"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult": [[135, 5, 1, "", "history"], [136, 5, 1, "", "replacements"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer": [[138, 3, 1, "", "get_compatibility_msg"], [139, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SlsqpOptimizationResult": [[141, 5, 1, "", "fx"], [142, 5, 1, "", "imode"], [143, 5, 1, "", "its"], [144, 5, 1, "", "smode"]], "qiskit_optimization.algorithms.SlsqpOptimizer": [[146, 3, 1, "", "get_compatibility_msg"], [147, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SolutionSample": [[149, 6, 1, "", "fval"], [150, 6, 1, "", "probability"], [151, 6, 1, "", "status"], [152, 6, 1, "", "x"]], "qiskit_optimization.algorithms.WarmStartQAOAFactory": [[154, 3, 1, "", "create_initial_state"], [155, 3, 1, "", "create_initial_variables"], [156, 3, 1, "", "create_mixer"]], "qiskit_optimization.algorithms.WarmStartQAOAOptimizer": [[158, 3, 1, "", "solve"]], "qiskit_optimization.applications": [[159, 4, 1, "", "BinPacking"], [163, 4, 1, "", "Clique"], [167, 4, 1, "", "ExactCover"], [170, 4, 1, "", "GraphOptimizationApplication"], [174, 4, 1, "", "GraphPartition"], [177, 4, 1, "", "Knapsack"], [181, 4, 1, "", "Maxcut"], [186, 4, 1, "", "NumberPartition"], [189, 4, 1, "", "OptimizationApplication"], [193, 4, 1, "", "SKModel"], [199, 4, 1, "", "SetPacking"], [202, 4, 1, "", "StableSet"], [205, 4, 1, "", "Tsp"], [211, 4, 1, "", "VehicleRouting"], [217, 4, 1, "", "VertexCover"]], "qiskit_optimization.applications.BinPacking": [[160, 3, 1, "", "get_figure"], [161, 3, 1, "", "interpret"], [162, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Clique": [[164, 3, 1, "", "interpret"], [165, 5, 1, "", "size"], [166, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.ExactCover": [[168, 3, 1, "", "interpret"], [169, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphOptimizationApplication": [[171, 3, 1, "", "draw"], [172, 5, 1, "", "graph"], [173, 3, 1, "", "random_graph"]], "qiskit_optimization.applications.GraphPartition": [[175, 3, 1, "", "interpret"], [176, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Knapsack": [[178, 3, 1, "", "interpret"], [179, 5, 1, "", "max_weight"], [180, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Maxcut": [[182, 3, 1, "", "get_gset_result"], [183, 3, 1, "", "interpret"], [184, 3, 1, "", "parse_gset_format"], [185, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.NumberPartition": [[187, 3, 1, "", "interpret"], [188, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.OptimizationApplication": [[190, 3, 1, "", "interpret"], [191, 3, 1, "", "sample_most_likely"], [192, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SKModel": [[194, 3, 1, "", "disorder"], [195, 5, 1, "", "graph"], [196, 3, 1, "", "interpret"], [197, 5, 1, "", "num_sites"], [198, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SetPacking": [[200, 3, 1, "", "interpret"], [201, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.StableSet": [[203, 3, 1, "", "interpret"], [204, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Tsp": [[206, 3, 1, "", "create_random_instance"], [207, 3, 1, "", "interpret"], [208, 3, 1, "", "parse_tsplib_format"], [209, 3, 1, "", "to_quadratic_program"], [210, 3, 1, "", "tsp_value"]], "qiskit_optimization.applications.VehicleRouting": [[212, 3, 1, "", "create_random_instance"], [213, 5, 1, "", "depot"], [214, 3, 1, "", "interpret"], [215, 5, 1, "", "num_vehicles"], [216, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.VertexCover": [[218, 3, 1, "", "interpret"], [219, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.converters": [[220, 4, 1, "", "InequalityToEquality"], [224, 4, 1, "", "IntegerToBinary"], [227, 4, 1, "", "LinearEqualityToPenalty"], [231, 4, 1, "", "LinearInequalityToPenalty"], [235, 4, 1, "", "MaximizeToMinimize"], [236, 4, 1, "", "MinimizeToMaximize"], [237, 4, 1, "", "QuadraticProgramConverter"], [240, 4, 1, "", "QuadraticProgramToQubo"]], "qiskit_optimization.converters.InequalityToEquality": [[221, 3, 1, "", "convert"], [222, 3, 1, "", "interpret"], [223, 5, 1, "", "mode"]], "qiskit_optimization.converters.IntegerToBinary": [[225, 3, 1, "", "convert"], [226, 3, 1, "", "interpret"]], "qiskit_optimization.converters.LinearEqualityToPenalty": [[228, 3, 1, "", "convert"], [229, 3, 1, "", "interpret"], [230, 5, 1, "", "penalty"]], "qiskit_optimization.converters.LinearInequalityToPenalty": [[232, 3, 1, "", "convert"], [233, 3, 1, "", "interpret"], [234, 5, 1, "", "penalty"]], "qiskit_optimization.converters.QuadraticProgramConverter": [[238, 3, 1, "", "convert"], [239, 3, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramToQubo": [[241, 3, 1, "", "convert"], [242, 3, 1, "", "get_compatibility_msg"], [243, 3, 1, "", "interpret"], [244, 3, 1, "", "is_compatible"], [245, 5, 1, "", "penalty"]], "qiskit_optimization.problems": [[246, 4, 1, "", "Constraint"], [251, 4, 1, "", "LinearConstraint"], [254, 4, 1, "", "LinearExpression"], [262, 4, 1, "", "QuadraticConstraint"], [266, 4, 1, "", "QuadraticExpression"], [274, 4, 1, "", "QuadraticObjective"], [281, 4, 1, "", "QuadraticProgramElement"], [283, 4, 1, "", "Variable"]], "qiskit_optimization.problems.Constraint": [[247, 3, 1, "", "evaluate"], [248, 5, 1, "", "name"], [249, 5, 1, "", "rhs"], [250, 5, 1, "", "sense"]], "qiskit_optimization.problems.LinearConstraint": [[252, 3, 1, "", "evaluate"], [253, 5, 1, "", "linear"]], "qiskit_optimization.problems.LinearExpression": [[255, 3, 1, "", "__getitem__"], [256, 5, 1, "", "bounds"], [257, 5, 1, "", "coefficients"], [258, 3, 1, "", "evaluate"], [259, 3, 1, "", "evaluate_gradient"], [260, 3, 1, "", "to_array"], [261, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticConstraint": [[263, 3, 1, "", "evaluate"], [264, 5, 1, "", "linear"], [265, 5, 1, "", "quadratic"]], "qiskit_optimization.problems.QuadraticExpression": [[267, 3, 1, "", "__getitem__"], [268, 5, 1, "", "bounds"], [269, 5, 1, "", "coefficients"], [270, 3, 1, "", "evaluate"], [271, 3, 1, "", "evaluate_gradient"], [272, 3, 1, "", "to_array"], [273, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticObjective": [[275, 5, 1, "", "constant"], [276, 3, 1, "", "evaluate"], [277, 3, 1, "", "evaluate_gradient"], [278, 5, 1, "", "linear"], [279, 5, 1, "", "quadratic"], [280, 5, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticProgramElement": [[282, 5, 1, "", "quadratic_program"]], "qiskit_optimization.problems.Variable": [[284, 3, 1, "", "as_tuple"], [285, 5, 1, "", "lowerbound"], [286, 5, 1, "", "name"], [287, 5, 1, "", "upperbound"], [288, 5, 1, "", "vartype"]], "qiskit_optimization.runtime": [[289, 4, 1, "", "QAOAClient"], [300, 4, 1, "", "QAOAProgram"], [302, 4, 1, "", "VQEClient"], [316, 4, 1, "", "VQEProgram"], [319, 4, 1, "", "VQEProgramResult"], [320, 4, 1, "", "VQERuntimeResult"]], "qiskit_optimization.runtime.QAOAClient": [[290, 5, 1, "", "alpha"], [291, 5, 1, "", "ansatz"], [292, 5, 1, "", "initial_state"], [293, 5, 1, "", "mixer"], [294, 5, 1, "", "optimization_level"], [295, 3, 1, "", "program_inputs"], [296, 5, 1, "", "reps"], [297, 5, 1, "", "use_initial_mapping"], [298, 5, 1, "", "use_pulse_efficient"], [299, 5, 1, "", "use_swap_strategies"]], "qiskit_optimization.runtime.QAOAProgram": [[301, 3, 1, "", "compute_minimum_eigenvalue"]], "qiskit_optimization.runtime.VQEClient": [[303, 5, 1, "", "ansatz"], [304, 5, 1, "", "backend"], [305, 5, 1, "", "callback"], [306, 3, 1, "", "compute_minimum_eigenvalue"], [307, 5, 1, "", "initial_point"], [308, 5, 1, "", "measurement_error_mitigation"], [309, 5, 1, "", "optimizer"], [310, 5, 1, "", "program_id"], [311, 3, 1, "", "program_inputs"], [312, 5, 1, "", "provider"], [313, 5, 1, "", "shots"], [314, 5, 1, "", "store_intermediate"], [315, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQEProgram": [[317, 3, 1, "", "compute_minimum_eigenvalue"], [318, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQERuntimeResult": [[321, 5, 1, "", "job_id"], [322, 5, 1, "", "optimizer_history"]], "qiskit_optimization.translators": [[323, 7, 1, "", "from_docplex_mp"], [324, 7, 1, "", "from_gurobipy"], [325, 7, 1, "", "from_ising"], [326, 7, 1, "", "to_docplex_mp"], [327, 7, 1, "", "to_gurobipy"], [328, 7, 1, "", "to_ising"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:exception", "3": "py:method", "4": "py:class", "5": "py:property", "6": "py:attribute", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python \u30e2\u30b8\u30e5\u30fc\u30eb"], "1": ["py", "data", "Python \u30c7\u30fc\u30bf"], "2": ["py", "exception", "Python \u4f8b\u5916"], "3": ["py", "method", "Python \u30e1\u30bd\u30c3\u30c9"], "4": ["py", "class", "Python \u30af\u30e9\u30b9"], "5": ["py", "property", "Python \u30d7\u30ed\u30d1\u30c6\u30a3"], "6": ["py", "attribute", "Python \u306e\u5c5e\u6027"], "7": ["py", "function", "Python \u306e\u95a2\u6570"]}, "titleterms": {"qiskit": [0, 1, 2, 3, 4, 5, 6, 8, 339, 340], "optimization": [0, 1, 2, 3, 4, 5, 8, 339, 340, 341], "api": 0, "reference": 0, "\u2019s": 0, "module": 0, "_optimization": [0, 1, 2, 3, 4, 5, 6], "submodules": 0, "algorithms": 1, ".algorithms": 1, "base": [1, 2, 3], "classes": [1, 2], "for": [1, 2, 3], "and": 1, "results": 1, "applications": 2, ".applications": 2, "converters": 3, ".converters": 3, "class": 3, "problems": 4, ".problems": 4, "quadratic": [4, 6], "program": [4, 6], "runtime": 5, ".runtime": 5, "translators": 6, ".translators": 6, "\u306f\u3058\u3081": [7, 329, 331, 332, 333, 334, 335, 336, 337, 338], "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": 7, "\u30aa\u30d7\u30b7\u30e7\u30f3": 7, "\u6e96\u5099": [7, 338], "\u3044\u3044": 7, "\u3067\u3059": 7, "\uff1f\u2026": 7, "overview": 8, "next": 8, "steps": 8, "release": 9, "notes": 9, "infinity": 10, "qiskitoptimizationerror": 11, "quadraticprogram": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 329, 339], ".binary": [13, 14, 15], "_var": [13, 14, 15, 17, 18, 19, 32, 33, 34], "_dict": [14, 18, 33, 128, 261, 273], "_list": [15, 19, 34], ".clear": 16, ".continuous": [17, 18, 19], ".export": 20, "_as": 20, "_lp": [20, 47, 55], "_string": 20, ".from": 21, "_ising": [21, 52, 325, 328], ".get": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 59, 67, 72, 78, 89, 94, 107, 115, 121, 138, 146, 160, 182, 242], "_feasibility": 22, "_info": 22, "_linear": [23, 27, 48], "_constraint": [23, 30, 36, 44, 48, 49], "_num": [24, 25, 26, 27, 28, 29], "_binary": 24, "_vars": [24, 25, 26, 29], "_continuous": 25, "_integer": 26, "_constraints": [27, 28, 37, 38, 45, 46], "_quadratic": [28, 30, 49, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219], "_variable": 31, ".integer": [32, 33, 34], ".is": [35, 73, 95, 116, 244], "_feasible": 35, ".linear": [36, 37, 38, 253, 264, 278], "_index": [38, 46, 54], ".maximize": 39, ".minimize": 40, ".name": [41, 248, 286], ".objective": 42, ".prettyprint": [43, 122], ".quadratic": [44, 45, 46, 265, 279, 282], ".read": 47, "_from": 47, "_file": [47, 55], ".remove": [48, 49], ".status": [50, 125, 151], ".substitute": 51, "_variables": [51, 155], ".to": [52, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 260, 261, 272, 273], ".variables": [53, 54, 127, 128], ".write": 55, "_to": 55, "admmoptimizationresult": [56, 57], ".state": 57, "admmoptimizer": [58, 59, 60, 61], "_compatibility": [59, 67, 72, 78, 89, 94, 107, 115, 138, 146, 242], "_msg": [59, 67, 72, 78, 89, 94, 107, 115, 138, 146, 242], ".parameters": 60, ".solve": [61, 68, 74, 80, 91, 96, 109, 117, 139, 147, 158], "admmparameters": 62, "admmstate": 63, "baseaggregator": [64, 65], ".aggregate": [65, 102], "cobylaoptimizer": [66, 67, 68], "cplexoptimizer": [69, 70, 71, 72, 73, 74], ".cplex": 70, "_parameters": 70, ".disp": [71, 93], "_cplex": 73, "_installed": [73, 95], "goemanswilliamsonoptimizationresult": [75, 76], ".sdp": 76, "_solution": 76, "goemanswilliamsonoptimizer": [77, 78, 79, 80], ".max": [79, 179], "_cut": 79, "_value": [79, 210], "groveroptimizationresult": [81, 82, 83, 84, 85, 86, 87], ".intermediate": 82, "_fval": 82, ".n": [83, 84], "_input": 83, "_qubits": [83, 84], "_output": 84, ".operation": 85, "_counts": 85, ".raw": [86, 105, 123], "_samples": [86, 105], ".threshold": 87, "groveroptimizer": [88, 89, 90, 91, 332], ".quantum": 90, "_instance": [90, 206, 212], "gurobioptimizer": [92, 93, 94, 95, 96], "_gurobi": 95, "intermediateresult": [97, 98, 99, 100], ".all": 98, "_iterations": [98, 100], ".last": 99, "_iteration": 99, ".no": 100, "meanaggregator": [101, 102], "minimumeigenoptimizationresult": [103, 104, 105], ".min": [104, 108], "_eigen": [104, 108], "_solver": [104, 108], "_result": [104, 182], "minimumeigenoptimizer": [106, 107, 108, 109, 331], "multistartoptimizer": [110, 111, 112, 113], ".clip": 111, ".multi": 112, "_start": 112, "_solve": 112, ".trials": 113, "optimizationalgorithm": [114, 115, 116, 117], "_compatible": [116, 244], "optimizationresult": [118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "._": [119, 255, 267], "getitem": [119, 255, 267], "__": [119, 255, 267], ".fval": [120, 149], "_correlations": 121, "_results": 123, ".samples": 124, ".variable": 126, "_names": 126, ".x": [129, 152], "optimizationresultstatus": [130, 131, 132, 133], ".failure": 131, ".infeasible": 132, ".success": 133, "recursiveminimumeigenoptimizationresult": [134, 135, 136], ".history": 135, ".replacements": 136, "recursiveminimumeigenoptimizer": [137, 138, 139, 331], "slsqpoptimizationresult": [140, 141, 142, 143, 144], ".fx": 141, ".imode": 142, ".its": 143, ".smode": 144, "slsqpoptimizer": [145, 146, 147], "solutionsample": [148, 149, 150, 151, 152], ".probability": 150, "warmstartqaoafactory": [153, 154, 155, 156], ".create": [154, 155, 156, 206, 212], "_initial": [154, 155, 297], "_state": [154, 292], "_mixer": 156, "warmstartqaoaoptimizer": [157, 158], "binpacking": [159, 160, 161, 162], "_figure": 160, ".interpret": [161, 164, 168, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 239, 243], "_program": [162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 282], "clique": [163, 164, 165, 166], ".size": 165, "exactcover": [167, 168, 169], "graphoptimizationapplication": [170, 171, 172, 173], ".draw": 171, ".graph": [172, 195], ".random": 173, "_graph": 173, "graphpartition": [174, 175, 176], "knapsack": [177, 178, 179, 180], "_weight": 179, "maxcut": [181, 182, 183, 184, 185], "_gset": [182, 184], ".parse": [184, 208], "_format": [184, 208], "numberpartition": [186, 187, 188], "optimizationapplication": [189, 190, 191, 192], ".sample": 191, "_most": 191, "_likely": 191, "skmodel": [193, 194, 195, 196, 197, 198], ".disorder": 194, ".num": [197, 215], "_sites": 197, "setpacking": [199, 200, 201], "stableset": [202, 203, 204], "tsp": [205, 206, 207, 208, 209, 210], "_random": [206, 212], "_tsplib": 208, ".tsp": 210, "vehiclerouting": [211, 212, 213, 214, 215, 216], ".depot": 213, "_vehicles": 215, "vertexcover": [217, 218, 219], "inequalitytoequality": [220, 221, 222, 223, 330], ".convert": [221, 225, 228, 232, 238, 241], ".mode": 223, "integertobinary": [224, 225, 226, 330], "linearequalitytopenalty": [227, 228, 229, 230, 330], ".penalty": [230, 234, 245], "linearinequalitytopenalty": [231, 232, 233, 234], "maximizetominimize": 235, "minimizetomaximize": 236, "quadraticprogramconverter": [237, 238, 239], "quadraticprogramtoqubo": [240, 241, 242, 243, 244, 245], "constraint": [246, 247, 248, 249, 250], ".evaluate": [247, 252, 258, 259, 263, 270, 271, 276, 277], ".rhs": 249, ".sense": [250, 280], "linearconstraint": [251, 252, 253], "linearexpression": [254, 255, 256, 257, 258, 259, 260, 261], ".bounds": [256, 268], ".coefficients": [257, 269], "_gradient": [259, 271, 277], "_array": [260, 272], "quadraticconstraint": [262, 263, 264, 265], "quadraticexpression": [266, 267, 268, 269, 270, 271, 272, 273], "quadraticobjective": [274, 275, 276, 277, 278, 279, 280], ".constant": 275, "quadraticprogramelement": [281, 282], "variable": [283, 284, 285, 286, 287, 288], ".as": 284, "_tuple": 284, ".lowerbound": 285, ".upperbound": 287, ".vartype": 288, "qaoaclient": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], ".alpha": 290, ".ansatz": [291, 303], ".initial": [292, 307], ".mixer": 293, ".optimization": 294, "_level": 294, ".program": [295, 310, 311], "_inputs": [295, 311], ".reps": 296, ".use": [297, 298, 299], "_mapping": 297, "_pulse": 298, "_efficient": 298, "_swap": 299, "_strategies": 299, "qaoaprogram": [300, 301], ".compute": [301, 306, 317], "_minimum": [301, 306, 317], "_eigenvalue": [301, 306, 317], "vqeclient": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], ".backend": 304, ".callback": 305, "_point": 307, ".measurement": 308, "_error": 308, "_mitigation": 308, ".optimizer": [309, 322], "_id": [310, 321], ".provider": 312, ".shots": 313, ".store": 314, "_intermediate": 314, ".supports": [315, 318], "_aux": [315, 318], "_operators": [315, 318], "vqeprogram": [316, 317, 318], "vqeprogramresult": 319, "vqeruntimeresult": [320, 321, 322], ".job": 321, "_history": 322, "from": [323, 324, 325, 329], "_docplex": [323, 326], "_mp": [323, 326], "_gurobipy": [324, 327], "to": [326, 327, 328], "\u4e8c\u6b21\u8a08\u753b\u6cd5": [329, 330], "loading": 329, "an": 329, "lp": 329, "file": 329, "docplex": [329, 339], "\u30e2\u30c7\u30eb": [329, 335, 339], "\u304b\u3089": [329, 335], "\u30ed\u30fc\u30c9": 329, "\u3059\u308b": [329, 331], "\u76f4\u63a5": 329, "\u69cb\u7bc9": [329, 335], "\u7dda\u5f62": 329, "\u304a\u3088\u3073": 329, "\u4e8c\u6b21": 329, "\u5236\u7d04": [329, 339], "\u8ffd\u52a0": 329, "\u524a\u9664": 329, "\u5909\u6570": 329, "\u7f6e\u304d": 329, "\u63db\u3048": 329, "\u307e\u3059": 329, "\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc": 330, "\u6700\u5c0f\u56fa": 331, "\u6709\u5024": 331, "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": [331, 333, 336], "minimum": [331, 336], "eigen": [331, 336], "optimizer": [331, 336], "\u53c2\u8003": [331, 332, 333, 335, 336, 338, 340], "\u6587\u732e": [331, 332, 333, 335, 336, 338, 340], "qubo": [331, 332], "\u30aa\u30da\u30ec\u30fc\u30bf\u30fc": 331, "\u5909\u63db": 331, "\u89e3\u304f": 331, "\u30b5\u30f3\u30d7\u30eb": 331, "\u5206\u6790": [331, 338], "\u30b0\u30ed\u30fc\u30d0\u30fc\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": 332, "\u30b0\u30ed\u30fc\u30d0\u30fc": 332, "\u9069\u5fdc": 332, "\u63a2\u7d22": 332, "\u4f7f\u7528": [332, 335, 336, 339], "\u554f\u984c": [332, 334, 337], "\u6700\u5c0f\u5024": 332, "\u898b\u3064\u3051\u308b": 332, "\u6b63\u3057\u3044": 332, "\u3053\u3068": [332, 334], "\u78ba\u8a8d": [332, 334, 337], "admm": 333, "\u671f\u5316": [333, 335], "\u53e4\u5178": [333, 335, 339], "\u89e3\u6cd5": 333, "\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc": 333, "-h": 333, "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 333, "\u547c\u3073\u51fa\u3059": 333, "\u30bd\u30eb\u30d0\u30fc": [333, 339], "\u7d50\u679c": 333, "\u91cf\u5b50": [333, 334, 335, 336, 338], "\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [333, 335], "\u6700\u5927": 334, "\u30ab\u30c3\u30c8": 334, "\u30bb\u30fc\u30eb\u30b9\u30de\u30f3": 334, "\u5de1\u56de": 334, "\u91cd\u307f": 334, "\u4ed8\u304d": 334, "\u6700\u9069": [334, 336, 337, 338, 339], "\u305f\u3081": 334, "\u8fd1\u4f3c": 334, "\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb": 334, "\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0": 334, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3": [334, 337], "\u30af\u30e9\u30b9": [334, 337], "\u529b\u307e\u304b\u305b": 334, "\u30a2\u30d7\u30ed\u30fc\u30c1": 334, "\u30a4\u30b8\u30f3\u30b0": [334, 335], "\u30de\u30c3\u30d4\u30f3\u30b0": 334, "\u3059\u3079\u3066": 334, "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [334, 335, 337], "\u9069\u5207": 334, "\u30b3\u30b9\u30c8": 334, "\u4e0e\u3048\u308b": 334, "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc": 334, "\u5b9f\u884c": [334, 340], "\u914d\u8eca": 335, "\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0": 335, "\u30fb\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": 335, "qp": 335, "\u5b9a\u5f0f": 335, "ibm": 335, "ilog": 335, "cplex": 335, "\u30bc\u30ed": 335, "\u30b9\u30c6\u30c3\u30d7": [335, 340], "cvar": 336, "\u5909\u5206": 336, "\u6539\u5584": 336, "\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa": 336, "vqe": 336, "\u6700\u5c0f": 336, "\u56fa\u6709": 336, "\u9802\u70b9": 337, "\u88ab\u8986": 337, "\u30ca\u30c3\u30d7\u30b5\u30c3\u30af": 337, "\u65b9\u6cd5": 337, "\u30a6\u30a9\u30fc\u30e0": 338, "\u30b9\u30bf\u30fc\u30c8": 338, "\uff1aqubo": 338, "\u7de9\u548c": 338, "qaoa": [338, 340], "\u6a19\u6e96": 338, "cplexsolver": 339, "gurobisolver": 339, "/gurobipy": 339, "\u30c8\u30e9\u30f3\u30b9\u30ec\u30fc\u30bf\u30fc": 339, "\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u30fc": 339, "\u30e9\u30f3\u30bf\u30a4\u30e0": 340, "\u4e8b\u524d": 340, "qaoa\u30e9\u30f3\u30bf\u30a4\u30e0\u30d7\u30ed\u30b0\u30e9\u30e0": 340, "\u4ed8\u9332a": 340, "\u30d1\u30eb\u30b9": 340, "\u52b9\u7387": 340, "\u9ad8\u3044": 340, "\u30c8\u30e9\u30f3\u30b9\u30d1\u30a4\u30eb": 340, "\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": 341}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 56}})