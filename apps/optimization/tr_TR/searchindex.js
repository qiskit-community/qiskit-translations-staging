Search.setIndex({"docnames": ["apidocs/qiskit_optimization", "apidocs/qiskit_optimization.algorithms", "apidocs/qiskit_optimization.applications", "apidocs/qiskit_optimization.converters", "apidocs/qiskit_optimization.problems", "apidocs/qiskit_optimization.runtime", "apidocs/qiskit_optimization.translators", "getting_started", "index", "release_notes", "stubs/qiskit_optimization.INFINITY", "stubs/qiskit_optimization.QiskitOptimizationError", "stubs/qiskit_optimization.QuadraticProgram", "stubs/qiskit_optimization.QuadraticProgram.binary_var", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list", "stubs/qiskit_optimization.QuadraticProgram.clear", "stubs/qiskit_optimization.QuadraticProgram.continuous_var", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string", "stubs/qiskit_optimization.QuadraticProgram.from_ising", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.get_variable", "stubs/qiskit_optimization.QuadraticProgram.integer_var", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list", "stubs/qiskit_optimization.QuadraticProgram.is_feasible", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.maximize", "stubs/qiskit_optimization.QuadraticProgram.minimize", "stubs/qiskit_optimization.QuadraticProgram.name", "stubs/qiskit_optimization.QuadraticProgram.objective", "stubs/qiskit_optimization.QuadraticProgram.prettyprint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint", "stubs/qiskit_optimization.QuadraticProgram.status", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables", "stubs/qiskit_optimization.QuadraticProgram.to_ising", "stubs/qiskit_optimization.QuadraticProgram.variables", "stubs/qiskit_optimization.QuadraticProgram.variables_index", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state", "stubs/qiskit_optimization.algorithms.ADMMOptimizer", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve", "stubs/qiskit_optimization.algorithms.ADMMParameters", "stubs/qiskit_optimization.algorithms.ADMMState", "stubs/qiskit_optimization.algorithms.BaseAggregator", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate", "stubs/qiskit_optimization.algorithms.CobylaOptimizer", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve", "stubs/qiskit_optimization.algorithms.CplexOptimizer", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold", "stubs/qiskit_optimization.algorithms.GroverOptimizer", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve", "stubs/qiskit_optimization.algorithms.GurobiOptimizer", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve", "stubs/qiskit_optimization.algorithms.IntermediateResult", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS", "stubs/qiskit_optimization.algorithms.MeanAggregator", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve", "stubs/qiskit_optimization.algorithms.OptimizationResult", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples", "stubs/qiskit_optimization.algorithms.OptimizationResult.status", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict", "stubs/qiskit_optimization.algorithms.OptimizationResult.x", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve", "stubs/qiskit_optimization.algorithms.SolutionSample", "stubs/qiskit_optimization.algorithms.SolutionSample.fval", "stubs/qiskit_optimization.algorithms.SolutionSample.probability", "stubs/qiskit_optimization.algorithms.SolutionSample.status", "stubs/qiskit_optimization.algorithms.SolutionSample.x", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve", "stubs/qiskit_optimization.applications.BinPacking", "stubs/qiskit_optimization.applications.BinPacking.get_figure", "stubs/qiskit_optimization.applications.BinPacking.interpret", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.Clique", "stubs/qiskit_optimization.applications.Clique.interpret", "stubs/qiskit_optimization.applications.Clique.size", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program", "stubs/qiskit_optimization.applications.ExactCover", "stubs/qiskit_optimization.applications.ExactCover.interpret", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program", "stubs/qiskit_optimization.applications.GraphOptimizationApplication", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph", "stubs/qiskit_optimization.applications.GraphPartition", "stubs/qiskit_optimization.applications.GraphPartition.interpret", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.Knapsack", "stubs/qiskit_optimization.applications.Knapsack.interpret", "stubs/qiskit_optimization.applications.Knapsack.max_weight", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program", "stubs/qiskit_optimization.applications.Maxcut", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result", "stubs/qiskit_optimization.applications.Maxcut.interpret", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program", "stubs/qiskit_optimization.applications.NumberPartition", "stubs/qiskit_optimization.applications.NumberPartition.interpret", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program", "stubs/qiskit_optimization.applications.OptimizationApplication", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program", "stubs/qiskit_optimization.applications.SKModel", "stubs/qiskit_optimization.applications.SKModel.disorder", "stubs/qiskit_optimization.applications.SKModel.graph", "stubs/qiskit_optimization.applications.SKModel.interpret", "stubs/qiskit_optimization.applications.SKModel.num_sites", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program", "stubs/qiskit_optimization.applications.SetPacking", "stubs/qiskit_optimization.applications.SetPacking.interpret", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program", "stubs/qiskit_optimization.applications.StableSet", "stubs/qiskit_optimization.applications.StableSet.interpret", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp", "stubs/qiskit_optimization.applications.Tsp.create_random_instance", "stubs/qiskit_optimization.applications.Tsp.interpret", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program", "stubs/qiskit_optimization.applications.Tsp.tsp_value", "stubs/qiskit_optimization.applications.VehicleRouting", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance", "stubs/qiskit_optimization.applications.VehicleRouting.depot", "stubs/qiskit_optimization.applications.VehicleRouting.interpret", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program", "stubs/qiskit_optimization.applications.VertexCover", "stubs/qiskit_optimization.applications.VertexCover.interpret", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program", "stubs/qiskit_optimization.converters.InequalityToEquality", "stubs/qiskit_optimization.converters.InequalityToEquality.convert", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret", "stubs/qiskit_optimization.converters.InequalityToEquality.mode", "stubs/qiskit_optimization.converters.IntegerToBinary", "stubs/qiskit_optimization.converters.IntegerToBinary.convert", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty", "stubs/qiskit_optimization.converters.MaximizeToMinimize", "stubs/qiskit_optimization.converters.MinimizeToMaximize", "stubs/qiskit_optimization.converters.QuadraticProgramConverter", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty", "stubs/qiskit_optimization.problems.Constraint", "stubs/qiskit_optimization.problems.Constraint.evaluate", "stubs/qiskit_optimization.problems.Constraint.name", "stubs/qiskit_optimization.problems.Constraint.rhs", "stubs/qiskit_optimization.problems.Constraint.sense", "stubs/qiskit_optimization.problems.LinearConstraint", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate", "stubs/qiskit_optimization.problems.LinearConstraint.linear", "stubs/qiskit_optimization.problems.LinearExpression", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__", "stubs/qiskit_optimization.problems.LinearExpression.bounds", "stubs/qiskit_optimization.problems.LinearExpression.coefficients", "stubs/qiskit_optimization.problems.LinearExpression.evaluate", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.LinearExpression.to_array", "stubs/qiskit_optimization.problems.LinearExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticConstraint", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic", "stubs/qiskit_optimization.problems.QuadraticExpression", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict", "stubs/qiskit_optimization.problems.QuadraticObjective", "stubs/qiskit_optimization.problems.QuadraticObjective.constant", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient", "stubs/qiskit_optimization.problems.QuadraticObjective.linear", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic", "stubs/qiskit_optimization.problems.QuadraticObjective.sense", "stubs/qiskit_optimization.problems.QuadraticProgramElement", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program", "stubs/qiskit_optimization.problems.Variable", "stubs/qiskit_optimization.problems.Variable.as_tuple", "stubs/qiskit_optimization.problems.Variable.lowerbound", "stubs/qiskit_optimization.problems.Variable.name", "stubs/qiskit_optimization.problems.Variable.upperbound", "stubs/qiskit_optimization.problems.Variable.vartype", "stubs/qiskit_optimization.runtime.QAOAClient", "stubs/qiskit_optimization.runtime.QAOAClient.alpha", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state", "stubs/qiskit_optimization.runtime.QAOAClient.mixer", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs", "stubs/qiskit_optimization.runtime.QAOAClient.reps", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies", "stubs/qiskit_optimization.runtime.QAOAProgram", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient", "stubs/qiskit_optimization.runtime.VQEClient.ansatz", "stubs/qiskit_optimization.runtime.VQEClient.backend", "stubs/qiskit_optimization.runtime.VQEClient.callback", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEClient.initial_point", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation", "stubs/qiskit_optimization.runtime.VQEClient.optimizer", "stubs/qiskit_optimization.runtime.VQEClient.program_id", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs", "stubs/qiskit_optimization.runtime.VQEClient.provider", "stubs/qiskit_optimization.runtime.VQEClient.shots", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgram", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators", "stubs/qiskit_optimization.runtime.VQEProgramResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history", "stubs/qiskit_optimization.translators.from_docplex_mp", "stubs/qiskit_optimization.translators.from_gurobipy", "stubs/qiskit_optimization.translators.from_ising", "stubs/qiskit_optimization.translators.to_docplex_mp", "stubs/qiskit_optimization.translators.to_gurobipy", "stubs/qiskit_optimization.translators.to_ising", "tutorials/01_quadratic_program", "tutorials/02_converters_for_quadratic_programs", "tutorials/03_minimum_eigen_optimizer", "tutorials/04_grover_optimizer", "tutorials/05_admm_optimizer", "tutorials/06_examples_max_cut_and_tsp", "tutorials/07_examples_vehicle_routing", "tutorials/08_cvar_optimization", "tutorials/09_application_classes", "tutorials/10_warm_start_qaoa", "tutorials/11_using_classical_optimization_solvers_and_models", "tutorials/12_qaoa_runtime", "tutorials/index"], "filenames": ["apidocs/qiskit_optimization.rst", "apidocs/qiskit_optimization.algorithms.rst", "apidocs/qiskit_optimization.applications.rst", "apidocs/qiskit_optimization.converters.rst", "apidocs/qiskit_optimization.problems.rst", "apidocs/qiskit_optimization.runtime.rst", "apidocs/qiskit_optimization.translators.rst", "getting_started.rst", "index.rst", "release_notes.rst", "stubs/qiskit_optimization.INFINITY.rst", "stubs/qiskit_optimization.QiskitOptimizationError.rst", "stubs/qiskit_optimization.QuadraticProgram.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.binary_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.clear.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.continuous_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.export_as_lp_string.rst", "stubs/qiskit_optimization.QuadraticProgram.from_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.get_feasibility_info.rst", "stubs/qiskit_optimization.QuadraticProgram.get_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_binary_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_continuous_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_integer_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.get_num_vars.rst", "stubs/qiskit_optimization.QuadraticProgram.get_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.get_variable.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_dict.rst", "stubs/qiskit_optimization.QuadraticProgram.integer_var_list.rst", "stubs/qiskit_optimization.QuadraticProgram.is_feasible.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.linear_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.maximize.rst", "stubs/qiskit_optimization.QuadraticProgram.minimize.rst", "stubs/qiskit_optimization.QuadraticProgram.name.rst", "stubs/qiskit_optimization.QuadraticProgram.objective.rst", "stubs/qiskit_optimization.QuadraticProgram.prettyprint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints.rst", "stubs/qiskit_optimization.QuadraticProgram.quadratic_constraints_index.rst", "stubs/qiskit_optimization.QuadraticProgram.read_from_lp_file.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_linear_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.remove_quadratic_constraint.rst", "stubs/qiskit_optimization.QuadraticProgram.status.rst", "stubs/qiskit_optimization.QuadraticProgram.substitute_variables.rst", "stubs/qiskit_optimization.QuadraticProgram.to_ising.rst", "stubs/qiskit_optimization.QuadraticProgram.variables.rst", "stubs/qiskit_optimization.QuadraticProgram.variables_index.rst", "stubs/qiskit_optimization.QuadraticProgram.write_to_lp_file.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.state.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.parameters.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.ADMMParameters.rst", "stubs/qiskit_optimization.algorithms.ADMMState.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.threshold.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.quantum_instance.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.disp.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.aggregate.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.clip.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.trials.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.solve.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.__getitem__.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.fval.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.get_correlations.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.prettyprint.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.raw_results.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.samples.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.status.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variable_names.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.variables_dict.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.x.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.fx.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.imode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.its.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.smode.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.solve.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.fval.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.probability.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.status.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.x.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve.rst", "stubs/qiskit_optimization.applications.BinPacking.rst", "stubs/qiskit_optimization.applications.BinPacking.get_figure.rst", "stubs/qiskit_optimization.applications.BinPacking.interpret.rst", "stubs/qiskit_optimization.applications.BinPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Clique.rst", "stubs/qiskit_optimization.applications.Clique.interpret.rst", "stubs/qiskit_optimization.applications.Clique.size.rst", "stubs/qiskit_optimization.applications.Clique.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.ExactCover.rst", "stubs/qiskit_optimization.applications.ExactCover.interpret.rst", "stubs/qiskit_optimization.applications.ExactCover.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.draw.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.graph.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.random_graph.rst", "stubs/qiskit_optimization.applications.GraphPartition.rst", "stubs/qiskit_optimization.applications.GraphPartition.interpret.rst", "stubs/qiskit_optimization.applications.GraphPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Knapsack.rst", "stubs/qiskit_optimization.applications.Knapsack.interpret.rst", "stubs/qiskit_optimization.applications.Knapsack.max_weight.rst", "stubs/qiskit_optimization.applications.Knapsack.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Maxcut.rst", "stubs/qiskit_optimization.applications.Maxcut.get_gset_result.rst", "stubs/qiskit_optimization.applications.Maxcut.interpret.rst", "stubs/qiskit_optimization.applications.Maxcut.parse_gset_format.rst", "stubs/qiskit_optimization.applications.Maxcut.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.NumberPartition.rst", "stubs/qiskit_optimization.applications.NumberPartition.interpret.rst", "stubs/qiskit_optimization.applications.NumberPartition.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.interpret.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.sample_most_likely.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SKModel.rst", "stubs/qiskit_optimization.applications.SKModel.disorder.rst", "stubs/qiskit_optimization.applications.SKModel.graph.rst", "stubs/qiskit_optimization.applications.SKModel.interpret.rst", "stubs/qiskit_optimization.applications.SKModel.num_sites.rst", "stubs/qiskit_optimization.applications.SKModel.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.SetPacking.rst", "stubs/qiskit_optimization.applications.SetPacking.interpret.rst", "stubs/qiskit_optimization.applications.SetPacking.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.StableSet.rst", "stubs/qiskit_optimization.applications.StableSet.interpret.rst", "stubs/qiskit_optimization.applications.StableSet.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.rst", "stubs/qiskit_optimization.applications.Tsp.create_random_instance.rst", "stubs/qiskit_optimization.applications.Tsp.interpret.rst", "stubs/qiskit_optimization.applications.Tsp.parse_tsplib_format.rst", "stubs/qiskit_optimization.applications.Tsp.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.Tsp.tsp_value.rst", "stubs/qiskit_optimization.applications.VehicleRouting.rst", "stubs/qiskit_optimization.applications.VehicleRouting.create_random_instance.rst", "stubs/qiskit_optimization.applications.VehicleRouting.depot.rst", "stubs/qiskit_optimization.applications.VehicleRouting.interpret.rst", "stubs/qiskit_optimization.applications.VehicleRouting.num_vehicles.rst", "stubs/qiskit_optimization.applications.VehicleRouting.to_quadratic_program.rst", "stubs/qiskit_optimization.applications.VertexCover.rst", "stubs/qiskit_optimization.applications.VertexCover.interpret.rst", "stubs/qiskit_optimization.applications.VertexCover.to_quadratic_program.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.convert.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.interpret.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.mode.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.convert.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.convert.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.interpret.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.penalty.rst", "stubs/qiskit_optimization.converters.MaximizeToMinimize.rst", "stubs/qiskit_optimization.converters.MinimizeToMaximize.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.convert.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.interpret.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.penalty.rst", "stubs/qiskit_optimization.problems.Constraint.rst", "stubs/qiskit_optimization.problems.Constraint.evaluate.rst", "stubs/qiskit_optimization.problems.Constraint.name.rst", "stubs/qiskit_optimization.problems.Constraint.rhs.rst", "stubs/qiskit_optimization.problems.Constraint.sense.rst", "stubs/qiskit_optimization.problems.LinearConstraint.rst", "stubs/qiskit_optimization.problems.LinearConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.LinearConstraint.linear.rst", "stubs/qiskit_optimization.problems.LinearExpression.rst", "stubs/qiskit_optimization.problems.LinearExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.LinearExpression.bounds.rst", "stubs/qiskit_optimization.problems.LinearExpression.coefficients.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate.rst", "stubs/qiskit_optimization.problems.LinearExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_array.rst", "stubs/qiskit_optimization.problems.LinearExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.linear.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.__getitem__.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.bounds.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.coefficients.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_array.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.to_dict.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.constant.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.evaluate_gradient.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.linear.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.quadratic.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.sense.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.quadratic_program.rst", "stubs/qiskit_optimization.problems.Variable.rst", "stubs/qiskit_optimization.problems.Variable.as_tuple.rst", "stubs/qiskit_optimization.problems.Variable.lowerbound.rst", "stubs/qiskit_optimization.problems.Variable.name.rst", "stubs/qiskit_optimization.problems.Variable.upperbound.rst", "stubs/qiskit_optimization.problems.Variable.vartype.rst", "stubs/qiskit_optimization.runtime.QAOAClient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.alpha.rst", "stubs/qiskit_optimization.runtime.QAOAClient.ansatz.rst", "stubs/qiskit_optimization.runtime.QAOAClient.initial_state.rst", "stubs/qiskit_optimization.runtime.QAOAClient.mixer.rst", "stubs/qiskit_optimization.runtime.QAOAClient.optimization_level.rst", "stubs/qiskit_optimization.runtime.QAOAClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.QAOAClient.reps.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_initial_mapping.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_pulse_efficient.rst", "stubs/qiskit_optimization.runtime.QAOAClient.use_swap_strategies.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.rst", "stubs/qiskit_optimization.runtime.QAOAProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.rst", "stubs/qiskit_optimization.runtime.VQEClient.ansatz.rst", "stubs/qiskit_optimization.runtime.VQEClient.backend.rst", "stubs/qiskit_optimization.runtime.VQEClient.callback.rst", "stubs/qiskit_optimization.runtime.VQEClient.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEClient.initial_point.rst", "stubs/qiskit_optimization.runtime.VQEClient.measurement_error_mitigation.rst", "stubs/qiskit_optimization.runtime.VQEClient.optimizer.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_id.rst", "stubs/qiskit_optimization.runtime.VQEClient.program_inputs.rst", "stubs/qiskit_optimization.runtime.VQEClient.provider.rst", "stubs/qiskit_optimization.runtime.VQEClient.shots.rst", "stubs/qiskit_optimization.runtime.VQEClient.store_intermediate.rst", "stubs/qiskit_optimization.runtime.VQEClient.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgram.rst", "stubs/qiskit_optimization.runtime.VQEProgram.compute_minimum_eigenvalue.rst", "stubs/qiskit_optimization.runtime.VQEProgram.supports_aux_operators.rst", "stubs/qiskit_optimization.runtime.VQEProgramResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.job_id.rst", "stubs/qiskit_optimization.runtime.VQERuntimeResult.optimizer_history.rst", "stubs/qiskit_optimization.translators.from_docplex_mp.rst", "stubs/qiskit_optimization.translators.from_gurobipy.rst", "stubs/qiskit_optimization.translators.from_ising.rst", "stubs/qiskit_optimization.translators.to_docplex_mp.rst", "stubs/qiskit_optimization.translators.to_gurobipy.rst", "stubs/qiskit_optimization.translators.to_ising.rst", "tutorials/01_quadratic_program.ipynb", "tutorials/02_converters_for_quadratic_programs.ipynb", "tutorials/03_minimum_eigen_optimizer.ipynb", "tutorials/04_grover_optimizer.ipynb", "tutorials/05_admm_optimizer.ipynb", "tutorials/06_examples_max_cut_and_tsp.ipynb", "tutorials/07_examples_vehicle_routing.ipynb", "tutorials/08_cvar_optimization.ipynb", "tutorials/09_application_classes.ipynb", "tutorials/10_warm_start_qaoa.ipynb", "tutorials/11_using_classical_optimization_solvers_and_models.ipynb", "tutorials/12_qaoa_runtime.ipynb", "tutorials/index.rst"], "titles": ["Qiskit Optimization API Reference", "Optimization algorithms (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms</span></code>)", "Optimization applications (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.applications</span></code>)", "Optimization converters (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.converters</span></code>)", "Optimization problems (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.problems</span></code>)", "Qiskit Optimization Runtime (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.runtime</span></code>)", "Quadratic program translators (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.translators</span></code>)", "Ba\u015flarken", "Qiskit Optimization overview", "Release Notes", "INFINITY", "QiskitOptimizationError", "QuadraticProgram", "QuadraticProgram.binary_var", "QuadraticProgram.binary_var_dict", "QuadraticProgram.binary_var_list", "QuadraticProgram.clear", "QuadraticProgram.continuous_var", "QuadraticProgram.continuous_var_dict", "QuadraticProgram.continuous_var_list", "QuadraticProgram.export_as_lp_string", "QuadraticProgram.from_ising", "QuadraticProgram.get_feasibility_info", "QuadraticProgram.get_linear_constraint", "QuadraticProgram.get_num_binary_vars", "QuadraticProgram.get_num_continuous_vars", "QuadraticProgram.get_num_integer_vars", "QuadraticProgram.get_num_linear_constraints", "QuadraticProgram.get_num_quadratic_constraints", "QuadraticProgram.get_num_vars", "QuadraticProgram.get_quadratic_constraint", "QuadraticProgram.get_variable", "QuadraticProgram.integer_var", "QuadraticProgram.integer_var_dict", "QuadraticProgram.integer_var_list", "QuadraticProgram.is_feasible", "QuadraticProgram.linear_constraint", "QuadraticProgram.linear_constraints", "QuadraticProgram.linear_constraints_index", "QuadraticProgram.maximize", "QuadraticProgram.minimize", "QuadraticProgram.name", "QuadraticProgram.objective", "QuadraticProgram.prettyprint", "QuadraticProgram.quadratic_constraint", "QuadraticProgram.quadratic_constraints", "QuadraticProgram.quadratic_constraints_index", "QuadraticProgram.read_from_lp_file", "QuadraticProgram.remove_linear_constraint", "QuadraticProgram.remove_quadratic_constraint", "QuadraticProgram.status", "QuadraticProgram.substitute_variables", "QuadraticProgram.to_ising", "QuadraticProgram.variables", "QuadraticProgram.variables_index", "QuadraticProgram.write_to_lp_file", "ADMMOptimizationResult", "ADMMOptimizationResult.state", "ADMMOptimizer", "ADMMOptimizer.get_compatibility_msg", "ADMMOptimizer.parameters", "ADMMOptimizer.solve", "ADMMParameters", "ADMMState", "BaseAggregator", "BaseAggregator.aggregate", "CobylaOptimizer", "CobylaOptimizer.get_compatibility_msg", "CobylaOptimizer.solve", "CplexOptimizer", "CplexOptimizer.cplex_parameters", "CplexOptimizer.disp", "CplexOptimizer.get_compatibility_msg", "CplexOptimizer.is_cplex_installed", "CplexOptimizer.solve", "GoemansWilliamsonOptimizationResult", "GoemansWilliamsonOptimizationResult.sdp_solution", "GoemansWilliamsonOptimizer", "GoemansWilliamsonOptimizer.get_compatibility_msg", "GoemansWilliamsonOptimizer.max_cut_value", "GoemansWilliamsonOptimizer.solve", "GroverOptimizationResult", "GroverOptimizationResult.intermediate_fval", "GroverOptimizationResult.n_input_qubits", "GroverOptimizationResult.n_output_qubits", "GroverOptimizationResult.operation_counts", "GroverOptimizationResult.raw_samples", "GroverOptimizationResult.threshold", "GroverOptimizer", "GroverOptimizer.get_compatibility_msg", "GroverOptimizer.quantum_instance", "GroverOptimizer.solve", "GurobiOptimizer", "GurobiOptimizer.disp", "GurobiOptimizer.get_compatibility_msg", "GurobiOptimizer.is_gurobi_installed", "GurobiOptimizer.solve", "IntermediateResult", "IntermediateResult.ALL_ITERATIONS", "IntermediateResult.LAST_ITERATION", "IntermediateResult.NO_ITERATIONS", "MeanAggregator", "MeanAggregator.aggregate", "MinimumEigenOptimizationResult", "MinimumEigenOptimizationResult.min_eigen_solver_result", "MinimumEigenOptimizationResult.raw_samples", "MinimumEigenOptimizer", "MinimumEigenOptimizer.get_compatibility_msg", "MinimumEigenOptimizer.min_eigen_solver", "MinimumEigenOptimizer.solve", "MultiStartOptimizer", "MultiStartOptimizer.clip", "MultiStartOptimizer.multi_start_solve", "MultiStartOptimizer.trials", "OptimizationAlgorithm", "OptimizationAlgorithm.get_compatibility_msg", "OptimizationAlgorithm.is_compatible", "OptimizationAlgorithm.solve", "OptimizationResult", "OptimizationResult.__getitem__", "OptimizationResult.fval", "OptimizationResult.get_correlations", "OptimizationResult.prettyprint", "OptimizationResult.raw_results", "OptimizationResult.samples", "OptimizationResult.status", "OptimizationResult.variable_names", "OptimizationResult.variables", "OptimizationResult.variables_dict", "OptimizationResult.x", "OptimizationResultStatus", "OptimizationResultStatus.FAILURE", "OptimizationResultStatus.INFEASIBLE", "OptimizationResultStatus.SUCCESS", "RecursiveMinimumEigenOptimizationResult", "RecursiveMinimumEigenOptimizationResult.history", "RecursiveMinimumEigenOptimizationResult.replacements", "RecursiveMinimumEigenOptimizer", "RecursiveMinimumEigenOptimizer.get_compatibility_msg", "RecursiveMinimumEigenOptimizer.solve", "SlsqpOptimizationResult", "SlsqpOptimizationResult.fx", "SlsqpOptimizationResult.imode", "SlsqpOptimizationResult.its", "SlsqpOptimizationResult.smode", "SlsqpOptimizer", "SlsqpOptimizer.get_compatibility_msg", "SlsqpOptimizer.solve", "SolutionSample", "SolutionSample.fval", "SolutionSample.probability", "SolutionSample.status", "SolutionSample.x", "WarmStartQAOAFactory", "WarmStartQAOAFactory.create_initial_state", "WarmStartQAOAFactory.create_initial_variables", "WarmStartQAOAFactory.create_mixer", "WarmStartQAOAOptimizer", "WarmStartQAOAOptimizer.solve", "BinPacking", "BinPacking.get_figure", "BinPacking.interpret", "BinPacking.to_quadratic_program", "Clique", "Clique.interpret", "Clique.size", "Clique.to_quadratic_program", "ExactCover", "ExactCover.interpret", "ExactCover.to_quadratic_program", "GraphOptimizationApplication", "GraphOptimizationApplication.draw", "GraphOptimizationApplication.graph", "GraphOptimizationApplication.random_graph", "GraphPartition", "GraphPartition.interpret", "GraphPartition.to_quadratic_program", "Knapsack", "Knapsack.interpret", "Knapsack.max_weight", "Knapsack.to_quadratic_program", "Maxcut", "Maxcut.get_gset_result", "Maxcut.interpret", "Maxcut.parse_gset_format", "Maxcut.to_quadratic_program", "NumberPartition", "NumberPartition.interpret", "NumberPartition.to_quadratic_program", "OptimizationApplication", "OptimizationApplication.interpret", "OptimizationApplication.sample_most_likely", "OptimizationApplication.to_quadratic_program", "SKModel", "SKModel.disorder", "SKModel.graph", "SKModel.interpret", "SKModel.num_sites", "SKModel.to_quadratic_program", "SetPacking", "SetPacking.interpret", "SetPacking.to_quadratic_program", "StableSet", "StableSet.interpret", "StableSet.to_quadratic_program", "Tsp", "Tsp.create_random_instance", "Tsp.interpret", "Tsp.parse_tsplib_format", "Tsp.to_quadratic_program", "Tsp.tsp_value", "VehicleRouting", "VehicleRouting.create_random_instance", "VehicleRouting.depot", "VehicleRouting.interpret", "VehicleRouting.num_vehicles", "VehicleRouting.to_quadratic_program", "VertexCover", "VertexCover.interpret", "VertexCover.to_quadratic_program", "InequalityToEquality", "InequalityToEquality.convert", "InequalityToEquality.interpret", "InequalityToEquality.mode", "IntegerToBinary", "IntegerToBinary.convert", "IntegerToBinary.interpret", "LinearEqualityToPenalty", "LinearEqualityToPenalty.convert", "LinearEqualityToPenalty.interpret", "LinearEqualityToPenalty.penalty", "LinearInequalityToPenalty", "LinearInequalityToPenalty.convert", "LinearInequalityToPenalty.interpret", "LinearInequalityToPenalty.penalty", "MaximizeToMinimize", "MinimizeToMaximize", "QuadraticProgramConverter", "QuadraticProgramConverter.convert", "QuadraticProgramConverter.interpret", "QuadraticProgramToQubo", "QuadraticProgramToQubo.convert", "QuadraticProgramToQubo.get_compatibility_msg", "QuadraticProgramToQubo.interpret", "QuadraticProgramToQubo.is_compatible", "QuadraticProgramToQubo.penalty", "Constraint", "Constraint.evaluate", "Constraint.name", "Constraint.rhs", "Constraint.sense", "LinearConstraint", "LinearConstraint.evaluate", "LinearConstraint.linear", "LinearExpression", "LinearExpression.__getitem__", "LinearExpression.bounds", "LinearExpression.coefficients", "LinearExpression.evaluate", "LinearExpression.evaluate_gradient", "LinearExpression.to_array", "LinearExpression.to_dict", "QuadraticConstraint", "QuadraticConstraint.evaluate", "QuadraticConstraint.linear", "QuadraticConstraint.quadratic", "QuadraticExpression", "QuadraticExpression.__getitem__", "QuadraticExpression.bounds", "QuadraticExpression.coefficients", "QuadraticExpression.evaluate", "QuadraticExpression.evaluate_gradient", "QuadraticExpression.to_array", "QuadraticExpression.to_dict", "QuadraticObjective", "QuadraticObjective.constant", "QuadraticObjective.evaluate", "QuadraticObjective.evaluate_gradient", "QuadraticObjective.linear", "QuadraticObjective.quadratic", "QuadraticObjective.sense", "QuadraticProgramElement", "QuadraticProgramElement.quadratic_program", "Variable", "Variable.as_tuple", "Variable.lowerbound", "Variable.name", "Variable.upperbound", "Variable.vartype", "QAOAClient", "QAOAClient.alpha", "QAOAClient.ansatz", "QAOAClient.initial_state", "QAOAClient.mixer", "QAOAClient.optimization_level", "QAOAClient.program_inputs", "QAOAClient.reps", "QAOAClient.use_initial_mapping", "QAOAClient.use_pulse_efficient", "QAOAClient.use_swap_strategies", "QAOAProgram", "QAOAProgram.compute_minimum_eigenvalue", "VQEClient", "VQEClient.ansatz", "VQEClient.backend", "VQEClient.callback", "VQEClient.compute_minimum_eigenvalue", "VQEClient.initial_point", "VQEClient.measurement_error_mitigation", "VQEClient.optimizer", "VQEClient.program_id", "VQEClient.program_inputs", "VQEClient.provider", "VQEClient.shots", "VQEClient.store_intermediate", "VQEClient.supports_aux_operators", "VQEProgram", "VQEProgram.compute_minimum_eigenvalue", "VQEProgram.supports_aux_operators", "VQEProgramResult", "VQERuntimeResult", "VQERuntimeResult.job_id", "VQERuntimeResult.optimizer_history", "from_docplex_mp", "from_gurobipy", "from_ising", "to_docplex_mp", "to_gurobipy", "to_ising", "Quadratic Programs", "\u0130kinci Dereceden Programlar i\u00e7in D\u00f6n\u00fc\u015ft\u00fcr\u00fcc\u00fcler", "Minimum \u00d6zde\u011fer Optimize Edici", "Grover Optimize Edici", "ADMM Optimize edici", "Max-Cut and Traveling Salesman Problem", "Vehicle Routing", "CVaR Kullanarak De\u011fi\u015fimsel Kuantum Optimizasyonunu \u0130yile\u015ftirme", "Optimizasyon Problemleri i\u00e7in Uygulama S\u0131n\u0131flar\u0131", "S\u0131cak ba\u015flang\u0131\u00e7l\u0131 kuantum optimizasyonu", "Using Classical Optimization Solvers and Models with Qiskit Optimization", "QAOA Runtime", "Optimizasyon E\u011fitimleri"], "terms": {"0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341], "covers": [0, 8], "the": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 336, 337, 338, 339], "whole": [0, 8], "range": [0, 8, 48, 49, 119, 153, 157, 334, 335, 336, 338, 340], "from": [0, 7, 8, 21, 47, 66, 69, 79, 92, 99, 103, 104, 106, 110, 118, 121, 123, 137, 140, 142, 144, 145, 155, 157, 162, 166, 169, 176, 180, 182, 184, 185, 188, 191, 193, 198, 201, 204, 206, 208, 209, 212, 216, 219, 220, 224, 229, 233, 240, 323, 325, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "high": [0, 8, 206, 212], "level": [0, 8, 283, 289, 294, 335, 340], "modelingi": [0, 8], "of": [0, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 65, 66, 68, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 96, 97, 101, 102, 103, 104, 105, 106, 109, 110, 112, 113, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 139, 140, 141, 143, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 177, 178, 179, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 199, 200, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 220, 222, 223, 226, 229, 231, 232, 233, 237, 239, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 297, 300, 301, 302, 306, 308, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340], "problems": [0, 1, 2, 8, 58, 66, 69, 72, 92, 94, 106, 137, 145, 220, 224, 240, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340], "with": [0, 4, 8, 22, 51, 55, 58, 59, 61, 62, 66, 67, 68, 69, 72, 74, 78, 81, 88, 89, 91, 92, 94, 96, 106, 107, 110, 115, 116, 117, 118, 137, 138, 140, 145, 146, 147, 161, 171, 193, 221, 224, 225, 227, 228, 231, 241, 242, 244, 260, 261, 272, 273, 276, 277, 281, 289, 300, 301, 306, 308, 317, 321, 329, 330, 333, 334, 335, 338, 340], "automati\u00e7": [0, 8, 331, 340], "conversion": [0, 3, 8, 227, 230, 231, 234, 239, 240, 245, 329, 330, 331], "to": [0, 3, 4, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 21, 29, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 47, 50, 51, 52, 54, 55, 59, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 77, 78, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 94, 96, 97, 102, 106, 107, 109, 112, 115, 116, 117, 118, 119, 120, 133, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 163, 170, 174, 181, 183, 190, 202, 205, 207, 211, 217, 220, 221, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 238, 240, 241, 242, 244, 247, 252, 253, 255, 258, 259, 260, 261, 263, 264, 265, 267, 270, 271, 272, 273, 276, 277, 283, 284, 289, 290, 294, 297, 298, 300, 301, 302, 306, 308, 311, 314, 316, 317, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340], "different": [0, 3, 8, 88, 106, 137, 140, 157, 331, 333, 335, 336, 338, 340], "requiredi": [0, 8, 238, 335, 340], "representations": [0, 3, 8], "a": [0, 3, 7, 8, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 30, 31, 33, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 52, 54, 55, 58, 59, 62, 64, 66, 67, 69, 72, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 104, 106, 107, 110, 112, 115, 116, 118, 119, 121, 122, 123, 128, 131, 133, 134, 135, 136, 137, 138, 140, 145, 146, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 231, 232, 235, 236, 238, 239, 240, 241, 242, 243, 244, 251, 254, 255, 262, 266, 267, 272, 273, 274, 281, 283, 284, 289, 297, 298, 300, 302, 308, 316, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339], "sui": [0, 8], "easy": [0, 8, 190, 334, 338], "use": [0, 8, 66, 88, 106, 137, 145, 157, 220, 261, 273, 289, 294, 299, 300, 302, 308, 316, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340], "quan": [0, 8, 58, 90, 91, 153, 154, 156, 157, 224, 289, 300, 331, 332, 333, 336, 338, 340], "algorithms": [0, 5, 8, 66, 69, 92, 106, 114, 118, 137, 145, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "that": [0, 5, 7, 8, 38, 43, 46, 51, 54, 58, 63, 65, 72, 80, 81, 94, 102, 110, 112, 118, 137, 140, 153, 154, 157, 193, 221, 222, 225, 227, 228, 229, 231, 233, 240, 243, 254, 266, 281, 289, 300, 302, 315, 316, 318, 323, 324, 329, 330, 331, 332, 335, 338, 339, 340], "are": [0, 4, 8, 14, 15, 18, 19, 21, 22, 29, 33, 34, 51, 52, 62, 63, 66, 98, 99, 100, 110, 137, 145, 193, 220, 227, 231, 232, 240, 266, 289, 294, 300, 302, 316, 325, 328, 329, 330, 331, 334, 335, 338, 339, 340], "ready": [0, 8, 335], "run": [0, 8, 90, 158, 289, 297, 298, 300, 302, 316, 333, 334, 335, 336, 340], "on": [0, 3, 7, 8, 29, 58, 66, 74, 96, 137, 163, 174, 181, 202, 205, 211, 217, 227, 231, 240, 289, 300, 302, 316, 330, 331, 333, 335, 336, 338, 340], "classical": [0, 8, 58, 289, 300, 302, 316, 331, 333, 334, 336, 340], "simulators": [0, 8], "as": [0, 7, 8, 12, 14, 15, 16, 18, 19, 20, 21, 22, 33, 34, 35, 51, 62, 63, 66, 69, 92, 106, 118, 119, 128, 137, 145, 156, 161, 163, 164, 168, 170, 174, 175, 178, 181, 182, 183, 184, 187, 191, 193, 196, 200, 202, 203, 205, 207, 211, 214, 217, 218, 231, 241, 254, 260, 261, 266, 272, 273, 289, 300, 302, 316, 319, 320, 324, 325, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "well": [0, 8, 12, 16, 106, 289, 300, 334, 340], "real": [0, 8, 334, 339, 340], "devices": [0, 8], "via": [0, 8, 14, 15, 18, 19, 33, 34, 62, 66, 134, 135, 145, 254, 266, 333, 335, 339], "this": [0, 3, 7, 12, 43, 47, 52, 55, 58, 59, 62, 66, 67, 69, 72, 74, 78, 89, 91, 92, 94, 96, 106, 107, 110, 111, 113, 115, 116, 119, 122, 137, 138, 145, 146, 150, 151, 153, 157, 163, 166, 224, 231, 232, 242, 244, 283, 284, 289, 300, 302, 311, 316, 319, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "enables": [0, 8], "efficient": [0, 8, 289, 298], "usingi": [0, 7, 8, 51, 61, 68, 72, 74, 91, 94, 96, 109, 117, 139, 147, 157, 158, 190, 231, 239, 261, 273, 289, 308, 329, 331, 333, 334, 336, 338, 340], "docplex": [0, 8, 323, 326, 332, 333, 336, 338], "uniform": [0, 8, 289], "interfa\u00e7": [0, 8, 281], "between": [0, 3, 6, 8, 153, 157, 333, 335, 340], "proble": [0, 3, 4, 8, 21, 43, 51, 52, 56, 59, 61, 62, 63, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 80, 81, 88, 89, 91, 92, 94, 96, 103, 106, 107, 109, 112, 115, 116, 117, 118, 126, 127, 134, 137, 138, 139, 140, 145, 146, 147, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 190, 192, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 289, 325, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340], "allows": [0, 8, 118, 289, 300, 331], "users": [0, 8, 118, 157, 231], "solve": [0, 8, 58, 66, 69, 77, 92, 94, 106, 112, 118, 137, 145, 157, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "large": [0, 8, 334], "set": [0, 3, 8, 11, 62, 91, 199, 201, 202, 204, 289, 300, 301, 302, 306, 316, 317, 334, 335, 336, 339, 340], "variational": [0, 8, 137, 331, 332, 333, 335, 336, 340], "such": [0, 8, 22, 35, 106, 319, 320, 329, 330, 331, 333, 334, 338, 339], "approxima": [0, 8, 77, 106, 301, 306, 317, 332, 338], "algorith": [0, 7, 8, 56, 58, 61, 75, 77, 80, 81, 87, 88, 90, 103, 106, 112, 118, 123, 125, 130, 131, 132, 133, 134, 137, 140, 157, 289, 332, 333, 334, 335, 336, 338, 340], "qao": [0, 8, 106, 137, 153, 154, 155, 156, 157, 289, 295, 300, 330, 331, 332, 333, 334, 337, 339], "grover": [0, 8, 81, 87, 88, 91], "adaptiv": [0, 8, 88, 332], "search": [0, 8, 88, 332], "groveroptimizer": [0, 8, 86, 330, 331, 332, 333], "leveragingi": [0, 8, 331, 338, 340], "fundamental": [0, 8], "providedi": [0, 8, 22, 35, 106], "by": [0, 8, 11, 43, 51, 56, 62, 77, 88, 101, 102, 103, 106, 110, 118, 134, 135, 137, 140, 157, 159, 220, 224, 231, 254, 266, 283, 289, 300, 302, 316, 329, 330, 331, 333, 334, 335, 338, 339, 340], "terra": [0, 8, 21, 52, 289, 325, 328, 331], "furthermor": [0, 8], "modu": [0, 7, 8], "design": [0, 8], "it": [0, 7, 8, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 43, 44, 50, 51, 106, 153, 157, 163, 170, 174, 181, 202, 205, 211, 217, 235, 236, 289, 300, 302, 315, 316, 318, 323, 331, 333, 335, 338, 339, 340], "be": [0, 4, 7, 8, 29, 39, 40, 43, 47, 50, 58, 59, 61, 62, 65, 66, 67, 68, 69, 72, 74, 77, 78, 81, 88, 89, 91, 92, 94, 96, 97, 102, 106, 107, 109, 110, 115, 116, 117, 118, 119, 137, 138, 139, 140, 145, 146, 147, 153, 156, 157, 158, 163, 170, 174, 181, 202, 205, 211, 217, 220, 221, 225, 227, 228, 231, 232, 240, 241, 242, 244, 247, 252, 254, 255, 258, 259, 263, 266, 267, 270, 271, 276, 277, 283, 289, 300, 301, 302, 306, 315, 316, 317, 318, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340], "easily": [0, 8, 329], "extendedi": [0, 8], "and": [0, 3, 5, 6, 7, 8, 11, 12, 14, 15, 18, 19, 21, 33, 34, 36, 44, 47, 51, 58, 62, 66, 67, 75, 79, 81, 89, 97, 103, 106, 107, 110, 118, 119, 128, 134, 136, 137, 138, 145, 146, 153, 157, 160, 193, 208, 231, 232, 238, 242, 254, 256, 262, 266, 268, 284, 289, 300, 301, 302, 306, 308, 316, 317, 319, 320, 323, 325, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340], "facilitates": [0, 8], "rapidi": [0, 8], "development": [0, 8], "testingi": [0, 8, 333], "new": [0, 8, 118, 194, 224, 225, 240, 241, 254, 266, 283, 334, 335], "compatip": [0, 8, 61, 67, 89, 107, 109, 116, 138, 146, 158, 242, 244, 335], "optimizers": [0, 8, 110, 334, 335, 336, 339, 340], "also": [0, 8, 94, 302, 329, 330, 331, 333, 339, 340], "for": [0, 4, 7, 8, 11, 21, 23, 30, 31, 43, 52, 58, 62, 63, 64, 66, 69, 70, 75, 77, 81, 88, 92, 106, 110, 111, 113, 114, 118, 123, 137, 145, 153, 155, 157, 159, 163, 166, 167, 170, 171, 172, 173, 174, 177, 179, 181, 183, 186, 189, 193, 195, 199, 202, 205, 206, 211, 212, 214, 217, 220, 223, 224, 237, 247, 258, 259, 266, 270, 271, 276, 277, 281, 289, 300, 301, 302, 306, 311, 315, 316, 317, 318, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340], "validation": [0, 8, 333], "benchmarkingi": [0, 8, 333], "supports": [0, 12, 231, 302, 316, 323, 324, 329, 339], "quadratically": [0, 12], "constrainedi": [0, 12, 289, 300, 333], "quadrati\u00e7": [0, 12, 13, 16, 17, 20, 21, 28, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 53, 55, 77, 80, 106, 145, 237, 251, 262, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 323, 324, 325, 326, 327, 330, 331, 333, 334, 335, 338, 339, 340], "programs": [0, 5, 237], "simplicity": 0, "we": [0, 266, 301, 306, 317, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340], "refer": [0, 261, 273, 331], "them": [0, 66, 102, 145, 335], "just": [0, 75], "binary": [0, 12, 13, 14, 15, 24, 52, 58, 62, 79, 106, 182, 190, 191, 224, 225, 226, 231, 232, 323, 324, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "integer": [0, 12, 26, 32, 33, 34, 106, 119, 220, 224, 225, 226, 289, 300, 323, 324, 328, 329, 330, 331, 335, 339, 340], "continuous": [0, 12, 17, 18, 19, 25, 58, 62, 66, 67, 145, 146, 157, 220, 283, 323, 324, 328, 329, 333, 338], "variables": [0, 12, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 29, 33, 34, 51, 52, 56, 62, 63, 66, 67, 75, 81, 103, 106, 118, 119, 134, 136, 137, 140, 145, 146, 152, 153, 154, 155, 156, 157, 220, 223, 224, 225, 226, 229, 231, 232, 233, 247, 252, 258, 259, 261, 263, 267, 270, 271, 273, 276, 277, 283, 297, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340], "equality": [0, 12, 36, 44, 62, 106, 137, 220, 221, 227, 228, 231, 240, 330, 331, 333, 335], "inequality": [0, 12, 220, 221, 228, 231, 232, 330, 333], "constraints": [0, 12, 16, 22, 27, 28, 37, 45, 52, 62, 106, 137, 220, 221, 227, 228, 231, 232, 240, 241, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340], "class": [0, 11, 12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320, 329, 330, 331, 335, 338], "has": [0, 14, 15, 18, 19, 33, 34, 91, 106, 110, 119, 289, 300, 301, 306, 316, 317, 319, 325, 329, 334, 338, 339, 340], "vast": 0, "amount": [0, 334], "relevant": [0, 63, 334], "applications": [0, 170, 189, 334, 337, 340], "whil": [0, 330, 335], "still": [0, 51, 338], "beingi": [0, 7, 63, 134, 136, 140, 141, 331, 334, 335], "efficiently": [0, 333, 334], "representap": 0, "matrices": [0, 329, 331], "vectors": [0, 329], "some": [0, 43, 231, 329, 334, 335, 339], "very": [0, 331], "interestingi": [0, 331], "sub": [0, 110, 311, 329, 335], "classes": [0, 4, 7, 311, 333, 334], "convex": [0, 72, 74, 94, 96, 333], "which": [0, 7, 22, 231, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340], "can": [0, 50, 58, 59, 62, 66, 67, 72, 78, 89, 94, 107, 115, 116, 119, 137, 138, 145, 146, 153, 158, 163, 170, 174, 181, 202, 205, 211, 217, 242, 244, 254, 255, 266, 267, 289, 300, 301, 302, 306, 311, 315, 316, 317, 318, 329, 330, 332, 333, 334, 335, 338, 339, 340], "solvedi": [0, 59, 61, 63, 66, 67, 68, 72, 74, 78, 89, 91, 94, 96, 107, 109, 110, 115, 116, 117, 118, 138, 139, 145, 146, 147, 158, 221, 225, 228, 232, 241, 242, 244, 333, 338], "unconstrainedi": [0, 106, 227, 228, 330, 331, 336], "qubo": [0, 58, 62, 81, 88, 89, 91, 103, 106, 107, 138, 231, 240, 241, 242, 330, 333, 334, 335, 337, 338, 340], "cover": [0, 167, 169, 217, 219, 337], "many": [0, 331, 335], "np": [0, 190, 193, 331, 333, 334, 335, 336, 338, 340], "comple": [0, 308, 334, 335], "i": [0, 7, 16, 21, 23, 30, 31, 48, 49, 52, 67, 77, 89, 107, 138, 146, 193, 231, 232, 242, 255, 266, 267, 289, 300, 302, 316, 325, 328, 329, 331, 332, 333, 334, 335, 336, 338, 340], "e": [0, 7, 13, 14, 15, 16, 17, 18, 19, 21, 32, 33, 34, 36, 44, 51, 52, 62, 67, 89, 106, 107, 137, 138, 146, 193, 242, 266, 289, 300, 302, 316, 325, 328, 329, 331, 333, 334, 335, 339, 340], "classically": [0, 336], "intractap": 0, "representation": [0, 12, 195, 251, 254, 262, 266, 274, 283, 329, 330, 331, 335, 336, 340], "progra": [0, 7, 12, 13, 16, 17, 20, 21, 32, 36, 37, 41, 44, 45, 47, 50, 53, 55, 77, 251, 262, 274, 295, 302, 310, 311, 316, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 338], "supportingi": 0, "in": [0, 5, 7, 21, 22, 35, 47, 52, 58, 62, 66, 72, 75, 79, 81, 88, 90, 110, 114, 118, 120, 129, 131, 134, 137, 140, 145, 153, 156, 157, 161, 173, 182, 184, 190, 193, 207, 208, 222, 224, 226, 229, 230, 233, 234, 237, 241, 245, 266, 272, 273, 283, 289, 300, 301, 302, 306, 316, 317, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "addition": [0, 329, 334], "standard\u0131": [0, 153, 157, 289, 300, 302, 316, 331, 340], "python": [0, 7, 335, 339], "errors": [0, 11], "will": [0, 7, 58, 62, 88, 94, 106, 137, 157, 220, 227, 231, 240, 289, 298, 299, 315, 318, 331, 334, 335, 338, 340], "rai": [0, 74, 96, 335], "error": [0, 11, 289, 300, 302, 308, 316, 329, 335, 340], "if": [0, 7, 10, 13, 14, 15, 17, 18, 19, 21, 22, 23, 29, 30, 32, 33, 34, 35, 36, 43, 44, 47, 48, 49, 51, 52, 55, 58, 59, 61, 62, 66, 68, 69, 73, 74, 77, 78, 91, 92, 95, 96, 106, 109, 110, 115, 116, 117, 118, 119, 137, 145, 147, 153, 157, 158, 208, 220, 221, 225, 227, 228, 229, 231, 232, 233, 235, 236, 240, 244, 256, 268, 276, 277, 283, 289, 294, 297, 298, 300, 301, 302, 306, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 339, 340], "circumstances": 0, "cannot": [0, 55, 91, 329], "proceedi": 0, "completion": [0, 145], "constant": [0, 21, 39, 40, 51, 52, 274, 325, 328, 329, 331, 335], "infinity": [0, 329], "commo": 2, "is": [3, 7, 8, 13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 35, 36, 43, 44, 48, 49, 51, 52, 55, 58, 59, 61, 62, 63, 66, 67, 68, 69, 72, 73, 74, 77, 78, 81, 88, 89, 91, 92, 95, 96, 106, 107, 110, 115, 116, 117, 119, 134, 135, 136, 137, 138, 145, 146, 147, 153, 157, 158, 164, 166, 168, 171, 178, 187, 193, 200, 203, 208, 218, 221, 224, 225, 227, 228, 231, 232, 235, 236, 240, 242, 244, 272, 273, 283, 289, 300, 302, 308, 315, 316, 318, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "havingi": 3, "convert": [3, 10, 162, 166, 169, 176, 180, 185, 188, 190, 192, 198, 201, 204, 209, 216, 219, 220, 222, 224, 226, 227, 229, 231, 233, 235, 236, 240, 243, 323, 330, 331, 332, 334, 336, 337, 338, 339], "functionality": [3, 330, 334, 340], "go": 3, "give": [3, 23, 30, 31, 59, 61, 67, 68, 72, 74, 77, 78, 89, 91, 94, 96, 107, 109, 112, 115, 116, 117, 138, 139, 146, 147, 158, 193, 222, 226, 229, 233, 240, 242, 244, 247, 252, 258, 259, 263, 270, 271, 276, 277, 289, 301, 306, 317, 331, 335, 336, 338, 340], "quadraticprogra": [3, 4, 6, 59, 61, 63, 66, 67, 68, 69, 72, 74, 78, 80, 89, 91, 92, 94, 96, 106, 107, 109, 112, 115, 116, 117, 118, 137, 138, 139, 145, 146, 147, 158, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 224, 225, 228, 232, 238, 240, 241, 242, 244, 246, 254, 266, 281, 282, 283, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340], "interpret": [3, 82, 238, 330, 334, 337], "result": [3, 22, 35, 56, 61, 65, 66, 68, 69, 74, 81, 91, 92, 96, 102, 103, 104, 106, 109, 112, 117, 118, 122, 123, 134, 137, 139, 140, 145, 147, 158, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 238, 239, 243, 301, 306, 317, 319, 320, 333, 334, 335, 337, 338, 339, 340], "basedi": [3, 58, 163, 174, 181, 202, 205, 211, 217, 331, 334, 335, 336, 340], "original": [3, 81, 103, 106, 118, 123, 171, 222, 226, 229, 233, 243, 330, 336], "befor": [3, 82, 157, 330, 331, 339], "return": [3, 11, 52, 106, 118, 119, 123, 145, 208, 291, 294, 295, 303, 309, 310, 311, 312, 313, 328, 331, 334, 335, 338, 340], "an": [3, 4, 7, 8, 22, 32, 35, 48, 49, 51, 55, 56, 58, 66, 69, 72, 74, 75, 76, 79, 88, 91, 92, 94, 96, 106, 110, 114, 118, 119, 130, 132, 134, 135, 137, 145, 148, 154, 156, 157, 163, 166, 169, 170, 171, 174, 181, 184, 189, 190, 193, 198, 202, 205, 211, 217, 221, 225, 228, 232, 237, 241, 254, 260, 261, 266, 272, 273, 289, 300, 302, 315, 316, 318, 325, 328, 330, 331, 334, 335, 336, 338, 339, 340], "appropria": 3, "optimizationresult": [3, 56, 68, 74, 75, 81, 91, 96, 103, 112, 117, 134, 135, 139, 140, 147, 160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 331, 333], "structures": 4, "definingi": [4, 335], "followingi": [4, 231, 232, 323, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340], "not": [4, 22, 23, 30, 35, 36, 47, 48, 49, 52, 55, 58, 61, 62, 66, 69, 71, 74, 91, 92, 93, 96, 106, 109, 118, 153, 157, 158, 208, 221, 225, 228, 231, 272, 273, 276, 277, 283, 289, 294, 299, 300, 301, 302, 306, 308, 314, 316, 317, 329, 330, 331, 332, 333, 334, 335, 336, 340], "intendedi": 4, "instantiatedi": 4, "directly": [4, 163, 170, 174, 181, 202, 205, 211, 217, 329, 331, 339, 340], "objects": [4, 6, 65, 102, 281, 319, 320, 339], "thes": [4, 289, 300, 301, 302, 306, 316, 317, 330, 334, 335, 339, 340], "types": [4, 329, 335, 340], "availap": [4, 333, 335, 338, 339, 340], "embedi": 5, "algorithmi\u00e7": [5, 66, 145], "interfaces": 5, "facilita": 5, "usage": [5, 7, 193], "scripts": 5, "cloudu": [5, 316, 340], "other": [6, 51, 62, 110, 193, 329, 330, 331, 334], "optimization": [6, 7, 11, 51, 56, 58, 59, 62, 63, 66, 67, 68, 69, 72, 74, 75, 78, 81, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 145, 146, 147, 148, 157, 158, 159, 163, 166, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 237, 240, 242, 244, 274, 289, 294, 300, 302, 314, 316, 329, 330, 331, 332, 333, 334, 335, 337, 338], "models": [6, 231], "or": [6, 10, 13, 14, 15, 17, 18, 19, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 44, 48, 49, 51, 62, 66, 69, 71, 92, 93, 106, 110, 118, 119, 129, 134, 136, 145, 157, 158, 163, 170, 174, 181, 190, 191, 193, 202, 205, 211, 217, 222, 225, 226, 229, 231, 233, 254, 255, 261, 266, 267, 272, 273, 289, 299, 300, 302, 308, 314, 316, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit": [7, 11, 21, 52, 66, 69, 92, 106, 114, 137, 145, 237, 289, 302, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "optimizasyo": [7, 329, 330, 332, 333, 335, 336], "i\u00e7": [7, 329, 331, 332, 333, 335, 336, 338], "se\u00e7enek": 7, "ve": [7, 330, 332, 333, 334, 335, 336, 337, 338], "o": [7, 332], "desteklene": 7, "orta": [7, 329, 330, 333, 335], "platform": 7, "detayland\u0131ra": 7, "ad": [7, 329, 335], "ke": [7, 333, 338], "paket": [7, 333, 337], "ba\u011fl\u0131": [7, 330, 334, 338], "\u00f6ncelik": [7, 333], "p": [7, 231, 232, 289, 300, 333, 334, 336, 340], "bakmal": 7, "sonra": [7, 329, 330, 332, 333, 334], "bura": [7, 332, 333, 334, 335, 338], "yer": [7, 330, 332], "ala": [7, 334, 335], "\u00f6zg\u00fc": [7, 333], "ek": [7, 330, 334], "ili\u015fk": 7, "bilgi": [7, 330, 332, 334], "takip": [7, 332], "edilebilir": [7, 330, 334, 335], "ba\u011f\u0131ml\u0131": 7, "kod": 7, "veya": [7, 329, 332, 333, 334, 335, 337, 338], "destek": [7, 333], "lar": 7, "\u0131n": [7, 332, 334, 335, 336], "varsay\u0131la": [7, 330], "olarak": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "kurulmad\u0131k": 7, "ya": [7, 329, 330, 332], "da": [7, 208, 289, 300, 302, 316, 330, 334, 335, 337, 338], "kurulamad\u0131k": 7, "birtak": 7, "fonksiyon": [7, 329, 330, 332, 334, 336], "sahip": [7, 333, 334, 336, 337], "bun": [7, 335], "ibm": [7, 69, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "cplex": [7, 47, 69, 70, 71, 72, 73, 329, 331, 333, 339], "cvxpy": 7, "matplotlip": [7, 333, 334, 335, 336, 337, 340], "dir": 7, "dah": [7, 329, 330, 332, 333, 334, 335, 336, 338], "faz": [7, 332, 333, 334, 335], "bakabilir": 7, "yerel": 7, "ba\u015flatma": [7, 333], "en": [7, 69, 97, 130, 159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217, 332, 334, 335, 336, 337], "kolay": [7, 334, 337, 338], "yol": [7, 335, 338], "b\u00f6l\u00fcm": [7, 334], "ederek": [7, 332], "ba\u015flamak": 7, "kurduk": 7, "sanal": 7, "ortam": 7, "ekstra": 7, "g\u00f6rselle\u015ftirme": 7, "nas\u0131l": [7, 329, 334, 335, 336], "kurulduk": 7, "benzer": [7, 330, 335], "\u015fekil": [7, 329, 330, 332, 334, 335, 337], "\u0131": [7, 330, 332, 334], "liste": 7, "ekleme": 7, "yeterli": 7, "yani": [7, 332, 333, 335, 338], "pip": [7, 339], "install": [7, 339], "worth": 7, "pointingi": 7, "out": [7, 23, 30, 48, 49, 119, 163, 170, 174, 181, 202, 205, 211, 217], "you": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "re": [7, 308, 330, 340], "zsh": 7, "user": [7, 97], "default": [7, 13, 14, 15, 17, 18, 19, 21, 32, 33, 34, 36, 43, 44, 62, 88, 106, 137, 145, 157, 159, 163, 289, 300, 302, 316, 325, 329, 334, 335, 340], "shell": 7, "newer": 7, "versions": [7, 339], "macos": 7, "ll": 7, "needi": [7, 51, 65, 102, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "put": [7, 335], "quotes": 7, "kaynak": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 95, 96, 97, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 130, 134, 137, 138, 139, 140, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 284, 289, 295, 300, 301, 302, 306, 311, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328], "u": [7, 333, 337, 339], "kurmak": 7, "diz": [7, 329, 334, 335, 336, 337], "pypi": [7, 69, 339], "depos": 7, "versiyon": [7, 335], "kullanmak": [7, 337], "geli\u015ftirilmek": 7, "ola": [7, 329, 330, 331, 332, 333, 334, 335, 337], "son": [7, 331, 333, 334], "g\u00fcncelle": 7, "ula\u015fma": 7, "iz": [7, 331, 334], "verecek": 7, "bu": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "siz": [7, 23, 30, 66, 163, 166, 331, 335], "kodu": 7, "s\u00fcr\u00fcm": 7, "verimli": [7, 334], "bir": [7, 329, 330, 332, 333, 334, 335, 336, 337, 338], "incele": 7, "geni\u015fletme": 7, "olanak": 7, "olduk": [7, 330, 332, 333, 334, 335], "de\u011fi\u015fiklik": [7, 332], "qiakit": 7, "ye": [7, 329, 333], "de\u011fi\u015ftiril": 7, "\u00f6zellik": [7, 333, 335, 336], "gerektirebilecek": 7, "ilk": [7, 329, 334], "etme": [7, 334, 337], "gerekmek": 7, "source": [7, 8, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "instructions": 7, "her": [7, 66, 69, 92, 106, 137, 145, 302, 331, 332, 333, 334, 337, 338, 340], "gettingi": [7, 8, 334], "startedi": [7, 8, 334], "installingi": 7, "ayn\u0131": [7, 329, 330, 333, 335], "geli\u015ftirme": 7, "kullanarak": [7, 329, 335], "kurma": 7, "depo": [7, 335, 337], "klonlay": 7, "git": 7, "clone": 7, "https": [7, 21, 52, 66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 289, 300, 325, 328, 329, 339], "githup": [7, 21, 52, 325, 328, 329], "com": [7, 21, 52, 69, 325, 328], "klonlamak": 7, "dosya": 7, "olu\u015fturur": [7, 332, 337], "cd": 7, "e\u011fer": [7, 335, 338], "test": [7, 333, 340], "tiftikle": 7, "kontrol": [7, 334, 335], "yapmak": 7, "istiyor": [7, 337], "geli\u015ftiri\u00e7": 7, "gereksinim": 7, "y\u00fckley": 7, "r": [7, 331, 332, 333, 334, 335, 336], "requirements": 7, "dev": 7, "txt": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "d\u00fczenlenebilir": 7, "proje": 7, "yap\u0131la": 7, "uygulanmas": [7, 334], "yeni": 7, "y\u00fckle": 7, "gerekmiyor": 7, "i\u015fle": [7, 334], "\u015fun": [7, 335], "yapabilir": [7, 334], "may": [7, 72, 74, 77, 96, 140, 221, 225, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "installedi": [7, 47, 69, 73, 92, 95, 333, 339], "enap": [7, 334], "readingi": 7, "lp": [7, 20, 47, 55], "files": [7, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "cplexoptimizer": [7, 118, 333, 338, 339], "wrapper": [7, 66, 69, 92, 106, 145, 330], "currently": [7, 123, 330], "ther": [7, 21, 43, 77, 88, 137, 193, 220, 231, 325, 334, 335, 340], "no": [7, 59, 66, 78, 88, 100, 106, 115, 225, 329, 330, 331, 332, 334, 337, 338, 340], "3": [7, 62, 66, 88, 118, 220, 266, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340], "9": [7, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "version": [7, 157, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "case": [7, 72, 118, 129, 137, 157, 222, 226, 229, 233, 241, 330, 333, 334, 335, 336], "command\u0131": 7, "have": [7, 281, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "effect": 7, "cvx": 7, "goemans": [7, 75, 77, 80], "williamso": [7, 75, 77, 80], "optimizer": [7, 22, 35, 59, 60, 61, 62, 66, 67, 68, 69, 72, 74, 78, 89, 91, 92, 94, 96, 103, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 134, 137, 138, 139, 140, 142, 144, 145, 146, 147, 157, 158, 242, 244, 289, 300, 302, 316, 319, 320, 322, 330, 333, 334, 335, 336, 338, 340], "goemanswilliamsonoptimizer": 7, "draw": [7, 337, 338, 340], "methodu": [7, 47, 59, 62, 66, 77, 78, 110, 112, 115, 116, 145, 244, 311, 329, 331, 333], "graph": [7, 77, 163, 170, 171, 173, 174, 176, 181, 182, 184, 202, 205, 208, 211, 217, 334, 335, 337], "application": [7, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 334], "gurobipy": [7, 92, 324, 327], "gurobi": [7, 92, 93, 94, 95, 339], "gurobioptimizer": [7, 339], "div": 7, "into": [7, 14, 15, 18, 19, 33, 34, 88, 106, 137, 157, 162, 166, 169, 175, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219, 220, 221, 222, 224, 225, 228, 231, 232, 238, 239, 241, 243, 323, 324, 330, 331, 333, 335, 338, 339, 340], "tutorials": [7, 8, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "find": [7, 66, 88, 106, 133, 145, 329, 334, 335, 340], "about": [7, 118, 330, 331], "ope": [8, 55, 340], "framework": 8, "module": [8, 11, 66, 69, 92, 106, 114, 145, 237, 329, 330, 338, 340], "1e": [10, 17, 18, 19, 32, 33, 34, 145, 283], "20": [10, 17, 18, 19, 32, 33, 34, 69, 283, 331, 333, 334, 335, 338, 339, 340], "string": [10, 20, 43, 55, 67, 72, 94, 119, 122, 146, 182, 191, 329, 340], "number": [10, 14, 15, 18, 19, 24, 25, 26, 27, 28, 29, 33, 34, 62, 66, 77, 81, 83, 84, 88, 110, 113, 137, 140, 143, 145, 157, 159, 173, 186, 188, 193, 197, 206, 211, 212, 215, 229, 233, 276, 277, 289, 300, 302, 308, 313, 316, 331, 334, 335, 336, 339, 340], "floatingi": 10, "point": [10, 289, 300, 302, 307, 316, 330, 340], "possip": [10, 75, 220, 331, 334], "exception": [11, 72, 74, 91, 96, 335], "messag\u0131": [11, 59, 67, 78, 89, 107, 115, 138, 140, 144, 146, 242, 339], "returnedi": [11, 22, 35, 63, 97, 140, 301, 306, 317, 340], "s": [11, 13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 62, 88, 114, 163, 235, 236, 237, 302, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340], "with_traceback": 11, "tb": 11, "self": [11, 308, 335, 340], "__traceback__": 11, "name": [12, 13, 14, 15, 16, 17, 18, 19, 23, 30, 31, 32, 33, 34, 36, 38, 43, 44, 46, 48, 49, 51, 54, 55, 118, 119, 128, 145, 184, 208, 224, 246, 251, 255, 262, 283, 284, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "bases": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 97, 101, 103, 106, 110, 114, 118, 130, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "object": [12, 62, 63, 81, 104, 112, 118, 123, 140, 148, 153, 281, 319, 320, 329, 339, 340], "parametre": [12, 13, 14, 15, 17, 18, 19, 21, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 72, 74, 75, 77, 78, 79, 80, 81, 88, 89, 91, 92, 94, 96, 102, 103, 106, 107, 109, 110, 112, 115, 116, 117, 118, 119, 134, 137, 138, 139, 140, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 186, 187, 190, 191, 193, 196, 199, 200, 202, 203, 205, 206, 207, 208, 211, 212, 214, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 276, 277, 281, 283, 289, 300, 301, 302, 306, 316, 317, 323, 324, 325, 326, 327, 328, 335], "str": [12, 13, 14, 15, 17, 18, 19, 20, 23, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 54, 55, 59, 67, 69, 70, 72, 78, 81, 85, 89, 94, 107, 115, 119, 122, 126, 128, 134, 136, 138, 140, 144, 146, 184, 208, 220, 223, 242, 246, 247, 248, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 286, 289, 295, 300, 302, 309, 310, 311, 316, 321, 322, 334, 335, 338, 340], "attributes": [12, 56, 58, 66, 69, 75, 81, 88, 92, 97, 103, 106, 110, 118, 130, 134, 140, 145, 148, 157, 163, 170, 174, 177, 181, 193, 202, 205, 211, 217, 220, 227, 231, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320], "methods": [12, 56, 58, 62, 63, 64, 66, 69, 75, 77, 81, 88, 92, 101, 103, 106, 110, 114, 118, 119, 134, 137, 140, 145, 148, 153, 157, 159, 163, 167, 170, 174, 177, 181, 186, 189, 193, 199, 202, 205, 211, 217, 220, 224, 227, 231, 232, 235, 236, 237, 240, 246, 251, 254, 262, 266, 274, 281, 283, 289, 300, 302, 316, 319, 320, 335], "none": [13, 14, 15, 16, 17, 18, 19, 21, 29, 32, 33, 34, 36, 39, 40, 44, 47, 48, 49, 51, 55, 58, 66, 69, 75, 81, 88, 92, 103, 106, 118, 119, 129, 137, 140, 157, 159, 163, 165, 166, 171, 173, 193, 194, 206, 212, 227, 231, 240, 274, 289, 295, 300, 301, 302, 306, 311, 316, 317, 323, 335, 340], "adds": [13, 17, 32, 36, 44], "variap": [13, 14, 15, 17, 18, 19, 21, 22, 31, 32, 33, 34, 43, 50, 51, 52, 53, 54, 56, 66, 75, 81, 103, 110, 118, 119, 126, 127, 128, 129, 134, 136, 139, 140, 145, 155, 164, 168, 178, 200, 203, 218, 221, 225, 232, 252, 254, 255, 256, 258, 259, 261, 263, 266, 267, 268, 270, 271, 273, 276, 277, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "optional": [13, 14, 15, 17, 18, 19, 29, 32, 33, 34, 36, 44, 51, 58, 66, 69, 70, 75, 76, 81, 86, 88, 103, 105, 106, 118, 120, 129, 137, 140, 141, 142, 143, 144, 157, 159, 163, 165, 171, 173, 206, 212, 227, 230, 231, 234, 240, 245, 289, 291, 292, 294, 300, 301, 302, 304, 306, 307, 312, 316, 317, 322, 323, 333], "empty": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 55, 59, 72, 78, 94, 115, 329], "g": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 51, 106, 137, 193, 289, 300, 302, 316, 329, 331, 333, 334, 335, 339, 340], "x0": [13, 14, 15, 17, 18, 19, 32, 33, 34, 331, 332, 338], "usedi": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 58, 62, 66, 69, 81, 83, 84, 88, 90, 92, 106, 137, 145, 156, 157, 223, 224, 230, 234, 245, 247, 283, 289, 294, 300, 302, 316, 323, 330, 332, 333, 338, 340], "d\u00f6n\u00fc\u015f": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 335], "t\u00fcr": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 65, 67, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 154, 155, 156, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 330, 338], "addedi": [13, 17, 32, 36, 44, 227, 231, 240], "hareke": [13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 36, 43, 44, 47, 48, 49, 51, 52, 55, 61, 68, 74, 88, 91, 96, 106, 109, 110, 117, 118, 119, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 281, 283, 289, 301, 306, 317, 323, 324, 325, 326, 327, 328], "ge\u00e7irir": [13, 14, 15, 17, 18, 19, 21, 22, 23, 30, 32, 33, 34, 36, 43, 44, 47, 48, 49, 51, 52, 55, 61, 68, 74, 88, 91, 96, 106, 109, 110, 117, 118, 119, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 281, 283, 289, 301, 306, 317, 323, 324, 325, 326, 327, 328], "qiskitoptimizationerror": [13, 14, 15, 17, 18, 19, 21, 22, 32, 33, 34, 36, 43, 44, 51, 52, 61, 68, 74, 91, 96, 106, 109, 117, 118, 137, 139, 147, 153, 157, 158, 208, 221, 225, 228, 229, 232, 233, 241, 256, 268, 276, 277, 283, 289, 323, 324, 325, 326, 327, 328, 329, 331], "already": [13, 14, 15, 17, 18, 19, 32, 33, 34, 36, 44, 154, 156], "occupiedi": [13, 17, 32], "keys": [14, 15, 18, 19, 33, 34, 254, 261, 266, 273, 289, 300, 302, 316, 340], "key_format": [14, 15, 18, 19, 33, 34], "uses": [14, 15, 18, 19, 33, 34, 88, 157, 254, 266, 330, 331, 334], "var_dict": [14, 18, 33], "construct": [14, 15, 18, 19, 33, 34, 231, 289, 331, 333, 334, 340], "dictionary": [14, 18, 33, 38, 46, 54, 128, 134, 136, 254, 261, 266, 273, 289, 300, 302, 309, 316, 329, 340], "format": [14, 15, 18, 19, 20, 33, 34, 163, 170, 174, 181, 182, 184, 190, 202, 205, 208, 211, 217, 241, 329, 330, 331, 336], "index": [14, 15, 18, 19, 23, 30, 31, 33, 34, 38, 46, 48, 49, 54, 118, 119, 211, 212, 213, 255, 261, 273, 329, 340], "union": [14, 15, 17, 18, 19, 22, 23, 30, 31, 32, 33, 34, 35, 36, 39, 40, 44, 48, 49, 51, 75, 81, 88, 103, 106, 118, 119, 134, 137, 140, 157, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 183, 187, 190, 191, 193, 196, 200, 202, 203, 205, 207, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 293, 300, 302, 309, 316], "int": [14, 15, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 43, 44, 46, 48, 49, 51, 54, 62, 66, 77, 81, 83, 84, 85, 88, 110, 113, 119, 134, 136, 137, 140, 142, 143, 145, 157, 159, 163, 164, 165, 167, 168, 171, 173, 175, 177, 178, 179, 182, 183, 186, 187, 193, 196, 197, 199, 200, 203, 206, 207, 210, 211, 212, 213, 214, 215, 218, 247, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 276, 277, 283, 284, 285, 287, 289, 294, 296, 300, 302, 313, 316, 330, 331, 334, 335, 336, 338, 339, 340], "seque": [14, 15, 18, 19, 33, 34], "interpretedi": [14, 15, 18, 19, 33, 34], "otherwis": [14, 15, 18, 19, 33, 34, 35, 51, 67, 89, 107, 116, 138, 145, 146, 220, 231, 235, 236, 242, 244, 315, 318, 325, 336], "elements": [14, 15, 18, 19, 33, 34, 323, 324, 326, 327], "convertedi": [14, 15, 18, 19, 33, 34, 89, 91, 107, 138, 221, 222, 224, 225, 226, 228, 229, 231, 232, 233, 241, 242, 243, 330], "strings": [14, 15, 18, 19, 33, 34, 43], "substitutedi": [14, 15, 18, 19, 33, 34, 51, 134, 136, 329], "dict": [14, 18, 33, 36, 38, 39, 40, 44, 46, 51, 54, 69, 70, 81, 85, 128, 134, 136, 171, 182, 191, 247, 251, 252, 254, 258, 259, 261, 262, 263, 266, 270, 271, 273, 274, 276, 277, 289, 295, 300, 302, 309, 311, 316, 322, 329, 340], "mappingi": [14, 18, 33, 62, 224, 331], "names": [14, 18, 33, 126, 254, 261, 266, 267, 273, 329], "instances": [14, 15, 18, 19, 33, 34, 335], "take": [14, 15, 18, 19, 33, 34, 331, 334, 335, 340], "less": [14, 15, 18, 19, 33, 34, 36, 44, 77], "than": [14, 15, 18, 19, 21, 33, 34, 36, 44, 66, 77, 110, 145, 283, 289, 325, 335, 340], "one": [14, 15, 18, 19, 33, 34, 66, 75, 88, 106, 110, 137, 145, 157, 221, 224, 241, 331, 334, 335, 340], "instantiation": [14, 15, 18, 19, 33, 34], "attemptedi": [14, 15, 18, 19, 33, 34, 331], "more": [14, 15, 18, 19, 21, 33, 34, 66, 110, 145, 325, 329, 330, 331, 335], "substitution": [14, 15, 18, 19, 33, 34, 50, 51, 139, 329], "nestedi": [14, 15, 18, 19, 33, 34], "var_list": [15, 19, 34], "list": [15, 19, 22, 23, 30, 34, 35, 36, 37, 39, 40, 44, 45, 53, 56, 65, 75, 79, 80, 81, 86, 88, 102, 103, 105, 106, 118, 124, 126, 127, 134, 135, 137, 140, 154, 155, 156, 157, 159, 161, 163, 164, 167, 168, 170, 174, 175, 177, 178, 181, 183, 186, 187, 196, 199, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 243, 247, 251, 252, 254, 258, 259, 262, 263, 266, 270, 271, 274, 276, 277, 301, 306, 317, 331, 333, 334, 335, 340], "clears": 16, "deletes": 16, "all": [16, 29, 62, 72, 75, 94, 98, 211, 212, 213, 220, 281, 289, 330, 331, 333, 334, 335, 336, 338, 340], "objectiv": [16, 39, 40, 81, 103, 106, 118, 120, 140, 141, 145, 149, 227, 231, 232, 240, 274, 275, 276, 277, 278, 279, 280, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "function": [16, 56, 66, 75, 81, 88, 103, 106, 118, 120, 134, 140, 141, 145, 149, 231, 232, 274, 275, 276, 277, 278, 279, 280, 302, 316, 319, 320, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "lowerboundu": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 329, 330, 339], "upperboundu": [17, 18, 19, 32, 33, 34, 66, 110, 145, 224, 283, 284, 329, 330, 339], "float": [17, 18, 19, 21, 22, 32, 33, 34, 35, 36, 39, 40, 44, 51, 56, 62, 63, 66, 75, 79, 81, 82, 87, 88, 103, 106, 110, 111, 118, 119, 120, 128, 134, 137, 140, 145, 149, 150, 153, 154, 155, 156, 157, 210, 222, 226, 227, 229, 230, 231, 233, 234, 240, 243, 245, 246, 247, 249, 251, 252, 254, 255, 258, 259, 261, 262, 263, 266, 267, 270, 271, 273, 274, 275, 276, 277, 283, 284, 285, 287, 289, 290, 300, 302, 316, 323, 325, 328, 331, 340], "lower": [18, 19, 33, 34, 51, 66, 110, 145, 256, 268, 285, 329, 330, 336], "boundu": [18, 19, 33, 34, 66, 110, 145, 256, 268, 285, 329, 330], "upper": [18, 19, 33, 34, 51, 66, 110, 145, 256, 266, 268, 329, 330], "returns": [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 38, 41, 42, 43, 45, 46, 53, 54, 57, 59, 60, 67, 70, 71, 72, 73, 76, 77, 78, 80, 86, 89, 93, 94, 95, 104, 105, 107, 108, 111, 113, 115, 116, 119, 120, 122, 124, 125, 126, 127, 128, 129, 135, 136, 138, 141, 142, 143, 144, 146, 157, 195, 197, 223, 230, 234, 242, 244, 245, 248, 249, 250, 253, 255, 256, 257, 260, 261, 264, 265, 267, 268, 269, 272, 273, 275, 278, 279, 280, 282, 284, 285, 286, 287, 288, 292, 293, 296, 304, 305, 307, 308, 314, 326, 327, 336, 340], "representingi": [20, 43, 106, 122, 163, 170, 174, 181, 202, 205, 211, 217], "qubit_op": [21, 52, 325, 328], "offset": [21, 39, 40, 52, 274, 325, 328, 331, 334, 335, 336, 337], "linear": [21, 23, 27, 36, 37, 38, 39, 40, 44, 48, 106, 118, 137, 145, 231, 241, 251, 254, 256, 257, 258, 259, 260, 261, 262, 274, 323, 324, 325, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340], "fal": [21, 35, 62, 69, 92, 116, 145, 244, 261, 272, 273, 289, 300, 302, 315, 316, 318, 325, 333, 340], "crea": [21, 157, 206, 212, 325, 331, 332, 334, 336, 338], "qubit": [21, 52, 301, 306, 317, 325, 328, 332, 334, 335, 337, 338, 340], "operator": [21, 52, 289, 295, 301, 306, 311, 315, 317, 318, 325, 328, 331, 333, 335, 338, 340], "shift": [21, 325, 331], "value": [21, 22, 35, 43, 52, 56, 62, 63, 75, 77, 79, 81, 82, 88, 97, 103, 110, 111, 118, 119, 120, 128, 130, 134, 136, 137, 140, 141, 149, 157, 206, 210, 212, 231, 258, 259, 270, 271, 276, 277, 289, 300, 315, 318, 323, 325, 328, 331, 332, 333, 334, 336, 337, 338, 339, 340], "mappedi": [21, 52, 325, 328, 330], "qubits": [21, 52, 81, 83, 84, 88, 325, 328, 335, 337], "same": [21, 22, 51, 52, 319, 320, 325, 328, 330, 331, 335, 337, 338, 339], "order": [21, 52, 118, 207, 325, 328, 329, 331, 334, 340], "th": [21, 52, 255, 325, 328], "see": [21, 52, 69, 140, 289, 325, 328, 330, 335, 339, 340], "issues": [21, 52, 59, 78, 115, 325, 328], "1148": [21, 52, 325, 328], "details": [21, 52, 69, 325, 328, 331, 339, 340], "operatorbas": [21, 289, 293, 300, 301, 306, 317, 325, 328], "isingi": [21, 52, 106, 325, 328, 330, 331, 336], "hamiltonian": [21, 52, 106, 193, 289, 300, 325, 328, 331, 337, 338, 340], "bool": [21, 35, 62, 69, 71, 77, 92, 93, 116, 145, 157, 244, 261, 272, 273, 289, 297, 298, 299, 300, 302, 308, 314, 315, 316, 318, 325, 339], "true": [21, 35, 62, 73, 77, 95, 116, 157, 244, 289, 297, 298, 315, 318, 325, 329, 331, 333, 334, 335, 338, 339, 340], "x": [21, 22, 35, 36, 44, 51, 56, 75, 77, 79, 81, 103, 118, 121, 134, 140, 145, 148, 160, 182, 193, 222, 224, 226, 229, 231, 232, 233, 239, 243, 247, 252, 258, 259, 263, 270, 271, 274, 276, 277, 325, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340], "2": [21, 51, 62, 66, 98, 118, 132, 145, 211, 212, 231, 232, 266, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "treatedi": [21, 325], "term": [21, 77, 231, 232, 262, 325, 329, 331, 334, 335, 336, 338, 340], "si": [21, 36, 44, 72, 94, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265, 325, 330, 334, 340], "1": [21, 58, 62, 66, 69, 77, 99, 110, 118, 131, 134, 136, 137, 145, 153, 157, 159, 163, 164, 167, 168, 174, 177, 178, 181, 186, 193, 199, 200, 202, 203, 205, 211, 217, 218, 224, 231, 232, 266, 289, 300, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "el": [21, 69, 92, 329, 333, 334, 335, 336], "pauli": [21, 325, 331, 334, 335, 340], "xs": [21, 325], "any": [21, 69, 70, 112, 118, 123, 231, 246, 251, 254, 256, 262, 266, 268, 274, 283, 289, 295, 300, 302, 309, 311, 316, 322, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "zs": [21, 325], "notimplementederror": [21, 325], "input": [21, 22, 81, 83, 206, 212, 325, 330, 331, 340], "listop": [21, 325], "whether": [22, 35, 59, 67, 69, 71, 72, 78, 89, 92, 93, 94, 97, 107, 115, 116, 137, 138, 146, 242, 244, 261, 272, 273, 289, 299, 300, 302, 308, 314, 315, 316, 318, 340], "solution": [22, 35, 62, 75, 76, 81, 86, 105, 106, 118, 124, 132, 133, 140, 148, 155, 160, 182, 210, 331, 334, 337, 338, 339], "feasip": [22, 35, 62, 66, 133, 334, 335], "alongu": 22, "violations": [22, 66], "type": [22, 29, 52, 88, 106, 118, 137, 208, 210, 220, 221, 225, 232, 283, 284, 288, 329, 330, 340], "ndarray": [22, 35, 36, 39, 40, 44, 56, 75, 76, 79, 81, 103, 112, 118, 121, 129, 134, 140, 141, 152, 155, 160, 161, 163, 164, 168, 170, 171, 174, 175, 178, 181, 182, 183, 184, 187, 190, 191, 196, 200, 202, 203, 205, 207, 210, 211, 214, 217, 218, 222, 226, 229, 233, 239, 243, 247, 251, 252, 254, 258, 259, 260, 262, 263, 266, 270, 271, 272, 274, 276, 277, 289, 300, 302, 307, 316, 340], "para": [22, 210], "violatedi": 22, "constraint": [22, 23, 30, 36, 38, 44, 46, 48, 49, 62, 66, 225, 228, 231, 232, 251, 252, 253, 262, 263, 264, 265, 330, 338, 339], "len": [22, 334, 335, 336, 338, 340], "total": [22, 24, 25, 26, 29, 187, 210, 301, 306, 317, 334, 338, 339], "vars": [22, 339], "linearconstraint": [23, 36, 37], "correspondingi": [23, 30, 31, 106, 120, 128, 137, 164, 168, 178, 200, 203, 218, 253, 255, 260, 261, 264, 265, 267, 272, 273, 284, 323, 324, 325, 326, 327, 330, 331, 334, 340], "indexerror": [23, 30, 48, 49, 119], "keyerror": [23, 30, 48, 49, 119], "does": [23, 30, 47, 48, 49, 55, 62, 106, 228, 276, 277], "exist": [23, 30, 47, 48, 49, 52, 328, 330, 334], "vartype": [29, 283, 284, 338], "specifiedi": [29, 58, 66, 88, 106, 110, 112, 137, 145, 157, 163, 166, 170, 174, 181, 202, 205, 211, 217, 221, 289, 300, 334], "filteredi": 29, "countedi": 29, "quadraticconstraint": [30, 44, 45], "se": [36, 44, 221, 235, 236, 246, 251, 262, 274, 329, 330, 335, 338, 340], "rhs": [36, 44, 246, 251, 262, 329, 330, 335], "form": [36, 44, 88, 106, 137, 157, 238, 239, 241, 272, 273, 274, 330, 331, 334, 335, 337, 340], "spmatrix": [36, 39, 40, 44, 251, 254, 262, 266, 274], "coefficients": [36, 39, 40, 44, 251, 254, 260, 261, 262, 266, 272, 273, 274, 329, 330], "left": [36, 247, 252, 253, 263, 264, 265, 330, 334], "hand": [36, 44, 246, 247, 249, 251, 252, 253, 262, 263, 264, 265], "constraintse": [36, 44, 246, 250, 251, 262, 329], "eq": [36, 44, 224, 329, 330], "deno": [36, 44], "equal": [36, 44, 118, 119, 159], "ge": [36, 44, 329, 330], "greater": [36, 44, 283, 335], "l": [36, 44, 333, 335], "le": [36, 44, 329, 330], "right": [36, 44, 246, 249, 251, 262, 330, 336], "c0": [36, 329, 334, 337, 338, 339], "exists": [36, 44, 228, 232, 328], "validi": [36, 51, 289, 300], "property": [37, 38, 41, 42, 45, 46, 50, 53, 54, 57, 60, 70, 71, 76, 82, 83, 84, 85, 86, 87, 90, 93, 104, 105, 108, 111, 113, 120, 123, 124, 125, 126, 127, 128, 129, 135, 136, 141, 142, 143, 144, 165, 172, 179, 195, 197, 213, 215, 223, 230, 234, 245, 248, 249, 250, 253, 256, 257, 264, 265, 268, 269, 275, 278, 279, 280, 282, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 321, 322], "maps": [38, 46, 54], "its": [38, 46, 54, 62, 140, 207, 254, 266, 289, 300, 302, 316, 331, 334, 340], "sets": [39, 40, 183], "maximizedi": 39, "part": [39, 40, 262, 274, 275, 278, 279, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tuple": [39, 40, 44, 51, 112, 134, 135, 136, 262, 266, 267, 273, 274, 284, 328, 331, 334, 340], "createdi": [39, 40, 88, 106, 137, 154, 156, 157, 162, 166, 169, 176, 180, 185, 188, 198, 201, 204, 206, 209, 212, 216, 219], "minimizedi": [40, 334, 340], "quadraticobjectiv": 42, "wrap": 43, "80": 43, "pretty": [43, 122], "printedi": [43, 122], "text": [43, 231, 232, 329, 330, 340], "width": 43, "output": [43, 66, 69, 81, 84, 92, 145, 272, 273, 330, 338], "disabledi": 43, "settingi": [43, 71, 93, 338, 339], "note": [43, 231, 323, 324, 329, 330, 335, 338, 339], "might": [43, 331], "exceedi": 43, "example": [43, 266, 330, 331, 334, 335, 338, 340], "long": 43, "won": 43, "t": [43, 62, 158, 329, 331, 333, 334, 335, 336, 337, 339, 340], "wrappedi": [43, 66, 69, 92, 145], "non": [43, 72, 94, 326, 327, 339, 340], "printap": 43, "q0": [44, 329], "filena": [47, 55, 184, 208], "loads": 47, "fil": [47, 55, 184, 208, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "loadedi": [47, 323, 324], "filenotfounderror": 47, "requires": [47, 340], "present": [47, 335], "pythonpath": 47, "remov": [48, 49, 329], "quadraticprogramstatus": [50, 329], "infeasip": [50, 51, 139, 329, 331], "due": [50, 74, 91, 96, 139, 329, 335], "constants": [51, 329], "substitutes": 51, "repla\u00e7": [51, 331], "means": 51, "weightedi": [51, 106], "copy": [51, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "everythingi": 51, "refere": [51, 66, 145, 330, 333, 336], "make": [51, 329, 335], "sure": [51, 335], "indices": [51, 161, 164, 175, 178, 183, 203, 207, 218, 254, 261, 266, 267, 273], "matchedi": 51, "correctly": 51, "bounds": [51, 329, 335, 339], "updatedi": [51, 63], "accordingly": 51, "y": [51, 62, 145, 160, 231, 232, 329, 330, 331, 332, 334, 335, 336, 339, 340], "substitutingi": [51, 134, 136], "status": [51, 56, 75, 81, 103, 118, 130, 134, 140, 145, 148, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340], "gets": [51, 329, 334], "invalidi": [51, 88, 106, 137], "follows": [51, 118, 289, 300, 302, 316, 324, 335, 339, 340], "multip": [51, 331], "times": [51, 329, 333, 338], "coefficient": [51, 224, 255, 267, 325], "zero": [51, 66, 110, 145], "writes": 55, "model": [55, 163, 166, 193, 194, 198, 323, 324, 326, 327, 330, 332, 333, 334, 336, 338, 339, 340], "writ": [55, 335], "directory": [55, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "my_proble": 55, "appendedi": 55, "end": [55, 97, 231, 232, 329, 332, 338, 339], "suffix": 55, "oserror": 55, "docplexexception": 55, "fval": [56, 75, 81, 82, 103, 118, 134, 140, 148, 331, 333, 336, 338, 339], "state": [56, 63, 106, 137, 153, 154, 157, 191, 289, 292, 300, 301, 306, 315, 317, 318, 330, 331, 333, 335, 338, 340], "admmoptimization": 56, "optimal": [56, 62, 75, 103, 106, 134, 331, 333, 335, 336, 337, 338, 339], "foundu": [56, 59, 62, 75, 78, 103, 115, 118, 120, 129, 134, 334, 335, 339, 340], "admm": [56, 58, 61, 62, 63], "admmstate": [56, 57], "internal": [56, 63, 336], "computation": [56, 63], "optimizationresultstatus": [56, 75, 81, 103, 118, 125, 134, 140, 151, 331, 339], "termination": [56, 75, 81, 103, 118, 125, 130, 134, 140, 333], "qubo_optimizer": [58, 333], "continuous_optimizer": [58, 333], "params": [58, 333, 336], "optimizationalgorith": [58, 66, 69, 77, 88, 92, 106, 110, 137, 145, 157], "implementation": [58, 62, 63, 153, 157], "heuristi\u00e7": [58, 289, 335, 340], "introducedi": [58, 137, 289, 300, 330, 331, 336], "references": [58, 334], "gambel": [58, 333], "c": [58, 329, 332, 333, 334, 335, 338, 339, 340], "simonetto": [58, 333], "2020": [58, 333, 336, 340], "multi": [58, 66, 110, 112, 145, 333], "block": [58, 62, 333], "heuristics": [58, 333], "mixedi": [58, 333], "computers": [58, 333], "arxiv": [58, 137, 157, 193, 224, 231, 289, 300, 330, 331, 332, 333, 334, 335, 338], "preprint": [58, 331, 333], "2001": [58, 333], "02069": [58, 333], "insta": [58, 88, 90, 91, 104, 106, 110, 134, 135, 137, 157, 162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 206, 208, 209, 212, 216, 219, 281, 301, 306, 317, 330, 331, 335, 336, 337, 338, 340], "effectively": 58, "then": [58, 62, 66, 106, 110, 145, 153, 157, 289, 298, 315, 318, 330, 331, 332, 333, 334, 335, 338, 340], "minimumeigenoptimizer": [58, 134, 135, 137, 157, 332, 333, 334, 335, 336, 337, 338, 339, 340], "initializedi": [58, 62], "numpyminimumeigensolver": [58, 137, 331, 332, 333, 334, 335, 336, 337, 338], "slsqpoptimizer": 58, "admmparameters": [58, 60, 333], "checks": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244], "implementingi": [59, 78, 115, 116, 244], "check": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244, 335], "compatibility": [59, 67, 72, 78, 89, 94, 107, 115, 116, 138, 146, 242, 244], "incompatibility": [59, 67, 74, 78, 89, 91, 96, 107, 115, 138, 146, 242], "wer": [59, 78, 115, 329, 330], "current": [60, 289, 300, 302, 316], "tries": [61, 68, 74, 91, 96, 109, 117, 139, 147, 158], "solves": [61, 68, 74, 91, 96, 109, 117, 147, 158, 335], "admmoptimizationresult": 61, "appliedi": [61, 66, 68, 74, 91, 96, 109, 112, 117, 137, 139, 145, 147, 158, 340], "rho_initial": [62, 63, 333], "10000": 62, "factor_\u00e7": [62, 333], "100000": 62, "beta": [62, 333, 338, 340], "1000": [62, 66, 333, 334, 337, 339], "maxiter": [62, 289, 300, 302, 316, 333, 334, 336, 339, 340], "10": [62, 224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tol": [62, 333], "0001": [62, 66], "max_t": 62, "inf": 62, "three_block": [62, 333], "vary_rho": 62, "tau_incr": 62, "tau_decr": 62, "mu_res": 62, "mu_merit": 62, "warm_start": 62, "defines": [62, 97, 140, 332, 335], "parameters": [62, 66, 69, 70, 137, 145, 289, 300, 302, 316, 335, 339, 340], "their": [62, 77, 157, 301, 306, 311, 317, 330, 331], "values": [62, 63, 66, 75, 77, 79, 81, 103, 110, 118, 128, 129, 145, 152, 155, 177, 247, 252, 254, 258, 259, 263, 266, 270, 271, 276, 277, 289, 300, 301, 302, 306, 316, 317, 319, 320, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "initial": [62, 63, 66, 110, 145, 153, 154, 155, 156, 157, 289, 292, 300, 302, 307, 316, 332, 338, 340], "rho": [62, 63, 333], "parameter": [62, 63, 66, 110, 145, 153, 157, 289, 300, 302, 316, 319, 320, 334, 335, 338, 339, 340], "penalizingi": 62, "factor": [62, 88, 106, 137, 157, 227, 230, 231, 232, 234, 240, 245, 336], "when": [62, 66, 88, 106, 118, 137, 145, 153, 157, 163, 165, 166, 171, 289, 329, 338, 339, 340], "penalization": 62, "decision": [62, 297, 334, 340], "maxim": [62, 66, 145, 159, 177, 181, 206, 212], "iterations": [62, 88, 140, 143, 145, 333, 336], "tolera": [62, 66], "residual": 62, "converge": 62, "runningi": 62, "seconds": 62, "boolean": [62, 289, 340], "flag": [62, 289, 340], "select": 62, "rule": 62, "update": [62, 339, 340], "increases": 62, "at": [62, 97, 134, 135, 137, 193, 266, 301, 306, 317, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "each": [62, 63, 81, 85, 97, 101, 137, 145, 161, 214, 289, 300, 302, 316, 331, 333, 334, 336, 340], "iteration": [62, 81, 85, 97, 99, 137, 340], "modifiedi": [62, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "accordingi": [62, 80, 153, 157, 331], "primal": 62, "dual": 62, "residuals": [62, 333], "update_rho_by_residuals": 62, "boyd": [62, 333], "parikh": [62, 333], "n": [62, 193, 206, 212, 231, 232, 329, 332, 333, 334, 335, 336, 337, 338, 340], "chu": [62, 333], "peleato": [62, 333], "b": [62, 329, 330, 333, 334, 335, 339], "eckstein": [62, 333], "j": [62, 77, 157, 193, 231, 232, 267, 333, 334, 335, 336, 338, 340], "2011": [62, 333], "distributedi": [62, 333], "statistical": [62, 333], "learningi": [62, 333, 340], "alternatingi": [62, 333], "direction": [62, 333], "multipliers": [62, 333], "foundations": [62, 333], "trends": [62, 333], "mach": [62, 333], "122": [62, 333], "compute": [62, 79, 191, 210, 315, 318, 335], "merit": 62, "start": [62, 66, 110, 112, 145, 153, 154, 155, 157, 158, 329, 331], "pre": [62, 157, 158], "solvingi": [62, 63, 334], "relaxedi": [62, 155, 157, 338], "first": [62, 66, 110, 134, 135, 145, 329, 330, 331, 333, 335, 338, 339, 340], "option": [62, 340], "guarantee": 62, "eve": [62, 330, 333, 335], "shouldu": [62, 97, 110, 118, 153, 157, 326, 327, 331, 334, 340], "tuningi": 62, "options": [62, 220, 340], "help": 62, "consideredi": [62, 331], "hint": 62, "wher": [62, 160, 193, 211, 212, 213, 231, 232, 255, 267, 329, 330, 334, 335, 340], "iterativ": [62, 137], "process": 62, "op": [63, 331, 337, 340], "keeps": 63, "track": 63, "various": 63, "storedi": [63, 97, 98, 99, 100, 137], "duringi": [63, 106, 289, 300, 302, 316], "recreatedi": 63, "third": [63, 335], "abc": [64, 110, 114, 189, 237], "base": [64, 118, 157], "abstract": [64, 65, 110, 114, 115, 117, 170, 189, 190, 192, 237, 238, 239, 246, 247], "aggregates": [64, 65, 101, 157], "results": [64, 65, 75, 97, 98, 99, 100, 101, 102, 118, 123, 134, 135, 137, 157, 193, 331, 332, 334, 336, 338], "minimumeigenoptimizationresult": [65, 102, 109, 134, 135, 158], "combinedi": [65, 102], "solutionsample": [65, 75, 81, 86, 102, 103, 105, 118, 124, 331, 339], "aggregatedi": [65, 102], "samples": [65, 75, 81, 86, 102, 103, 105, 118, 121, 289, 335, 338, 339, 340], "rhobegi": 66, "rhoendi": 66, "maxf": 66, "disp": [66, 69, 92, 339], "catol": 66, "0002": 66, "trials": [66, 110, 145], "clip": [66, 110, 145], "100": [66, 110, 145, 206, 212, 289, 300, 302, 316, 333, 335, 336, 339, 340], "multistartoptimizer": [66, 145], "scipy": [66, 140, 145], "cobyla": [66, 333, 336, 339], "provides": [66, 69, 92, 106, 145, 330, 331, 334, 340], "opt": [66, 140, 145, 334, 335], "fmin_cobyla": 66, "docs": [66, 69, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "org": [66, 69, 145, 159, 163, 167, 174, 177, 181, 186, 193, 199, 202, 205, 211, 217, 224, 289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "doc": [66, 145, 329], "14": [66, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "generatedi": [66, 80, 145, 329, 331, 339, 340], "html": [66, 145, 329], "arguments": [66, 145, 340], "passedi": [66, 145, 157, 227, 231, 240, 289, 300, 302, 316, 338], "constructor": [66, 145, 283], "\u00f6rnek": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 332, 333, 334, 335, 337, 338], "qiskit_optimization": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 300, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "import": [66, 69, 92, 106, 118, 137, 145, 220, 224, 240, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "specify": [66, 69, 92, 106, 137, 145, 329], "initializes": [66, 69, 92, 137, 145, 157, 246], "initializer": [66, 106, 137, 145, 335], "takes": [66, 106, 137, 145, 331, 334, 335], "stores": [66, 145, 254, 266], "later": [66, 145, 333], "invokedi": [66, 145], "local": [66, 112, 145, 335, 340], "consistingi": [66, 106, 145, 262, 284, 340], "only": [66, 67, 77, 99, 106, 145, 146, 157, 221, 227, 235, 236, 289, 300, 302, 316, 324, 330, 331, 334, 335, 339, 340], "reasonap": 66, "changes": [66, 153, 157], "final": [66, 141, 145, 335, 336, 340], "accuracy": [66, 145], "precisely": [66, 329], "guaranteedi": 66, "trust": 66, "region": 66, "controls": [66, 334, 335], "frequency": 66, "implies": 66, "evaluations": 66, "absolute": 66, "trial": [66, 110, 145, 334, 335], "guess": [66, 110, 145], "guesses": [66, 110, 145], "uniformly": [66, 110, 145, 193], "drawn": [66, 110, 145, 334], "potential": [66, 110, 145, 334], "clippingi": [66, 110, 145], "unboundedi": [66, 110, 145, 256, 268], "replacedi": [66, 110, 145, 330, 331], "correspondingly": [66, 110, 145], "contains": [67, 75, 146, 225, 256, 268, 319, 320, 323, 324, 326, 330, 331, 340], "explainingi": [67, 89, 107, 138, 146, 242], "describingi": [67, 89, 107, 138, 140, 144, 146, 242, 309], "runs": [68, 74, 91, 96, 109, 117, 139, 147, 289, 340], "try": [68, 74, 91, 96, 109, 117, 139, 147, 158, 329, 331, 334, 335], "incompatip": [68, 74, 91, 96, 117, 139, 147, 241], "cplex_parameters": [69, 339], "project": [69, 339, 340], "is_cplex_installedi": 69, "print": [69, 71, 92, 93, 118, 145, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "www": [69, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "icos": 69, "topi\u00e7": 69, "display": [71, 93, 329, 339], "information": [71, 93, 118, 123, 145, 206, 212, 238, 239, 314, 319, 320, 331, 340], "accepts": [72, 94], "modeledi": [72, 94], "throw": 72, "determinedi": [72, 231], "stati\u00e7": [73, 79, 95, 173, 182, 184, 191, 206, 208, 210, 212, 242], "dependingi": [74, 96, 335], "settings": [74, 96, 289, 300, 302, 316], "sdp_solution": 75, "properties": [75, 81, 140], "contain": [75, 221, 225, 228, 289, 300, 302, 316], "explor": 75, "solutions": [75, 157, 335, 339], "sdp": [75, 76], "num_cuts": 77, "sort_cuts": 77, "unique_cuts": 77, "seedi": [77, 173, 193, 206, 212, 334, 335, 336, 337], "max": [77, 80, 145, 181, 183, 185, 329, 330, 335, 336, 337, 338, 339], "cut": [77, 79, 80, 181, 183, 185, 330, 335, 337, 339, 340], "sum_": [77, 193, 231, 232, 334, 335], "w": [77, 329, 333, 334, 335, 336], "therefor": [77, 338, 340], "encodes": [77, 80, 335], "negativ": [77, 340], "adjacency": [77, 79, 184, 210, 340], "matrix": [77, 79, 121, 184, 210, 254, 266, 329, 334, 336, 338, 340], "cuts": [77, 80], "genera": [77, 194, 329, 334, 335, 339], "sort": [77, 336], "unique": 77, "thus": [77, 330, 331], "rando": [77, 173, 193, 206, 212, 289, 300, 302, 316, 334, 335, 336, 340], "generator": [77, 193], "adj_matrix": [79, 210, 334], "numpy": [79, 182, 184, 191, 193, 331, 333, 334, 335, 336, 337, 338, 340], "array": [79, 163, 170, 174, 181, 182, 184, 190, 202, 205, 211, 217, 231, 232, 254, 260, 266, 272, 329, 331, 335, 336, 338, 339, 340], "operation_counts": 81, "n_input_qubits": 81, "n_output_qubits": 81, "intermediate_fval": 81, "thresholdu": [81, 137, 331], "raw_samples": [81, 103], "constructs": [81, 110, 134, 140, 262, 274, 335], "specifi\u00e7": [81, 140, 335], "definedi": [81, 140, 254, 266, 329, 330, 338], "counts": [81, 85, 191, 336], "operation": [81, 85, 145], "performedi": [81, 85], "per": [81, 85, 289, 300, 302, 316, 319, 320, 340], "represent": [81, 83, 84, 160, 332, 340], "intermedia": [81, 82, 97, 98, 100, 134, 135, 137, 289, 300, 302, 314, 316, 331, 336, 337], "minimization": [81, 235, 236, 241, 330, 334], "expectedi": [81, 281, 334, 336], "consistent": [81, 338], "probability": [81, 101, 103, 148, 331, 336, 338, 339, 340], "samplingi": [81, 103, 335, 338], "getter": [82, 83, 84, 87, 165, 172, 179, 195, 197, 213, 215], "get": [85, 118, 121, 160, 182, 301, 306, 317, 331, 334, 335, 339], "raw": [86, 105], "num_value_qubits": 88, "num_iterations": [88, 332], "quantum_insta": [88, 331, 332, 333, 334, 335, 336, 337, 338, 339], "converters": [88, 106, 118, 137, 157, 220, 224, 237, 240, 330, 334, 336, 337, 338], "penalty": [88, 106, 137, 157, 227, 231, 232, 240, 331, 333, 334, 335, 336, 338], "gas": [88, 332], "minim": [88, 103, 106, 108, 137, 206, 212, 289, 300, 301, 302, 306, 315, 316, 317, 318, 330, 333, 334, 335, 337], "improvement": 88, "quantuminsta": [88, 90, 331, 334, 335, 337, 338, 339], "backendi": [88, 289, 300, 301, 302, 306, 316, 317, 332, 334, 336, 337, 339, 340], "selectedi": [88, 221, 335], "defaults": [88, 289, 340], "aer": [88, 334, 336, 337, 339], "statevector": [88, 336], "simulator": [88, 336], "quadraticprogramconverter": [88, 106, 137, 157, 220, 224, 227, 231, 240], "convertingi": [88, 106, 137, 157, 330], "internally": [88, 106, 137, 157, 254, 266, 338], "quadraticprogramtoqubo": [88, 106, 137, 157, 330, 334, 337, 338], "converter": [88, 223, 338], "typeerror": [88, 106, 119, 137, 281], "circuits": [90, 153, 157, 289, 300, 302, 316], "raises": 91, "attributeerror": 91, "been": [91, 300, 301, 306, 316, 317, 319, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "is_gurobi_installedi": 92, "suppress": 92, "info": 92, "stdout": 92, "sys": [92, 335], "devnull": 92, "def": [92, 220, 240, 331, 333, 334, 335, 336, 338, 339, 340], "noop": 92, "args": 92, "kwargs": 92, "pass": [92, 298, 340], "close": [92, 334, 335], "wri": [92, 335], "flush": 92, "writelines": 92, "recursiveminimumeigenoptimizer": 97, "last": [99, 134, 135, 331, 335], "baseaggregator": [101, 157], "averagingi": [101, 102], "sample": [101, 148, 150, 151, 339], "min_eigen_solver_result": [103, 336, 337], "eige": [103, 106, 134, 137, 330, 331, 333, 334], "minimumeigensolver": [103, 104, 105, 106, 108, 302, 331, 333, 336], "minimumeigensolverresult": [103, 104, 301, 306, 317], "obtainedi": [103, 104, 118, 132, 134, 135, 155, 335, 339, 340], "underlyingi": [103, 330, 338], "min_eigen_solver": [106, 335, 337], "solvers": [106, 157, 333], "assumes": 106, "thereof": 106, "converts": [106, 232, 339], "expandingi": 106, "addingi": [106, 335], "terms": [106, 137, 227, 231, 232, 330, 334, 335, 340], "resultingi": [106, 331, 335, 336, 338], "translatedi": [106, 326, 327, 328], "whose": [106, 119, 164, 168, 178, 187, 200, 203, 207, 218, 340], "minimal": 106, "vector": [106, 191, 289, 300, 302, 316, 329, 335], "eigensta": [106, 301, 306, 315, 317, 318, 334, 336, 340], "correspondu": [106, 183, 207, 340], "solver": [106, 137, 157, 158, 331, 333, 338, 339], "groundu": [106, 301, 306, 317, 330, 331, 338], "goodu": 106, "outl": [106, 137], "how": [106, 137, 329, 330, 331, 338, 340], "scale": [106, 137, 227, 231, 240, 298], "computedi": 106, "todo": 106, "applyingi": [106, 157, 338, 339], "logi\u00e7": [106, 157], "eigensolver": [106, 108, 315, 318, 332, 333, 334, 336, 337], "implements": 110, "classedi": 110, "valueerror": [110, 301, 306, 317], "smaller": [110, 289, 340], "min": [112, 118, 274, 329, 331, 332, 333, 334, 335, 337, 338, 340], "applies": [112, 137, 331, 338, 340], "callable": [112, 289, 300, 302, 305, 316], "minimizes": [112, 340], "raw_results": 118, "specifyingi": [118, 251, 262, 289, 300, 302, 316], "_": [118, 335, 336, 338], "binary_var": [118, 329, 330, 331, 332, 333, 335, 338, 339, 340], "x1": [118, 331, 332, 338], "x2": [118, 331, 332, 338], "x3": [118, 338], "var": [118, 224, 329, 331, 332, 335, 338], "variable_names": 118, "variables_dict": 118, "maintain": 118, "generatingi": [118, 334, 335], "possibly": 118, "failur": [118, 129, 222, 226, 229, 233, 331], "sizes": 118, "do": [118, 231, 334, 335, 336, 338], "match": [118, 231, 276, 277], "key": [119, 134, 136, 267, 289, 300, 302, 316, 336, 338], "neither": 119, "nor": 119, "zi": 121, "zj": 121, "correlation": 121, "dump": 123, "leftovers": 123, "additional": [123, 140, 223, 289, 300, 302, 316, 330, 334], "endedi": 131, "succeededi": 133, "replacements": 134, "history": [134, 137, 319, 320, 322, 336], "recursiv": [134, 137, 139, 331], "weight": [134, 136, 159, 177, 179, 208, 334, 335, 340], "either": [134, 136, 157, 261, 273, 329], "containingi": [134, 319, 320], "element": [134, 135], "minimumeigenoptimizerresult": [134, 135], "invokingi": [134, 135], "iteratively": [134, 135], "secondu": [134, 135, 330, 335], "step": [134, 135, 319, 320], "min_num_vars_optimizer": [134, 135, 137, 331], "min_num_vars": [137, 331], "intermediateresult": 137, "last_iteration": 137, "meta": [137, 157], "top": [137, 283, 289, 329, 340], "calledi": [137, 331], "internal_optimizer": 137, "bravyi": [137, 331], "et": [137, 157, 231, 336], "al": [137, 157, 231, 336], "2019": [137, 231, 331, 332], "obstacles": [137, 331], "preparation": [137, 331, 335], "symmetry": [137, 331], "protection": [137, 331], "1910": [137, 331], "08980": [137, 331], "until": [137, 333, 334, 335], "apply": [137, 330, 331, 339, 340], "sche": [137, 331], "once": [137, 331, 334, 338, 340], "reachedi": 137, "every": [137, 227, 231, 240, 308, 334, 335], "after": [137, 330, 339], "remainingi": 137, "num_min_vars": 137, "fx": 140, "imo": 140, "smode": 140, "slsqp": [140, 145], "optimizedi": [140, 141, 340], "exit": [140, 142, 144], "mode": [140, 142, 144, 220, 221], "documentation": [140, 329], "fmin_slsqp": [140, 145], "actually": 141, "iter": 145, "acc": 145, "06": [145, 340], "iprint": 145, "full_output": 145, "13": [145, 329, 331, 333, 334, 335, 337, 338, 340], "continuous_var": [145, 329, 333], "requestedi": 145, "verbosity": 145, "silent": 145, "summary": 145, "upo": 145, "itera": 145, "minimizer": 145, "func": 145, "epsilo": [153, 157, 338], "factory": [153, 157], "produces": [153, 338], "overridi": 153, "modify": 153, "behavior": [153, 338], "generates": 153, "mixer": [153, 156, 157, 289, 300, 338], "warm": [153, 154, 155, 157, 158, 289, 300], "regularization": [153, 157], "xi": [153, 157], "5": [153, 157, 224, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "corresponds": [153, 157, 329, 334, 340], "initial_variables": [154, 156], "creates": [154, 155, 156, 254, 266, 283], "circuit": [154, 156, 289, 300, 302, 316, 334, 335, 336, 338, 340], "quantumcircuit": [154, 156, 289, 291, 292, 293, 300, 302, 303, 316, 338, 340], "represents": [154, 334, 340], "constructedi": [155, 335], "evolvedi": 156, "ry": [156, 334, 338], "theta": [156, 334, 335, 338], "rz": [156, 338, 340], "2beta": 156, "pre_solver": [157, 338], "relax_for_pre_solver": [157, 338], "25": [157, 331, 335, 336, 339], "num_initial_solutions": 157, "warm_start_factory": 157, "aggregator": 157, "must": [157, 289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "implement": 157, "own": [157, 311], "inheritingi": 157, "daniel": 157, "egger": [157, 338, 340], "startingi": [157, 289, 300, 330, 338], "2009": [157, 289, 300, 338], "10095": [157, 289, 300, 338], "correct": [157, 330, 335], "initialization": 157, "circuit_factory": 157, "explicit": 157, "warmstartqaoacircuitfactory": 157, "ignoredi": [157, 315, 318], "passingi": 157, "computations": [157, 335], "warmstartqaoafactory": 157, "several": [157, 330, 340], "states": 157, "next": [158, 331, 338], "presolver": 158, "weights": [159, 160, 177, 335, 337], "max_weight": [159, 177, 337], "max_number_of_bins": 159, "optimizationapplication": [159, 167, 170, 177, 186, 193, 199], "bin": [159, 160, 161, 162, 334], "packingi": [159, 160, 162, 199, 201], "wikipedia": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "wik": [159, 163, 167, 174, 177, 181, 186, 199, 202, 205, 211, 217], "bin_packing_proble": 159, "items": [159, 161, 177, 178, 336, 340], "capacity": [159, 177], "bins": [159, 160], "plot": [160, 333, 334, 335, 336, 340], "calculatedi": [160, 161, 164, 168, 171, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 227, 231, 240], "sum": [160, 187, 335, 336, 338], "respectively": [160, 330, 339], "fig": [160, 340], "ite": [161, 178], "lists": [161, 183, 329], "items_in_bins": 161, "graphoptimizationapplication": [163, 174, 181, 202, 205, 211, 217, 337], "networkx": [163, 170, 173, 174, 181, 202, 205, 211, 217, 334, 337], "theory": [163, 202], "clique_": 163, "graph_theory": [163, 202], "suitap": [163, 170, 174, 181, 202, 205, 211, 217, 331, 335], "buildi": [163, 170, 174, 181, 202, 205, 211, 217, 338], "makes": [163, 166, 340], "maximal": [163, 165, 166, 179], "instead\u0131": [163, 166, 333], "node": [164, 175, 183, 203, 206, 207, 211, 212, 213, 218, 334, 335, 339], "subsets": [167, 168, 187, 199, 200], "exact": [167, 169, 331, 333, 334, 335], "exact_cover": 167, "pos": [171, 334, 337], "without": [171, 339], "colors": [171, 334], "positions": [171, 266], "nodes": [171, 173, 206, 207, 212, 334, 335], "num_nodes": 173, "num_edges": 173, "edges": 173, "partition": [174, 176, 186], "graph_partition": 174, "dividedi": 175, "two": [175, 183, 329, 331, 334, 339, 340], "groups": 175, "knapsack_proble": 177, "maximum_cut": 181, "gset": [182, 184], "read\u0131": [184, 208], "2d": 184, "number_set": 186, "partition_proble": 186, "integers": [186, 339], "half": 187, "partitioningi": 188, "calculation": 190, "answer": [190, 335], "understand\u0131": [190, 340], "state_vector": 191, "most": [191, 340], "likely": 191, "ints": 191, "num_sites": 193, "rng_or_seedi": 193, "sherringto": 193, "kirkpatrick": 193, "sk": [193, 194, 198], "over": [193, 334, 336], "spins": [193, 196], "h": [193, 334, 335, 340], "sqrt": [193, 338], "w_": [193, 334, 335], "x_ix_j": 193, "x_i": [193, 231, 232, 329, 330, 334, 338], "pm": [193, 334], "configuration": [193, 196, 340], "disorder": 193, "chose": [193, 289, 335, 338, 340], "independently": 193, "noti\u00e7": [193, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "variants": 193, "disorders": 193, "normal": 193, "distribution": [193, 289, 335, 338, 340], "mean": [193, 289, 300, 302, 316, 331], "varia": 193, "dmitry": 193, "panchenko": 193, "overview": [193, 330], "abs": [193, 289, 300, 335, 336, 338], "1211": 193, "1094": 193, "sites": [193, 197], "pseudo": 193, "default_rngu": 193, "rtype": [195, 197], "set_packingi": 199, "stable": [202, 204], "independent": 202, "independent_set_": 202, "travelingi": [205, 206, 209, 335, 337], "salesma": [205, 206, 209, 335, 337], "travellingi": [205, 335], "travelling_salesman_proble": 205, "low": [206, 212], "coordina": [206, 212], "coordinates": [206, 212], "prospectiv": [207, 334], "cycle": [207, 334], "tsplib": 208, "edge": [208, 334, 340], "euc_2du": 208, "z": [210, 231, 329, 330, 331, 334, 335, 339, 340], "cities": [210, 334], "length": [210, 340], "num_vehicles": 211, "depot": [211, 212, 335], "vehi\u00e7": [211, 212, 214, 216], "routingi": [211, 212, 216], "vehicle_routing_proble": 211, "vehicles": [211, 212, 213, 215, 335], "depart": [211, 212, 213], "num_vehi\u00e7": 212, "routes": [214, 335], "vertex": [217, 219, 334, 337], "vertex_cover": [217, 337], "auto": 220, "introducingi": 220, "slack": [220, 223, 231, 330], "conv": [220, 224, 240, 337], "problem2": [220, 224, 240], "choo": [220, 333, 334, 335, 340], "supportedi": [221, 225, 289, 300, 302, 315, 316, 318, 326, 327, 331], "unsupportedi": [221, 232, 323, 324], "encodingi": [224, 329, 330, 339], "boundedi": 224, "proposedi": [224, 334], "integer_var": [224, 329, 330, 339], "sahar": 224, "kar": [224, 332, 334], "poo": 224, "ronagh": 224, "2017": [224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "practical": 224, "annealers": 224, "1706": [224, 330], "01945": [224, 330], "back": [226, 229, 233, 331], "automatically": [227, 231, 240, 323, 331, 336, 339], "differs": [229, 233], "requir": [231, 334], "begi": [231, 232, 329, 332, 338], "leq": [231, 232, 329, 330, 333, 335], "rightarrow": [231, 232, 332, 334], "geq": [231, 232, 329, 330], "x_j": [231, 232, 334], "suppliedi": 231, "patterns": [231, 232], "they": [231, 315, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "kept": 231, "fred": 231, "glover": 231, "tutorial": [231, 330, 333, 340], "formulatingi": 231, "1811": 231, "11538": 231, "_flipproblemse": [235, 236], "maximization": [235, 236, 330], "unchangedi": [235, 236], "another": [238, 239, 329, 331], "keep": [238, 290, 335], "quadratic_progra": [246, 251, 254, 262, 266, 274, 281, 283, 326, 327, 329], "quadraticprogramelement": [246, 254, 266, 274, 283], "parent": [246, 251, 254, 262, 266, 274, 281, 282, 283], "evaluatedi": [252, 258, 259, 263, 270, 271, 276, 277, 289, 300, 301, 302, 306, 315, 316, 317, 318, 336, 340], "linearexpression": [253, 264, 278], "expression": [253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 273], "spar": [254, 266, 289, 329, 340], "dok_matrix": [254, 257, 266, 269], "addressedi": [255, 267, 331], "expressionbounds": [256, 268], "evalua": [259, 271, 277, 334, 335, 336], "gradient": [259, 271, 277], "use_na": [261, 273, 329], "determines": [261, 272, 273, 340], "quadraticexpression": [265, 279], "compressedi": 266, "way": [266, 329, 334, 335], "symmetri\u00e7": [266, 272, 273, 329], "summedi": 266, "up": 266, "triangle": [266, 340], "q": [270, 329, 332, 333, 335, 336, 340], "tuples": 273, "objse": [274, 280], "shape": [276, 277], "initializ": [281, 333, 335, 336], "exposedi": 283, "meant": 283, "externally": 283, "reps": [289, 300, 334, 336, 337, 340], "initial_sta": [289, 300, 338], "initial_point": [289, 300, 302, 316, 331, 338, 340], "alpha": [289, 334, 336, 340], "provider": [289, 300, 301, 302, 306, 316, 317, 340], "shots": [289, 290, 300, 302, 308, 316, 336, 337, 339, 340], "1024": [289, 300, 302, 316, 340], "measurement_error_mitigation": [289, 300, 302, 316, 340], "callback": [289, 300, 302, 316, 336], "store_intermedia": [289, 300, 302, 316], "use_swap_strategies": [289, 340], "use_initial_mappingi": [289, 340], "use_pulse_efficient": [289, 340], "optimization_level": [289, 340], "vqeclient": [289, 316, 320], "runt": [289, 300, 301, 302, 306, 311, 316, 317, 321], "client": [289, 302, 316, 335], "spsa": [289, 300, 302, 316, 334, 335, 340], "qn": [289, 300, 302, 316], "1411": [289, 300, 334, 335], "4028": [289, 300, 334, 335], "prependi": [289, 300], "evolve": [289, 300], "custo": [289, 300], "support": [289, 300], "optimizations": [289, 300], "subspaces": [289, 300], "1709": [289, 300], "03489": [289, 300], "http": [289, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "vqe": [289, 301, 302, 306, 317, 321, 330, 331, 332, 333, 334, 335], "fraction": [289, 290, 331, 340], "measurement": [289, 300, 302, 308, 316, 340], "expectation": [289, 301, 306, 315, 317, 318, 335, 336, 340], "cvar": [289, 340], "containedi": 289, "interval": 289, "mitigation": [289, 300, 302, 308, 316, 340], "access": [289, 300, 302, 316], "four": [289, 300, 302, 316], "evaluation": [289, 300, 302, 316, 340], "works": [289, 300, 302, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "towards": [289, 300, 302, 316], "count": [289, 300, 301, 302, 306, 316, 317, 335], "ansatz": [289, 300, 302, 316, 336, 340], "deviation": [289, 300, 302, 316, 331], "store": [289, 300, 302, 314, 316, 336], "steps": [289, 300, 302, 316, 332, 334, 335, 338], "swap": [289, 294, 299, 340], "strategies": [289, 294, 299, 340], "transpilingi": [289, 340], "transpi": [289, 298, 340], "permu": [289, 340], "paulis": [289, 340], "cost": [289, 335, 338, 340], "better": [289, 297, 331, 340], "fit": [289, 297, 340], "couplingi": [289, 340], "map": [289, 330, 334, 335, 340], "strategy": [289, 340], "neededi": [289, 340], "transpil": [289, 340], "pul": [289, 298], "transpilation": [289, 299], "2105": 289, "01063": 289, "best": [290, 331, 334, 339, 340], "aux_operators": [295, 301, 306, 311, 315, 317, 318], "inputs": [295, 311, 340], "permutation": [297, 340], "devi\u00e7": [297, 333, 340], "cr": [298, 340], "gates": [298, 335, 340], "qaoaclient": [300, 302, 340], "deprecatedi": [300, 316, 319], "renamedi": [300, 316, 319], "calls": [301, 306, 317], "observap": [301, 306, 317], "auxiliary": [301, 306, 315, 317, 318], "operators": [301, 306, 315, 317, 318, 340], "eigenvalue": [301, 306, 317, 334, 340], "main": [301, 306, 315, 317, 318, 340], "chemistry": [301, 306, 317, 331], "dipol": [301, 306, 317], "parti\u00e7": [301, 306, 317], "so": [301, 306, 317, 330, 332, 334], "yet": [301, 306, 317], "runtimeerror": [301, 306, 317], "job": [301, 306, 317, 321, 340], "execution": [301, 306, 317, 340], "failedi": [301, 306, 317], "call": [302, 331, 340], "equivalent": [302, 330, 331], "nature": [302, 340], "but": [302, 331, 333, 334, 338], "serves": 302, "basis": [302, 335], "parameterizedi": [302, 316, 335], "wave": [302, 316, 335], "featur": [302, 316], "readout": [308, 340], "done": [308, 340], "fitter": [308, 340], "calibrations": 308, "30": [308, 330, 334], "minutes": 308, "id": [310, 321, 340], "overri": 311, "add": [311, 329, 330, 331, 335], "classmethodu": [315, 318], "computingi": [315, 318, 331, 334], "computes": [315, 318, 335, 338], "aux_operator": [315, 318], "expectations": [315, 318], "renamingi": 316, "reflects": 316, "executedi": [316, 340], "vqeruntimeresult": 319, "vqeprogra": 319, "vqeresult": [319, 320], "additionally": [319, 320], "associatedi": 321, "indicator_big_": 323, "translate": [323, 324, 331, 336], "mp": [323, 326, 329, 332, 333, 336, 338, 339], "features": [323, 338, 340], "indicator": 323, "logical": 323, "expressions": 323, "logical_not": 323, "logical_and\u0131": 323, "logical_or": 323, "big": [323, 335, 339], "m": [323, 329, 330, 332, 334, 335, 336, 338, 339], "formulation": [323, 329, 330, 334, 339], "derivedi": 323, "basi\u00e7": 324, "functions": [324, 334, 335, 336], "treat": 325, "ys": 325, "imaginary": 325, "never": [326, 327], "happe": [326, 327], "quad_progu": 328, "comprisingi": 328, "sayfa": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "01_quadratic_progra": 329, "ipynb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "olu\u015fturul": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "e\u011fiti\u00e7": 329, "dok\u00fcma": 329, "k\u0131sa\u00e7": 329, "mod\u00fcl": [329, 334], "problem": [329, 330, 333, 335, 336, 338], "olu\u015fturulacabilecek": 329, "bahsedilmek": 329, "olu\u015fturmak": [329, 332, 334, 337], "s\u0131n\u0131f": [329, 333, 335], "sunar": 329, "ifa": [329, 332], "etmek": [329, 330, 332, 334, 337], "gerekir": [329, 333, 334, 337], "a\u015fa\u011f\u0131": [329, 330, 332, 333, 334, 335, 337], "gip": [329, 330, 332, 333, 334, 337, 338], "verile": [329, 330, 334, 336, 337], "ikinci": [329, 330, 333, 335], "derece": [329, 332, 333, 335, 338], "k\u0131s\u0131tla": 329, "ilgilenir": 329, "align": [329, 338], "quad\u0131": [329, 333, 335], "q_0": 329, "subject": [329, 330, 331, 332, 333, 334, 337, 338, 339, 340], "q_i": [329, 335], "a_i": [329, 330], "r_i": 329, "dots": [329, 335], "l_i": 329, "u_i": [329, 335], "dimensional": 329, "kurul": [329, 333], "aktarma": 329, "translators": [329, 332, 333, 336, 338], "from_docplex_mp": [329, 332, 333, 336, 338, 339], "explainedi": 329, "section": [329, 337, 339], "constructingi": 329, "ibmdecisionoptimization": 329, "io": 329, "load\u0131": [329, 333, 335, 339, 340], "mdl": [329, 333, 336, 338], "lb": [329, 335, 339], "ub": [329, 335, 339], "add_constraint": [329, 333, 336, 338, 339], "export_as_lp_stringi": [329, 339], "iso": [329, 339], "8859": [329, 339], "obj": [329, 335, 336, 339], "c1": [329, 334, 337], "qc1": 329, "lt": [329, 330, 331, 333, 337, 338, 339], "binaries": [329, 339], "generals": [329, 339], "prettyprint": [329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340], "comprehensiv": 329, "mod": 329, "39": [329, 330, 331, 333, 334, 337, 338, 339, 340], "gt": [329, 330, 331, 333, 337, 339], "yap\u0131ld\u0131k": 329, "a\u00e7\u0131kl\u0131yor": [329, 335], "bo\u015f": 329, "ba\u015flayal": 329, "my": 329, "three": [329, 330], "ekledik": 329, "\u00e7e\u015fit": 329, "alt": [329, 330, 332, 333, 334, 335, 337], "s\u0131n\u0131r": [329, 330, 335], "\u00fcst": [329, 330, 332], "belirtebilir": 329, "komut": 329, "\u00e7a\u011f\u0131rarak": 329, "ama\u00e7": [329, 330, 332, 334, 335, 336], "ayarlayabilir": 329, "lis": 329, "matris": [329, 333, 338], "s\u00f6zl\u00fck": 329, "il": [329, 330, 332, 333, 334, 335, 338], "terim": [329, 330, 334, 338], "belirterek": 329, "sabit": 329, "ter": [329, 330], "s\u0131r": [329, 332], "fonksiyo": [329, 332, 333, 334], "ekleyebilir": 329, "bi\u00e7": 329, "b\u00f6l": [329, 332, 337], "fakt\u00f6r": [329, 330], "\u00f6l\u00e7eklendirilmes": 329, "gerektik": [329, 337], "unutmay": [329, 332, 334, 337, 338], "y\u00fcz": 329, "bi\u00e7im": [329, 330], "yazd\u0131r\u0131r": 329, "k\u0131s": 329, "\u00e7arp\u0131l\u0131r": 329, "b\u00f6l\u00fcnmel": 329, "program": 329, "belirtilmes": 329, "gereke": [329, 334], "par\u00e7a": 329, "g\u00f6rel": [329, 332], "ko": [329, 332], "math": [329, 332, 334, 335, 338], "qx": 329, "h\u00fccre": 329, "nesnel": [329, 333], "i\u015flev": [329, 333, 334, 335], "bildirilecek": 329, "g\u00f6sterir": [329, 332, 335, 336], "anahtar": 329, "de\u011fi\u015f": [329, 330, 332, 334, 336], "kar\u015f\u0131l\u0131k": [329, 330, 332, 333, 334, 336, 337], "gelir": [329, 330, 332, 333, 334, 336], "gele": [329, 330, 332, 333, 336, 337, 338], "de\u011fer": [329, 330, 333, 334, 335, 336, 337], "katsay\u0131": [329, 330, 334], "\u00e7arp\u0131la": 329, "ik": [329, 330, 334, 335, 337], "de\u011fi\u015fke": [329, 330, 335], "6": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dictionaries": [329, 336], "arrays": 329, "mathematical": [329, 334], "orderingi": [329, 334], "originally": 329, "declaredi": 329, "7": [329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340], "bakarak": 329, "s\u0131ra": [329, 332, 333], "sabi": 329, "karasel": 329, "ula\u015fabilir": 329, "gel": 329, "yok": 329, "to_array": 329, "seyrek": 329, "to_dict": 329, "edebilir": 329, "mi": 329, "m\u0131": 329, "kullan\u0131lacak": [329, 336], "i\u0307kinci": [329, 332, 335, 338], "s\u0131k\u0131\u015ft\u0131r\u0131l": 329, "sakland\u0131k": 329, "dikkat": 329, "edi": 329, "saklan\u0131r": 329, "\u00f6\u011fe": [329, 334, 337], "simetrik": [329, 333], "alabilir": 329, "\u00e7a\u011f\u0131r\u0131r": 329, "\u00e7ift": [329, 333], "8": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "anla": 329, "sa\u011f": [329, 330, 337], "taraf": [329, 330, 334, 336, 337], "ayarlayarak": 329, "destekledik": [329, 334], "us": [329, 330, 340], "kullanabilir": 329, "linear_constraint": [329, 330, 339], "lin_eq": 329, "lin_leq": 329, "lin_geq": 329, "quadratic_constraint": 329, "quad_eq": 329, "quad_leq": 329, "quad_geq": 329, "k\u0131s\u0131t": 329, "eri\u015febilir": 329, "11": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "get_linear_constraint": 329, "get_quadratic_constraint": 329, "ayr\u0131\u00e7": [329, 330, 334, 335], "remove_linear_constraint": 329, "remove_quadratic_constraint": 329, "kald\u0131rabilir": 329, "12": [329, 331, 333, 334, 335, 336, 337, 338, 340], "substitu": 329, "substitute_variables": 329, "deal": [329, 334, 338, 340], "cases": [329, 331, 335], "leftarrow": 329, "\u00e7\u0131ka": [329, 330, 333], "sor": [329, 331, 333, 334, 335, 337, 338], "neden": [329, 334, 335], "m\u00fcmk": [329, 334, 335], "de\u011fil": [329, 334], "y\u00f6ntem": [329, 330, 333, 334], "durum": [329, 330, 332, 334, 335], "d\u00f6nd\u00fcr\u00fcr": [329, 332], "\u00e7al\u0131\u015f\u0131yor": 329, "fakat": 329, "aral\u0131k": [329, 338], "d\u0131\u015f": [329, 337], "\u00e7ok": [329, 332, 334, 335], "kez": [329, 335, 337], "de\u011fi\u015ftiremez": 329, "y\u00f6nte": [329, 330, 333, 335], "b\u00f6": 329, "dur": [329, 330, 332, 333, 334], "ha": 329, "verir": [329, 330], "15": [329, 331, 334, 335, 337, 338, 340], "except": [329, 335], "itself": 329, "your": [329, 340], "denotes": 329, "includedi": 329, "ones": [329, 335], "character": 329, "specification": [329, 334], "16": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "f": [329, 331, 335, 337, 338, 340], "_e": 329, "17": [329, 331, 334, 338, 340], "tools": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "jupyter": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit_version_tap": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "qiskit_copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "softwareversionqiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "terra0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "21": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dev0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "dbd3961qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "aer0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ibmq": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "provider0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "19": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "1qiskit": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "optimization0": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0system": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "informationpytho": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "version3": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "4python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "compilergc\u00e7": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "0python": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "buildmain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "2022": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "09": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "04": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "19oslinuxcpus4memory": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "gb": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "577545166015625wed": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "18": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "03": [329, 330, 331, 332, 339], "27": 329, "jst": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "code": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "copyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "licensedi": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "under": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "apache": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "lice": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "mayobtain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "root": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "tree": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "licenses": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "modifications": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "derivativ": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "retain": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "thiscopyright": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "carry": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "indicatingthat": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "alteredi": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "originals": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "02_converters_for_quadratic_programs": 330, "representedi": [330, 331], "generi\u00e7": 330, "powerful": 330, "general": [330, 334, 335, 339], "certain": [330, 333], "our": [330, 332, 334, 338], "handle": [330, 333], "hamiltonians": 330, "opflow": [330, 336, 340], "approximatedi": 330, "commonly": 330, "known": 330, "rout": [330, 334], "detail": 330, "work": 330, "differently": 330, "offers": 330, "variety": 330, "providingi": 330, "linearinequalitytopenalty": 330, "maximizetomin": 330, "minimizetomax": 330, "includes": 330, "convenie": 330, "inequalitytoequalityconverter": 330, "e\u015fitsizlik": [330, 333], "k\u0131s\u0131tlama": [330, 333, 335, 338], "dan": 330, "kald\u0131rmak": [330, 335], "dura\u011fa": 330, "e\u015fitlik": [330, 333], "d\u00f6n\u00fc\u015ft\u00fcr\u00fcr": 330, "sol": [330, 338], "aras": [330, 334, 335, 337], "fark": [330, 332], "hesaplanacak": 330, "i\u015faret": 330, "sembol": 330, "k\u0131s\u0131tlamas": [330, 333], "maksimizasyo": [330, 334], "ikil": [330, 332, 333, 334, 335, 337, 338], "de\u011fi\u015fken": [330, 333, 335, 338], "tamsa": [330, 332, 337, 338], "yaz\u0131l\u0131r": 330, "qp": [330, 331, 332, 333, 334, 336, 337, 338, 339], "xyz_leq": 330, "xyz_geq": 330, "d\u00f6n\u00fc\u015ft\u00fcrmek": 330, "nin": [330, 333, 334, 335], "\u00e7a\u011f\u0131r": 330, "ineq2eq": 330, "qp_eq": 330, "int_slack": [330, 337], "looks": 330, "lik": 330, "above": [330, 332, 335, 338, 340], "xyz": 330, "_leg": 330, "_slack": 330, "_geq": 330, "let": [330, 339], "explain": 330, "able": [330, 335], "satisfy": 330, "off": 330, "decimal": 330, "basically": [330, 335], "approach": [330, 331, 335], "however": [330, 334, 338, 340], "symbol": 330, "minus": 330, "d\u00f6n\u00fc\u015ft\u00fcr\u00fcc\u00fcs": 330, "tam": [330, 332, 334, 335, 337], "sa": [330, 337], "siste": [330, 334], "d\u00f6n\u00fc\u015ft\u00fcr\u00fcrmek": 330, "\u00f6nerile": 330, "s\u0131n\u0131rl\u0131": [330, 334, 335], "katsa": 330, "kodlamas": [330, 332], "kullan\u0131l\u0131r": 330, "kodla": 330, "hakk": [330, 333, 334], "detayl\u0131": 330, "l\u00fctfe": 330, "makale": 330, "inceley": 330, "_leq": 330, "again": [330, 334], "int2p": 330, "qp_eq_p": 330, "both": [330, 331, 334, 338, 339], "asl": [330, 332, 335], "as\u0131l": 330, "do\u011fru": [330, 333, 334], "kabul": [330, 334], "ldots": [330, 333, 335], "temsil": [330, 332, 334, 338], "k\u00fcme": [330, 334, 335, 337], "topla": [330, 334, 337], "olabile": 330, "katsay": 330, "birlik": [330, 331, 332], "anlam": [330, 332, 333, 334, 335], "sonu\u00e7": [330, 332, 334, 335, 337], "g\u00f6sterim": 330, "ger": [330, 335], "\u00e7evirmek": 330, "i\u015flevsellik": [330, 337], "de": [330, 331, 332, 333, 334, 335, 336, 338], "k\u0131s\u0131ts\u0131z": [330, 338], "e\u015flemek": 330, "do\u011frusal": [330, 335, 338], "ceza": 330, "d\u00f6n\u00fc\u015ft\u00fcr\u00fc\u00e7": [330, 337], "girdis": 330, "sade\u00e7": [330, 332, 335], "olmal": 330, "\u015fu": [330, 333, 334, 335], "sum_i": [330, 334], "b\u00fcy\u00fck": [330, 334], "eklenecek": 330, "1e5": 330, "\u00e7okla": 330, "azla": 330, "olma": 330, "lineq2penalty": 330, "22": [330, 331, 334, 338, 339], "44": [330, 338], "66": 330, "88": 330, "176": 330, "132": [330, 335], "99": 330, "352": 330, "264": 330, "178": 330, "198": 330, "110": 330, "220": 330, "177": 330, "354": 330, "708": 330, "374": 330, "d\u00f6n\u00fc\u015ft\u00fcrd\u00fck": 330, "eklenir": 330, "\u015f": [330, 333, 334], "bir\u00e7ok": [330, 334, 335, 338], "kuan": [330, 331, 332, 337], "algoritmas": [330, 333], "uyumlu": 330, "\u00f6ncek": [330, 332], "03_minimum_eigen_optimizer": 331, "findingi": [331, 335], "important": [331, 334, 340], "physics": [331, 334], "translation": [331, 336], "takingi": 331, "spin": 331, "implementations": 331, "wraps": 331, "illustra": [331, 338], "show": [331, 333, 335, 336, 338, 340], "mentionedi": 331, "thrown": 331, "n\u0131n": [331, 333, 337], "devre": [331, 334, 335], "derinlik": [331, 334, 335], "ger\u00e7ek": [331, 332, 334, 335, 337], "zamanl\u0131": 331, "yak": 331, "cihaz": [331, 333, 334], "engelleyi\u00e7": 331, "olabilecek": [331, 334, 335], "boyut": [331, 332, 335, 337], "art\u0131r\u0131lmas": 331, "gerekiyor": 331, "olas": [331, 332, 335], "ge\u00e7i\u00e7": 331, "\u00e7\u00f6z": [331, 332, 334], "tan\u0131t\u0131la": [331, 336], "yinelemel": [331, 332], "s\u0131": 331, "kavra": 331, "\u00f6\u011freti\u00e7": 331, "genelle\u015ftirir": 331, "lucas": [331, 334], "formulations": [331, 335], "front": 331, "phys": [331, 334, 340], "2014": [331, 334, 335], "kliesch": 331, "koenigi": 331, "tang": 331, "basicaer": [331, 332, 333, 335, 338], "utils": [331, 334, 335, 336, 337, 338, 339], "algorithm_globals": [331, 334, 335, 336, 337, 338], "visualization": [331, 334], "plot_histogra": [331, 334], "typing": [331, 333], "account": [331, 340], "to_isingi": [331, 334, 336, 337], "iiz": 331, "75": [331, 334, 340], "zii": 331, "izz": [331, 340], "ziz": [331, 340], "zzi": [331, 340], "sometimes": 331, "translator": 331, "from_isingi": 331, "initializingi": 331, "want": [331, 339, 340], "random_seedi": [331, 334, 335, 336, 337, 338], "10598": [331, 334, 335], "get_backendi": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "statevector_simulator": [331, 332, 333, 338], "seed_simulator": [331, 334, 335, 337, 338], "seed_transpi": [331, 334, 335, 337, 338], "qaoa_mes": [331, 338, 340], "exact_mes": [331, 338], "benchmark": [331, 333], "small": [331, 335, 338], "exact_result": [331, 332], "success": [331, 332, 333, 334, 336, 337, 338, 339, 340], "qaoa_result": [331, 338], "useful": [331, 334, 335], "denotedi": 331, "consolidatedi": 331, "single": [331, 334, 335, 338, 339, 340], "attribu": 331, "aggrega": 331, "12499999999999994": 331, "filter": 331, "probabilities": [331, 336], "get_filtered_samples": 331, "allowed_status": 331, "res": [331, 338, 340], "appendi": [331, 335, 338, 340], "filtered_samples": 331, "005": 331, "obtain": [331, 335, 338, 340], "perspectiv": 331, "statistics": 331, "helpful": 331, "respect": 331, "respectiv": 331, "basics": 331, "understandingi": 331, "fvals": 331, "std": 331, "9364916731037085": 331, "finally": 331, "despi": 331, "crunchingi": 331, "usually": 331, "early": [331, 334], "samples_for_plot": 331, "join": [331, 335, 338], "v": [331, 333, 334, 335], "enumera": [331, 338, 340], "redu\u00e7": [331, 340], "below": [331, 335, 338, 340], "reduces": 331, "rqao": 331, "rqaoa_result": 331, "33": [331, 335, 337], "04_grover_optimizer": 332, "varyasyonel": [332, 335], "algoritma": [332, 334, 335, 336, 338], "kombinasyonel": 332, "ke\u015ffedil": 332, "\u00e7al\u0131\u015ft\u0131rma": 332, "biline": [332, 335], "e\u015fik": 332, "bulmak": [332, 334, 335], "aramas": 332, "uygu": [332, 333, 334, 335], "ta": 332, "kullan\u0131la": [332, 335], "oracle": 332, "buluna": [332, 333], "kadar": [332, 334], "yineleme": 332, "g\u00fcncellene": 332, "alan": [332, 333, 334], "azaltarak": 332, "mevcut": [332, 334, 335], "maks": [332, 334, 337], "t\u00fcm": [332, 333, 335, 337], "tan\u0131r": 332, "defter": [332, 335, 336], "a\u00e7\u0131klana": 332, "teknik": 332, "kullana": 332, "bile\u015fen": [332, 334], "s\u0131n\u0131rs\u0131z": 332, "i\u0307kil": [332, 338], "a\u00e7\u0131kland\u0131k": 332, "inceleyecek": 332, "gilliam": 332, "woerner": [332, 338, 340], "gonciulea": 332, "k\u0131s\u0131tl\u0131": [332, 333], "polino": 332, "uyarlamal": 332, "\u00f6n": [332, 334, 335], "bask\u0131": 332, "1912": 332, "04088": 332, "temel": [332, 334, 335], "\u00f6\u011fes": 332, "\u00fc\u00e7": 332, "bile\u015fe": [332, 337], "ihtiya\u00e7": [332, 333], "duyar": [332, 333], "haz\u0131rla": 332, "operat\u00f6r": [332, 333, 334], "uzay": [332, 334], "s\u00fcrepozisyon": 332, "aranmak": 332, "eder": [332, 334, 338], "genlik": 332, "\u00e7arpar": 332, "rangle_n": [332, 338], "\u00e7arpa": [332, 333], "dif\u00fczyo": 332, "d": [332, 334, 335, 337, 338, 340], "\u00fcn": 332, "uygulama": [332, 333, 334, 337], "\u00f6zel": 332, "kulla": [332, 334, 335], "g\u00f6r": [332, 334, 336], "g\u00f6ster": 332, "genel": [332, 334, 335], "\u00e7er\u00e7eve": 332, "ad\u0131m": [332, 335], "h\u00e2l\u00e2": 332, "\u00fcst\u00fcnk\u00f6r": 332, "a_y": 332, "quadraticprogramtonegativevalueora\u00e7": 332, "kullan\u0131r": [332, 335], "b\u00f6yle\u00e7": [332, 335, 336], "k\u00fcbit": [332, 334], "kayd\u0131": 332, "e\u015fit": [332, 337], "s\u00fcperpozisyon": 332, "yazma\u00e7": 332, "haz\u0131r": 332, "yakla\u015f\u0131k": [332, 335], "rangle_m": 332, "ard\u0131": [332, 333], "negatif": [332, 334], "o_y": 332, "i\u015faretlenmel": 332, "tart\u0131\u015f\u0131la": 332, "kut": 332, "den": [332, 334], "ba\u011f\u0131ms\u0131z": 332, "ancak": [332, 334, 335, 336], "gereklilik": 332, "olmad\u0131k": [332, 337], "a\u00e7\u0131kl\u0131k": 332, "sa\u011flamak": 332, "edecek": [332, 337], "resmi": 332, "\u00f6": [332, 333, 334, 335, 337], "ki": 332, "rangle": [332, 334, 335, 338], "say\u0131": [332, 337], "giri\u015f": 332, "g\u00fcncellendik": 332, "yukar": 332, "a\u015fak": 332, "maksim": [332, 337], "kayd\u0131r\u0131lacak": 332, "uyar": 332, "bulma": [332, 334, 337], "ba\u011flam": [332, 334], "azald\u0131k\u00e7a": 332, "kala": 332, "uza": 332, "azal\u0131r": 332, "sonraki": 332, "somut": 332, "incelenecek": 332, "minimizasyo": [332, 334], "\u00f6nemsiz": 332, "veril": 332, "eqnarray": 332, "min_": [332, 333, 335, 338], "2x_0x_2": 332, "x_1x_2": 332, "1x_0": 332, "2x_1": 332, "3x_2": 332, "docplex_model1": [332, 338], "kodlamak": 332, "adet": 332, "olu\u015fturuyor": [332, 335], "ilerle": 332, "kaydedilme": 332, "yinelemes": 332, "bulunduk": 332, "erdiriyor": 332, "de\u011fi\u015fmiyor": 332, "olu\u015fturduk": 332, "al\u0131r": [332, 333, 337], "ilgil": 332, "i\u00e7ere": 332, "nesnes": 332, "grover_optimizer": 332, "x_0": [332, 334, 336, 337], "x_1": [332, 334, 336, 337], "x_2": [332, 334, 336, 337], "objektif": [332, 336], "sonu\u00e7lan\u0131r": [332, 338], "zama": [332, 333, 335, 337], "rastgel": [332, 335, 337], "i\u0307lerleye": 332, "g\u00f6rselle\u015ftir": 332, "uygulana": 332, "\u00e7al\u0131\u015ft\u0131r\u0131l\u0131\u015f": 332, "grafik": [332, 334, 335, 337], "ba\u015fl\u0131k": 332, "g\u00f6sterile": [332, 335], "yinele": 332, "saya\u00e7": 332, "ge\u00e7erli": 332, "tek": [332, 334], "ekse": 332, "e\u015fde\u011fer": [332, 334], "\u00f6rn": 332, "101": 332, "\u00e7\u00f6z\u00fcm": [332, 334, 335, 337], "renk": 332, "yo\u011funluk": [332, 334], "belirli": [332, 333, 334, 336, 337], "parlak": 332, "y\u00fck": [332, 334, 337], "\u00f6l\u00e7me": 332, "olas\u0131l\u0131k": [332, 334], "\u00e7ark": 332, "bak": [332, 334], "miktar": [332, 334], "kayd\u0131rd\u0131k": 332, "da\u011f\u0131l": 332, "az": [332, 335, 337], "tane": 332, "\u00e7al\u0131\u015ft\u0131k": 332, "do\u011frulayabilir": 332, "exact_solver": 332, "53": 332, "05_admm_optimizer": 333, "genellik": [333, 334, 338], "lojis": [333, 335], "finans": [333, 334], "operasyo": 333, "ara\u015ft\u0131rma": [333, 334, 335], "karma": [333, 335], "sorun": [333, 334, 337, 338], "mbco": 333, "an\u0131lacak": 333, "\u00e7\u00f6zebilir": [333, 335, 337], "tasarlana": 333, "mathcal": 333, "subseteq": 333, "mathbb": [333, 335], "varphi": 333, "tabi": [333, 335], "mathrm": [333, 334, 335], "ell": 333, "fonksiyonel": 333, "varsay": 333, "intercal": 333, "kare": 333, "vekt\u00f6r": [333, 335, 337, 338], "x_": [333, 334, 335, 336], "forall": [333, 334, 335], "k\u00fcmes": [333, 334, 337], "s\u0131n\u0131rlama": 333, "g\u00fc\u00e7lendirir": 333, "konveks": 333, "d\u0131\u015fb\u00fckey": [333, 338], "k": [333, 335, 337], "ortak": 333, "mbo": 333, "\u00e7\u00f6zmek": [333, 337, 338], "alternatif": [333, 335], "y\u00f6n": 333, "ne": [333, 334], "dayal": 333, "bulu\u015fsal": [333, 334, 335], "\u00f6ner": 333, "uz": 333, "ge\u00e7mi\u015f": 333, "b\u00f6lme": [333, 337], "konvekslik": 333, "varsay\u0131m": 333, "tutulmas": 333, "\u015fart\u0131": 333, "ar": 333, "de\u011fi\u015fkenli": 333, "yak\u0131nsa": 333, "bilinmek": 333, "referredi": 333, "leverages": 333, "splittingi": 333, "procedur": 333, "devis": 333, "decomposition": [333, 340], "mbos": 333, "subproble": 333, "\u00e7al\u0131\u015f\u0131r": [333, 334, 335], "\u00e7\u00f6z\u00fcc\u00fc": 333, "ayarlay": 333, "tan\u0131mla": 333, "d\u00fczg\u00fc": [333, 334], "\u00e7iftli": 333, "g\u00fcncelley": 333, "edici": [333, 334], "maliyet": [333, 334, 335], "fizibili": 333, "optimallik": [333, 334], "ko\u015ful": [333, 335], "kapsaml\u0131": 333, "tart\u0131\u015fma": [333, 335], "bulunabilir": 333, "bloklu": 333, "varyant": 333, "s\u00fcrekli": [333, 335, 338], "tan\u0131t\u0131l": 333, "y\u00fckl\u00fcyor": 333, "pyplot": [333, 334, 335, 336, 340], "plt": [333, 334, 335, 336, 340], "cobylaoptimizer": 333, "admm_optimizer": 333, "admmoptimizer": 333, "uncomment": 333, "full": 333, "plan": 333, "qubos": 333, "alternatives": 333, "simple": 333, "reportedi": 333, "ex6": 333, "cons1": 333, "cons2": 333, "cons3": 333, "\u00e7\u00f6z\u00fcyor": 333, "kullan\u0131yor": [333, 334, 335], "te": 333, "di\u011fer": [333, 334, 335], "g\u00f6sterildik": [333, 338], "\u00e7a\u011fr\u0131labilir": 333, "hem": 333, "kullan\u0131labilir": [333, 338], "sar\u0131l\u0131r": 333, "\u00f6zelle\u015ftiril": 333, "arg\u00fcman": 333, "ayarlanabilir": 333, "1001": 333, "ba\u015flat\u0131l": 333, "gx": 333, "900": 333, "ayarla": [333, 337], "i\u0307lkel": 333, "tolerans\u0131": 333, "etk": 333, "blok": 333, "teore": 333, "yak\u0131nsamas": 333, "garanti": [333, 334], "edilir": 333, "uygula": 333, "ayarlanarak": 333, "\u00e7al\u0131\u015ft\u0131r\u0131labilir": 333, "pratik": [333, 334], "olmaya": 333, "yak\u0131nsar": 333, "admm_params": 333, "0e": 333, "\u00e7a\u011f\u0131rmak": 333, "olu\u015fturulmas": 333, "iyile\u015ftirici": 333, "ayr\u0131": 333, "kurucu": 333, "d\u00f6nd\u00fcr\u00fcle": 333, "convex_optimizer": 333, "yazd\u0131r\u0131labilir": 333, "g\u00f6rselle\u015ftirilebilir": 333, "\u00f6znitelik": 333, "karar": [333, 334, 335], "i\u00e7erir": [333, 335], "istatistik": 333, "eri\u015filebilir": 333, "yak\u0131nsama": 333, "birincil": 333, "cins": 333, "g\u00f6steriyor": [333, 334, 335], "xlabel": [333, 336], "ylabel": [333, 336], "sim\u00fcl": 333, "edil": [333, 335], "\u00e7al\u0131\u015fa": 333, "i\u0307lk": [333, 335, 337], "se\u00e7ilmes": 333, "sim\u00fclasyo": 333, "arka": 333, "u\u00e7": [333, 337], "ayarlan\u0131r": 333, "iyile\u015ftiri\u00e7": 333, "doldurulur": 333, "admm_q": 333, "result_q": 333, "edile": [333, 335], "sunuyor": [333, 335, 337], "yukar\u0131": 333, "clf": 333, "51": 333, "06_examples_max_cut_and_tsp": 334, "m\u00fchendislik": 334, "niceliksel": 334, "pek": 334, "karma\u015f\u0131k": 334, "alma": 334, "stratej": 334, "tan\u0131m": 334, "yat\u0131yor": 334, "kombinatoryal": [334, 335], "sonlu": 334, "say\u0131labilir": 334, "sonsuz": 334, "potansiyel": 334, "aramak": 334, "edilecek": [334, 337], "baz": [334, 335], "kriter": 334, "tan\u0131mlan\u0131r": [334, 336], "denir": 334, "tipik": 334, "mesaf": 334, "ge\u00e7i\u015f": 334, "uzunluk": 334, "a\u011f\u0131rl\u0131k": [334, 337], "s\u00fcres": 334, "malze": 334, "enerji": 334, "t\u00fcket": 334, "nesne": 334, "say\u0131s": [334, 335, 337], "\u00e7\u0131k": 334, "getir": 334, "ver": [334, 335], "fay": 334, "verimlilik": 334, "kapasi": [334, 337], "ilgi": 334, "\u00e7eke": 334, "al\u0131yor": [334, 335], "bilgisayar": [334, 335, 337], "manuel": 334, "haritalanabilecek": 334, "k\u00fcmele": 334, "a\u011f": 334, "bil": 334, "istatistiksel": 334, "fizik": 334, "e\u015fle\u015ftirildik": 334, "anlamak": 334, "etkile\u015f": 334, "bulunabile": 334, "birbir": 334, "etkileyebile": 334, "insa": 334, "olu\u015fa": [334, 337], "d\u00fc\u015f": 334, "birey": 334, "k\u00f6\u015fe": 334, "etkile\u015fim": 334, "kenar": [334, 335, 337], "ba\u011flan": 334, "g\u00f6r\u00fclebilir": 334, "ak\u0131l": 334, "tutarak": 334, "pazarla": 334, "modellemek": 334, "sat": 334, "etkileyecek": 334, "varsay\u0131ld\u0131k": 334, "g\u00fc\u00e7l\u00fc": 334, "verildik": [334, 337], "varsayal": 334, "etki": 334, "atana": 334, "modellenebilir": 334, "\u00fcr": 334, "\u00fccretsiz": 334, "sunulduk": 334, "strateji": 334, "tahm": [334, 335], "\u00fcr\u00fcn": 334, "almas": 334, "hangis": 334, "sormak": 334, "tan": 334, "y\u00f6ns\u00fcz": [334, 337], "ij": [334, 335], "ji": [334, 335], "orijinal": 334, "b\u00f6l\u00fcnmes": 334, "farkl\u0131": [334, 335], "nokta": 334, "birle\u015ftire": [334, 335], "keser": 334, "d\u00fc\u011f\u00fcm": [334, 335, 337], "atayarak": 334, "ki\u015f": 334, "global": 334, "toplam": [334, 337], "indeks": 334, "\u00fczer": 334, "ge\u00e7ilir": 334, "til": 334, "textbf": 334, "basit": [334, 335], "adl\u0131": 334, "bedav": 334, "ald\u0131k": 334, "prensip": 334, "hat": 334, "alacak": 334, "tekab\u00fcl": 334, "ettik": 334, "gelecek": 334, "olmas": 334, "uzant\u0131s": 334, "tekrar": 334, "edilebilecek": 334, "d\u00fck": [334, 335, 337], "kendi": 334, "ta\u015f\u0131ma": 334, "olur": 334, "w_i": 334, "hamiltonye": 334, "e\u015fle\u015ftirmek": 334, "z_i": [334, 335], "atama": 334, "yap\u0131labilir": 334, "\u00f6zde\u011fer": 334, "yaparak": 334, "buluyor": 334, "frac": 334, "z_j": 334, "const": 334, "mathm": 334, "a\u00e7\u0131": [334, 335], "indirmek": 334, "z_iz_j": 334, "k\u00e2r": 334, "olu\u015fturabilir": 334, "kapsa": 334, "sa\u011flaya": 334, "kullan": [334, 335], "zaman": 334, "\u00f6nemli": [334, 335], "art\u0131\u015f": 334, "ol": [334, 335, 338], "klasik": 334, "do\u011fas": [334, 335], "g\u00f6z": [334, 335], "al\u0131nd\u0131k": [334, 335], "kullan\u0131m": 334, "k\u0131yas": 334, "\u00fcstel": 334, "h\u0131zlanma": [334, 335], "edilmedik": 334, "s\u00f6ylemek": 334, "hedef": [334, 335], "\u00f6ne": [334, 335], "h\u0131zland\u0131rabilecek": 334, "yakla\u015f\u0131m": [334, 335], "farhi": [334, 335], "goldstone": [334, 335], "gutmann": [334, 335], "dayana": 334, "yakla\u015f": [334, 335], "sezgisel": [334, 335], "hesapla": [334, 335], "\u00e7er\u00e7eveliyor": 334, "se\u00e7": 334, "verilir": 334, "devres": 334, "uyarlanabilir": 334, "de\u011fi\u015ftirilebilecek": 334, "dene": 334, "yap": 334, "psi": [334, 335], "boldsymbol": [334, 335], "phase": [334, 335], "kap\u0131": 334, "kullan\u0131larak": 334, "d\u00f6nd\u00fcrme": 334, "parametrelendiril": 334, "de\u011ferlendirmek": 334, "langle": [334, 335], "\u00f6rnekleyerek": 334, "bireysel": 334, "bekle": 334, "ara": [334, 335, 336], "ekleyerek": 334, "se\u00e7ile": [334, 337], "boldsymboltthe": 334, "\u00e7evre": 334, "denet": 334, "edilmel": 334, "continue": [334, 335], "reaches": [334, 335], "enough": [334, 335, 338], "cevap": 334, "da\u011f\u0131l\u0131m": 334, "i\u0307yi": 334, "zorluk": [334, 335], "dalga": 334, "se\u00e7im": 334, "olacak": [334, 335, 337], "inan\u0131yor": 334, "dolan\u0131kl\u0131k": 334, "\u00f6rt\u00fc\u015fe": 334, "d\u00fc\u015f\u00fcn\u00fclebilir": 334, "yaln\u0131z": 334, "dola\u015f\u0131kl\u0131k": 334, "ders": 334, "u_": [334, 335], "entang": [334, 335], "tamame": 334, "dola\u015fa": 334, "koleksiyo": [334, 337], "prod_": [334, 335], "theta_": [334, 335, 338], "motivasyo": 334, "vermes": 334, "h\u0131zl\u0131": 334, "yakla\u015fmak": 334, "yararlan\u0131r": 334, "adyabatik": 334, "\u00f6rnekle": 334, "kullanma": 334, "avantaj": 334, "dona": 334, "gerekmemes": 334, "ba\u011flanabilirlik": 334, "olmamas": 334, "z_iz_jz_k": 334, "derecel": 334, "\u00f6rneklenebilir": 334, "tavla": 334, "u\u011fra\u015fmak": 334, "frontiers": 334, "wecker": 334, "hastings": 334, "troyer": 334, "rev": [334, 340], "94": 334, "022309": 334, "2016": 334, "neve": 334, "1703": 334, "06199": 334, "gezgi": [334, 335, 337], "sat\u0131\u00e7": [334, 335, 337], "ayr\u0131n": 334, "packages": [334, 335], "axes": 334, "nx": [334, 337], "library": [334, 335, 336, 340], "twolocal": [334, 335], "maxcut": [334, 340], "tsp": 334, "add_nodes_fro": 334, "arange": 334, "elist": 334, "add_weighted_edges_fro": 334, "spring_layout": [334, 337], "draw_graph": 334, "default_axes": 334, "frameon": 334, "draw_networkx": 334, "node_color": 334, "node_siz": 334, "600": 334, "ax": 334, "edge_labels": 334, "get_edge_attributes": 334, "draw_networkx_edge_labels": 334, "zeros": [334, 335, 336, 340], "temp": 334, "get_edge_da": 334, "combinations": 334, "deals": 334, "071509e": 334, "impractical": 334, "best_cost_bru": 334, "reversedi": [334, 336], "zfill": 334, "xbest_bru": 334, "nbest": 334, "max_cut": 334, "to_quadratic_progra": [334, 337], "x_3": [334, 336, 337], "qubitop": 334, "iizz": 334, "izzi": 334, "ziiz": 334, "zzii": 334, "was": [334, 339, 340], "cast": 334, "makingi": 334, "lowest": 334, "eigenvector": 334, "ee": 334, "compute_minimum_eigenvalue": 334, "sample_most_likely": 334, "energy": [334, 340], "feedback": 334, "loop": [334, 336, 340], "built": [334, 335, 338], "rotations": [334, 335, 338], "123": [334, 336, 337], "aer_simulator_statevector": [334, 336], "300": 334, "num_qubits": [334, 337, 340], "cz": 334, "entanglement": 334, "optimizer_t": [334, 337], "49968614555873": 334, "9054765701293945": 334, "99968614555873": 334, "vqe_optimizer": 334, "notorious": 334, "attention": 334, "scientists": 334, "mathematicians": 334, "centuries": 334, "bearings": 334, "fina": 334, "marketingi": 334, "suggests": 334, "colloquially": 334, "speakingi": 334, "perso": 334, "goes": 334, "city": 334, "sell": 334, "merchandis": 334, "shortest": 334, "path": [334, 335], "wouldu": [334, 336], "visit": 334, "hometown": 334, "he": 334, "doingi": [334, 335], "sales": 334, "least": 334, "derives": 334, "importa": 334, "hardness": 334, "ubiquitous": 334, "equivale": 334, "combinatorial": [334, 335], "aris": 334, "practi\u00e7": 334, "analysis": [334, 336], "hamilto": [334, 337], "19th": 334, "century": 334, "mathematically": 334, "abstractedi": 334, "graphs": 334, "asks": 334, "through": [334, 340], "closedi": [334, 340], "unknown": 334, "finds": 334, "polynomial": [334, 335], "distances": 334, "dista": [334, 335], "describedi": [334, 340], "occurs": 334, "appear": [334, 338], "occur": 334, "amounts": 334, "whenever": 334, "summands": 334, "connectedi": [334, 340], "assumedi": 334, "boundary": 334, "condition": 334, "cycles": 334, "equiv": 334, "fully": [334, 335, 340], "inclu": 334, "needs": 334, "puttingi": 334, "together": [334, 335], "sum_p": 334, "free": [334, 339], "ensur": [334, 338], "respectedi": 334, "minimizingi": 334, "create_random_insta": 334, "to_numpy_matrix": 334, "48": [334, 338, 339], "91": 334, "63": 334, "itertools": 334, "permutations": 334, "brute_force_tsp": 334, "last_best_dista": 334, "1e10": 334, "pre_j": 334, "best_order": 334, "best_dista": 334, "draw_tsp_solution": 334, "g2": 334, "digraph": 334, "add_edge": 334, "edge_color": 334, "font_color": 334, "202": 334, "x_0_0": 334, "x_1_1": 334, "x_1_2": 334, "x_2_1": 334, "x_2_2": 334, "x_0_1": 334, "x_1_0": 334, "x_2_0": 334, "x_0_2": 334, "c2": [334, 337], "c3": [334, 337], "c4": [334, 337], "c5": [334, 337], "qp2qubo": 334, "7581": 334, "1282": 334, "iiiiii": [334, 337], "iiiiiiiz": [334, 337], "iiiiiizii": [334, 337], "1268": 334, "iiiiizii": [334, 337], "iiiiziii": [334, 337], "iiiziiii": [334, 337], "1290": 334, "iiziiiii": [334, 337], "iziiiiii": [334, 337], "ziiiiiii": [334, 337], "606": 334, "iiiiiiizz": [334, 337], "iiiiiiz": [334, 337], "iiiiiizzi": [334, 337], "iiiiiziiz": [334, 337], "iiiiiziz": [334, 337], "iiiiizzii": [334, 337], "iiiizii": [334, 337], "iiiiziiz": [334, 337], "iiiizizii": [334, 337], "iiiizzii": [334, 337], "iiizii": [334, 337], "iiiziiiz": [334, 337], "iiiziizii": [334, 337], "iiizizii": [334, 337], "iiizziii": [334, 337], "iiziii": [334, 337], "iiziiiiz": [334, 337], "iiziiizii": [334, 337], "iiziizii": [334, 337], "iiziziii": [334, 337], "iizziiii": [334, 337], "iziiii": [334, 337], "iziiiiiz": [334, 337], "iziiiizii": [334, 337], "iziiizii": [334, 337], "iziiziii": [334, 337], "iziziiii": [334, 337], "izziiiii": [334, 337], "ziiiii": [334, 337], "ziiiiiiz": [334, 337], "ziiiiizii": [334, 337], "ziiiizii": [334, 337], "ziiiziii": [334, 337], "ziiziiii": [334, 337], "ziziiiii": [334, 337], "zziiiiii": [334, 337], "is_feasip": 334, "tsp_value": 334, "7379": 334, "7326": 334, "024699521837": 334, "199239253997803": 334, "warnings": 334, "filterwarnings": 334, "ignor": 334, "category": 334, "userwarningi": 334, "05": [334, 335, 336, 337, 338, 339], "07_examples_vehicle_routingi": 335, "2015": 335, "y\u0131l": 335, "k\u00fcresel": 335, "8183": 335, "milyar": 335, "abd": 335, "sekt\u00f6r": 335, "hizmet": 335, "sa\u011flay\u0131\u00e7": 335, "ara\u00e7": [335, 337], "kamyon": 335, "konteyner": 335, "gemi": 335, "ge\u00e7": 335, "bo": 335, "kald\u0131k": 335, "g\u00fcn": 335, "boy": 335, "m\u00fc\u015fter": 335, "konum": 335, "vere": 335, "birka\u00e7": 335, "i\u015fletmek": 335, "dikka": [335, 336], "gidile": 335, "mil": 335, "harcana": 335, "indirgemek": 335, "tasarlanacak": 335, "idealiz": 335, "\u015fekillendiriyor": 335, "gutma": 335, "sergiliyor": 335, "g\u00f6sterdik": 335, "i\u015f": 335, "ak\u0131\u015f": 335, "belirley": 335, "normalde": 335, "taban": 335, "teslimat": 335, "yap\u0131lacak": 335, "biz": 335, "mesafe": [335, 337], "seyahat": 335, "s\u00fcre": 335, "hesaplay": 335, "belki": 335, "crow": 335, "flies": 335, "\u00f6klidi": 335, "d\u00fc\u015f\u00fcn\u00fcyor": 335, "rota": [335, 337], "\u00e7al\u0131\u015ft\u0131r\u0131l\u0131r": 335, "\u00e7\u00f6z\u00fc\u00e7": 335, "\u00e7al\u0131\u015ft\u0131rarak": 335, "referans": 335, "ediyor": 335, "k\u0131sme": 335, "hibrit": 335, "\u00e7al\u0131\u015ft\u0131r\u0131yor": 335, "g\u00f6rsel": 335, "\u00e7iz": 335, "kurulum": 335, "y\u00fckleme": [335, 337], "ge\u00e7me": 335, "matematiksel": 335, "konu\u015fur": 335, "rotala": 335, "vrp": 335, "m\u00fc\u015fteri": 335, "d\u00f6ne": 335, "arand\u0131k": 335, "form\u00fclasyon": 335, "geni\u015fle": 335, "form\u00fclasyo": 335, "applega": 335, "2006": 335, "mtz": 335, "tucker": 335, "zeml": 335, "1960": 335, "\u015fekl": [335, 338], "indeksle": 335, "segme": 335, "etkinle\u015ftirir": 335, "geleneksel": 335, "kat": 335, "ba\u011flant\u0131l": 335, "ba\u011flant\u0131s": 335, "sim": 335, "yazar": 335, "delta": 335, "belirtir": 335, "istemci": 335, "tur": 335, "gerekli": [335, 337], "form\u00fcl": 335, "ziyaret": [335, 337], "0i": 335, "j0": 335, "ele": 335, "u_j": 335, "q_j": 335, "neq": 335, "particu": [335, 340], "weighs": 335, "arches": 335, "positiv": [335, 338], "typically": [335, 340], "enfor": 335, "link": 335, "allowedi": 335, "exactly": 335, "links": 335, "tour": 335, "elimination": 335, "yi": 335, "tamsay\u0131l": 335, "milp": 335, "dal": 335, "kes": [335, 337], "notasyo": 335, "topluyor": 335, "bf": 335, "01": 335, "02": 335, "\u00f6l\u00e7eklenir": 335, "hadi": 335, "ili\u015fkil": 335, "g\u00f6sterel": 335, "izleyerek": 335, "\u00f6z\u00e7\u00f6z\u00fcc\u00fc": 335, "varyasyo": 335, "do\u011fa": 335, "zor": [335, 338], "vurguluyor": 335, "faydal": 335, "summarizedi": 335, "transform": 335, "necessary": [335, 336], "depth": [335, 340], "adaptively": 335, "made": 335, "components": 335, "outcome": 335, "individual": 335, "control": 335, "points": 335, "aroundu": 335, "estimatedi": 335, "throughout": 335, "notably": 335, "choi": 335, "wavefunction": 335, "consider": 335, "collection": 335, "entanglingi": 335, "consideringi": 335, "augmentedi": 335, "lagrangian": 335, "ih": 335, "_i": [335, 338], "otimes": 335, "_n": 335, "_0": 335, "2an": 335, "2ak": 335, "stack": 335, "programmingi": 335, "acm": 335, "326": 335, "329": 335, "doi": 335, "1145": 335, "321043": 335, "321046": 335, "bixby": 335, "chv\u00e1tal": 335, "cook": 335, "princeto": 335, "university": 335, "press": 335, "isbn": 335, "978": 335, "691": 335, "12993": 335, "latest": [335, 339], "version_info": 335, "plea": 335, "exceptions": 335, "cplexerror": 335, "warningi": 335, "quantum_info": 335, "randomly": 335, "places": 335, "plane": 335, "__init__": 335, "generate_insta": 335, "1543": [335, 336], "xc": 335, "rand": 335, "yc": 335, "ii": 335, "jj": 335, "classicaloptimizer": 335, "instantia": 335, "compute_allowed_combinations": 335, "factorial": 335, "cplex_solution": 335, "refactoringi": 335, "my_obj": 335, "reshap": 335, "my_ub": 335, "my_lb": 335, "my_ctype": 335, "my_rhs": 335, "my_se": 335, "my_prob": 335, "populatebyrow": 335, "exc": 335, "get_values": 335, "get_objective_value": 335, "prob": [335, 337], "set_se": 335, "set_log_stream": 335, "set_error_stream": 335, "set_warning_stream": 335, "set_results_stream": 335, "rows": 335, "col": 335, "coef": 335, "linear_constraints": 335, "lin_expr": 335, "senses": 335, "classical_optimizer": 335, "fashion": 335, "classical_cost": 335, "missingi": 335, "visualiz": 335, "visualize_solution": 335, "title_str": 335, "figur": [335, 336], "scatter": 335, "200": 335, "annotate": 335, "color": 335, "ms": 335, "grid": 335, "ix": 335, "iy": 335, "arrow": 335, "length_includes_head\u0131": 335, "head_width": 335, "tit": 335, "shows": 335, "star": 335, "arrows": 335, "deriv": 335, "quantumoptimizer": 335, "insi": 335, "binary_representation": 335, "algebra": 335, "construct_proble": 335, "solve_proble": 335, "previous": [335, 337], "minimuneigenoptimizer": 335, "x_sol": 335, "determ": 335, "instance_ve\u00e7": 335, "w_list": 335, "id_n": 335, "im_n_1": 335, "iv_n_1": 335, "iv_n": 335, "neg_iv_n_1": 335, "vn": 335, "axis": 335, "interactions": 335, "kron": 335, "dot": 335, "contribution": 335, "evaluates": 335, "fun": 335, "lamp": [335, 336, 338], "qasm_simulator": [335, 336, 337], "quantum_optimizer": 335, "enco": 335, "sanity": 335, "yields": 335, "binary_cost": 335, "couldu": 335, "verify": 335, "correctness": 335, "unavailap": 335, "nameerror": 335, "cells": 335, "11148115684045": 335, "1114811568365": 335, "simulation": 335, "hours": 335, "loggingi": 335, "what": [335, 340], "quantum_solution": 335, "quantum_cost": 335, "x_quan": 335, "kk": 335, "compariso": 335, "plots": 335, "happens": 335, "coinci": 335, "ilp": 335, "mind": 335, "workingi": 335, "though": 335, "choices": 335, "harder": 335, "turn": 335, "provi": 335, "stronger": 335, "guarantees": 335, "forms": 335, "08_cvar_optimization": 336, "sa\u011flana": 336, "ko\u015fullu": 336, "riske": 336, "maruz": 336, "kurulacak": 336, "g\u00f6steril": 336, "al\u0131na": 336, "\u00e7ek": 336, "g\u00fcve": 336, "d\u00fczey": 336, "ortalamas": 336, "\u00e7ekim": 336, "standart": 336, "beklene": 336, "minimum": 336, "odaklanmak": 336, "manzara": 336, "yumu\u015fatmak": 336, "biraz": 336, "ortala": 336, "uygulamak": 336, "\u00f6d\u00fcnle\u015f": 336, "barkoutsos": [336, 340], "improvingi": [336, 340], "256": [336, 340], "realamplitudes": 336, "pauliexpectation": [336, 340], "cvarexpectation": [336, 340], "linearequalitytopenalty": 336, "execu": 336, "123456": 336, "prepar": 336, "assets": 336, "risk": 336, "budget": 336, "scalingi": [336, 340], "mu": [336, 338], "7313": 336, "9893": 336, "2725": 336, "8750": 336, "7667": 336, "3622": 336, "sigma": [336, 338], "7312": 336, "6233": 336, "4689": 336, "5452": 336, "0082": 336, "3809": 336, "4732": 336, "7538": 336, "4659": 336, "0733": 336, "8945": 336, "4095": 336, "0007": 336, "4301": 336, "5067": 336, "2012": 336, "0922": 336, "6231": 336, "1509": 336, "8992": 336, "random_model": 336, "covaria": 336, "portfolio_optimization": 336, "binary_var_list": 336, "opt_result": 336, "27835": 336, "x_4": [336, 337], "x_5": [336, 337], "further": [336, 340], "linear2penalty": 336, "num_parameters": 336, "backend_na": [336, 340], "qasm": 336, "simlator": 336, "alphas": 336, "50": 336, "confide": 336, "levels": 336, "progress": 336, "objectives": 336, "testedi": 336, "stddev": 336, "cvar_alpha": 336, "cvar_exp": 336, "compute_varia": 336, "fixedi": 336, "pr": 336, "1373": 336, "opt_alg\u0131": 336, "2783500000000174": 336, "figsiz": [336, 340], "linewidth": 336, "label": 336, "2f": 336, "legendi": 336, "loc": 336, "fontsiz": 336, "xlim": 336, "xticks": 336, "yticks": 336, "objective_values": 336, "x_bin": 336, "sb": 336, "ind": 336, "argsort": 336, "val": 336, "probabilitiy": 336, "4f": 336, "00": [336, 339], "0084": 336, "0314": 336, "1278": 336, "09_application_classes": 337, "kullan\u0131\u00e7": 337, "\u00e7e\u015fitli": 337, "deneyebilme": 337, "kapak": 337, "kapsanacak": 337, "bul": 337, "\u00f6k": 337, "dahil": 337, "pozitif": [337, 338], "\u00e7oklu": 337, "b\u00f6l\u00fcnd\u00fck": 337, "paketle": 337, "ayr\u0131k": 337, "t\u0131kla": 337, "y\u00f6nlendirilmemi\u015f": 337, "ind\u00fcklene": 337, "tamamlanmas": 337, "kapasites": 337, "indirilecek": 337, "b\u00f6l\u00fcne": 337, "b\u00f6l\u00fcnme": 337, "kararl\u0131": 337, "hi\u00e7bir": 337, "ba\u011flamad\u0131k": 337, "olmayacak": 337, "ro": 337, "\u015fehri": 337, "y\u00f6nlendirme": 337, "birik": 337, "noktas": 337, "\u00e7izmek": 337, "i\u0307\u015flev": 337, "\u00f6nce": 337, "tan\u0131t\u0131yor": 337, "aktar\u0131yor": 337, "graf": 337, "\u00f6rt\u00fcs": 337, "herhangi": 337, "kaplanacak": 337, "ister": 337, "vertexcover": 337, "qins": [337, 339], "random_regular_graph": 337, "c6": 337, "c7": 337, "c8": 337, "\u00f6z": 337, "bulur": 337, "y\u0131": 337, "uygulayabilir": 337, "meo": [337, 339], "nsolution": 337, "nt": 337, "20122742652893066": 337, "\u00e7anta": 337, "e\u015fya": 337, "kombinasyo": 337, "\u00f6z\u00e7\u00f6z\u00fc\u00e7": 337, "\u00f6\u011fel": 337, "knapsack": 337, "5723414421081543": 337, "\u00fcretile": 337, "26": 337, "104": 337, "208": 337, "156": 337, "416": 337, "312": 337, "624": 337, "234": [337, 338], "520": 337, "468": 337, "780": 337, "936": 337, "832": 337, "1040": 337, "1248": 337, "260": [337, 338], "650": 337, "1560": 337, "2080": 337, "1043": 337, "1564": 337, "2085": 337, "2606": 337, "3127": 337, "2600": 337, "num": 337, "1417": 337, "258": [337, 338], "388": 337, "517": 337, "647": 337, "776": 337, "130": 337, "390": 337, "78": 337, "195": 337, "52": 337, "65": 337, "117": 337, "10_warm_start_qao": 338, "kuadratik": 338, "nbsphinx": 338, "xin": 338, "tsigma": 338, "tx": 338, "k\u00f6\u015fege": 338, "ekleyebilecek": 338, "": 338, "\u00e7\u00f6zmes": 338, "gev\u015fetme": 338, "yar": 338, "gev\u015fetilebilir": 338, "\u00e7\u00f6z\u00fclmes": 338, "hale": 338, "\u0131s\u0131tmas": 338, "marecek": 338, "starts": 338, "__": 338, "modellingi": 338, "imports": 338, "quadratic_program_to_qubo": 338, "relax": 338, "defini": 338, "create_proble": 338, "relax_proble": 338, "change": 338, "relaxed_proble": 338, "deepcopy": 338, "418": 338, "0913": 338, "2415": 338, "4436": 338, "892": 338, "4051": 338, "07978412": 338, "00768914": 338, "11227606": 338, "06842969": 338, "01016793": 338, "00839765": 338, "10922887": 338, "03043424": 338, "0020045": 338, "00670929": 338, "0147937": 338, "985353": 338, "02307313": 338, "05249785": 338, "00904119": 338, "6043817": 338, "03740115": 338, "00945322": 338, "79839634": 338, "07616951": 338, "08464544": 338, "15956824": 338, "03075656": 338, "44910424": 338, "27371876": 338, "04067172": 338, "x4": 338, "0335906": 338, "x5": 338, "21845774": 338, "12173696": 338, "008018": 338, "02683716": 338, "0591748": 338, "970706": 338, "09229252": 338, "2099914": 338, "03616476": 338, "2087634": 338, "1496046": 338, "03781288": 338, "59679268": 338, "30467804": 338, "16929088": 338, "hard": 338, "7689322": 338, "relaxation": 338, "longer": 338, "remain": 338, "848800180000005": 338, "85": 338, "40922044000001": 338, "82756812000001": 338, "10474512000002": 338, "33779216000002": 338, "34487328000002": 338, "42": 338, "907689680000004": 338, "25672692": 338, "37044588": 338, "40530104000001": 338, "43763868000002": 338, "659937940000006": 338, "47075640000001": 338, "16847248000002": 338, "41462864000002": 338, "43": 338, "89799534000001": 338, "52806848000002": 338, "34065100000001": 338, "286024620000006": 338, "68314192000001": 338, "858522820000005": 338, "259": 338, "55339164000003": 338, "22669164": 338, "262": 338, "37689164": 338, "57899164": 338, "267": 338, "02739164": 338, "54049164": 338, "384": 338, "20308746000006": 338, "dealingi": 338, "012055025682855": 338, "1752499576180142": 338, "4803888163988428e": 338, "07": 338, "9709053264087596": 338, "7384168677494174": 338, "9999999916475085": 338, "14438904470168756": 338, "c_stars": 338, "shown": 338, "12345": 338, "768932200000002": 338, "compare": [338, 339], "phi": 338, "bigotimes_": 338, "r_y": 338, "angle": 338, "arcs": 338, "depends": 338, "thetas": 338, "c_star": 338, "init_q\u00e7": 338, "idx": [338, 340], "mpl": [338, 340], "h_": 338, "ws": 338, "pmatrix": 338, "2c_i": 338, "c_i": 338, "multipliedi": 338, "exponentiatedi": 338, "\u03b2": 338, "ws_mixer": 338, "ws_qaoa_mes": 338, "ws_qao": 338, "ws_qaoa_result": 338, "giv": 338, "look": 338, "observe": 338, "much": 338, "higher": 338, "format_qaoa_samples": 338, "max_le": 338, "qaoa_res": 338, "sortedi": 338, "3f": 338, "1e2": 338, "1f": 338, "001110": 338, "769": 338, "011010": 338, "744": 338, "001011": 338, "671": 338, "101010": 338, "626": 338, "010110": 338, "100110": 338, "953": 338, "000111": 338, "349": 338, "110010": 338, "410": 338, "010011": 338, "013": 338, "100011": 338, "559": 338, "namedi": 338, "warmstartqaoaoptimizer": 338, "illustratedi": 338, "controlledi": 338, "ws_result": 338, "23": [338, 340], "page": [339, 340], "11_using_classical_optimization_solvers_and_models": 339, "apis": 339, "save": 339, "dependent": 339, "limitations": 339, "july": 339, "2021": [339, 340], "pages": 339, "cplex_result": 339, "gurobi_result": 339, "restrictedi": 339, "production": 339, "expires": 339, "2023": 339, "threads": 339, "timelimit": 339, "identifier": 339, "54982fbec": 339, "cpxparam_read_datacheck": 339, "cpxparam_threads": 339, "cpxparam_timelimit": 339, "10000000000000001": 339, "incumbent": 339, "000000": 339, "sec": 339, "ticks": 339, "processingi": 339, "amp": [339, 340], "sequential": 339, "branch": 339, "aer_simulator": 339, "ndisplay": 339, "421": 339, "103": 339, "033": 339, "038": 339, "docplex_model": 339, "dvar": 339, "gp": 339, "gurobipy_model": 339, "addvar": 339, "vtype": 339, "grb": 339, "setobjectiv": 339, "addconstr": 339, "quadexpr": 339, "r0": 339, "linexpr": 339, "identical": 339, "from_gurobipy": 339, "docpblex": 339, "qp2": 339, "too": 339, "to_gurobipy": 339, "to_docplex_mp": 339, "gmod": 339, "dmod": 339, "nconvert": 339, "ind_modu": 339, "add_indicator": 339, "lc1": 339, "translatingi": 339, "natively": 339, "ncplex": 339, "12_qaoa_runt": 340, "permits": 340, "entir": 340, "discuss": 340, "load_account": 340, "get_provider": 340, "hub": 340, "group": 340, "inspect": 340, "know": 340, "expectingi": 340, "investiga": 340, "program_idi": 340, "qaoa_progra": 340, "parameternamespa\u00e7": 340, "description": 340, "optimizat": 340, "use_initia": 340, "use_pulse_": 340, "measureme": 340, "tensoredi": 340, "measurements": 340, "repetitions": 340, "labeledi": 340, "aux_operat": 340, "paulisumop": 340, "initial_po": 340, "smallest": 340, "trying": 340, "calibration": 340, "rate": 340, "use_swap_s": 340, "now": 340, "elabora": 340, "far": 340, "argument": 340, "wish": 340, "zz": 340, "from_list": 340, "noi": 340, "hardware": 340, "layers": 340, "gamma": 340, "gamma_1": 340, "beta_1": 340, "gamma_2": 340, "beta_2": 340, "twi\u00e7": 340, "gather": 340, "retainedi": 340, "employ": 340, "tensoredmeasfitter": 340, "dedicatedi": 340, "commutativ": 340, "collects": 340, "blocks": 340, "car": 340, "kak": 340, "rzxgate": 340, "scaledi": 340, "cross": 340, "resona": 340, "pulses": 340, "kl": 340, "nanni\u00e7": 340, "robert": 340, "tavernelli": 340, "earnest": 340, "tornow": 340, "research": 340, "043088": 340, "fiv": 340, "seamlessly": 340, "fits": 340, "workflow": 340, "direct": 340, "replacement": 340, "discussedi": 340, "job_monitor": 340, "helps": 340, "noisy": 340, "environments": 340, "programm": 340, "ibmq_qasm_simulator": 340, "runtime_inputs": 340, "backends": 340, "optimizingi": 340, "echoedi": 340, "successfully": 340, "job_idi": 340, "bob": 340, "c9qh9mekcirf2adkkhvg\u0131": 340, "jobstatus": 340, "retriev": 340, "consistency": 340, "accessip": 340, "interest": 340, "measuredi": 340, "assume": 340, "collections": 340, "defaultdict": 340, "op_adj_mat": 340, "extract": 340, "adj_mat": 340, "coeff": 340, "primitiv": 340, "to_list": 340, "get_cost": 340, "bit_str": 340, "bit": 340, "get_cut_distribution": 340, "state_results": 340, "vals": 340, "cut_vals": 340, "axs": 340, "subplots": 340, "optimizer_history": 340, "bar": 340, "set_xlabel": 340, "set_ylabel": 340, "implementedi": 340, "leverag\u0131": 340, "methodology": 340, "applicap": 340, "systems": 340, "completeness": 340, "manager": 340, "passmanager": 340, "standard_gates": 340, "equivalence_library": 340, "standardequivalencelibrary": 340, "std_eqlip": 340, "passes": 340, "collect2qblocks": 340, "consolidateblocks": 340, "unrollcustomdefinitions": 340, "basistranslator": 340, "optimize1qgatesdecomposition": 340, "builders": 340, "rzxcalibrationbuildernoecho": 340, "echo_rzx_weyl_decomposition": 340, "echorzxweyldecomposition": 340, "mock": 340, "fakebele": 340, "knowledge": 340, "enabledi": 340, "attachedi": 340, "schedules": 340, "calibratedi": 340, "cnot": 340, "inst_map": 340, "instruction_schedule_map": 340, "channel_map": 340, "qubit_channel_mappingi": 340, "rzx_basis": 340, "rzx": 340, "sx": 340, "pulse_efficient": 340, "consolida": 340, "consecutiv": 340, "operations": 340, "basis_gates": 340, "rxx": 340, "rewri": 340, "weyl": 340, "decomposedi": 340, "attach": 340, "simplify": 340, "demonstra": 340, "arbitrary": 340, "circ": 340, "cx": 340, "rx": 340, "fold": 340, "cffbb84qiskit": 340, "577533721923828fri": 340, "31": 340}, "objects": {"": [[0, 0, 0, "-", "qiskit_optimization"]], "qiskit_optimization": [[10, 1, 1, "", "INFINITY"], [11, 2, 1, "", "QiskitOptimizationError"], [12, 4, 1, "", "QuadraticProgram"], [1, 0, 0, "-", "algorithms"], [2, 0, 0, "-", "applications"], [3, 0, 0, "-", "converters"], [4, 0, 0, "-", "problems"], [5, 0, 0, "-", "runtime"], [6, 0, 0, "-", "translators"]], "qiskit_optimization.QiskitOptimizationError": [[11, 3, 1, "", "with_traceback"]], "qiskit_optimization.QuadraticProgram": [[13, 3, 1, "", "binary_var"], [14, 3, 1, "", "binary_var_dict"], [15, 3, 1, "", "binary_var_list"], [16, 3, 1, "", "clear"], [17, 3, 1, "", "continuous_var"], [18, 3, 1, "", "continuous_var_dict"], [19, 3, 1, "", "continuous_var_list"], [20, 3, 1, "", "export_as_lp_string"], [21, 3, 1, "", "from_ising"], [22, 3, 1, "", "get_feasibility_info"], [23, 3, 1, "", "get_linear_constraint"], [24, 3, 1, "", "get_num_binary_vars"], [25, 3, 1, "", "get_num_continuous_vars"], [26, 3, 1, "", "get_num_integer_vars"], [27, 3, 1, "", "get_num_linear_constraints"], [28, 3, 1, "", "get_num_quadratic_constraints"], [29, 3, 1, "", "get_num_vars"], [30, 3, 1, "", "get_quadratic_constraint"], [31, 3, 1, "", "get_variable"], [32, 3, 1, "", "integer_var"], [33, 3, 1, "", "integer_var_dict"], [34, 3, 1, "", "integer_var_list"], [35, 3, 1, "", "is_feasible"], [36, 3, 1, "", "linear_constraint"], [37, 5, 1, "", "linear_constraints"], [38, 5, 1, "", "linear_constraints_index"], [39, 3, 1, "", "maximize"], [40, 3, 1, "", "minimize"], [41, 5, 1, "", "name"], [42, 5, 1, "", "objective"], [43, 3, 1, "", "prettyprint"], [44, 3, 1, "", "quadratic_constraint"], [45, 5, 1, "", "quadratic_constraints"], [46, 5, 1, "", "quadratic_constraints_index"], [47, 3, 1, "", "read_from_lp_file"], [48, 3, 1, "", "remove_linear_constraint"], [49, 3, 1, "", "remove_quadratic_constraint"], [50, 5, 1, "", "status"], [51, 3, 1, "", "substitute_variables"], [52, 3, 1, "", "to_ising"], [53, 5, 1, "", "variables"], [54, 5, 1, "", "variables_index"], [55, 3, 1, "", "write_to_lp_file"]], "qiskit_optimization.algorithms": [[56, 4, 1, "", "ADMMOptimizationResult"], [58, 4, 1, "", "ADMMOptimizer"], [62, 4, 1, "", "ADMMParameters"], [63, 4, 1, "", "ADMMState"], [64, 4, 1, "", "BaseAggregator"], [66, 4, 1, "", "CobylaOptimizer"], [69, 4, 1, "", "CplexOptimizer"], [75, 4, 1, "", "GoemansWilliamsonOptimizationResult"], [77, 4, 1, "", "GoemansWilliamsonOptimizer"], [81, 4, 1, "", "GroverOptimizationResult"], [88, 4, 1, "", "GroverOptimizer"], [92, 4, 1, "", "GurobiOptimizer"], [97, 4, 1, "", "IntermediateResult"], [101, 4, 1, "", "MeanAggregator"], [103, 4, 1, "", "MinimumEigenOptimizationResult"], [106, 4, 1, "", "MinimumEigenOptimizer"], [110, 4, 1, "", "MultiStartOptimizer"], [114, 4, 1, "", "OptimizationAlgorithm"], [118, 4, 1, "", "OptimizationResult"], [130, 4, 1, "", "OptimizationResultStatus"], [134, 4, 1, "", "RecursiveMinimumEigenOptimizationResult"], [137, 4, 1, "", "RecursiveMinimumEigenOptimizer"], [140, 4, 1, "", "SlsqpOptimizationResult"], [145, 4, 1, "", "SlsqpOptimizer"], [148, 4, 1, "", "SolutionSample"], [153, 4, 1, "", "WarmStartQAOAFactory"], [157, 4, 1, "", "WarmStartQAOAOptimizer"]], "qiskit_optimization.algorithms.ADMMOptimizationResult": [[57, 5, 1, "", "state"]], "qiskit_optimization.algorithms.ADMMOptimizer": [[59, 3, 1, "", "get_compatibility_msg"], [60, 5, 1, "", "parameters"], [61, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.BaseAggregator": [[65, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.CobylaOptimizer": [[67, 3, 1, "", "get_compatibility_msg"], [68, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.CplexOptimizer": [[70, 5, 1, "", "cplex_parameters"], [71, 5, 1, "", "disp"], [72, 3, 1, "", "get_compatibility_msg"], [73, 3, 1, "", "is_cplex_installed"], [74, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult": [[76, 5, 1, "", "sdp_solution"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer": [[78, 3, 1, "", "get_compatibility_msg"], [79, 3, 1, "", "max_cut_value"], [80, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GroverOptimizationResult": [[82, 5, 1, "", "intermediate_fval"], [83, 5, 1, "", "n_input_qubits"], [84, 5, 1, "", "n_output_qubits"], [85, 5, 1, "", "operation_counts"], [86, 5, 1, "", "raw_samples"], [87, 5, 1, "", "threshold"]], "qiskit_optimization.algorithms.GroverOptimizer": [[89, 3, 1, "", "get_compatibility_msg"], [90, 5, 1, "", "quantum_instance"], [91, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.GurobiOptimizer": [[93, 5, 1, "", "disp"], [94, 3, 1, "", "get_compatibility_msg"], [95, 3, 1, "", "is_gurobi_installed"], [96, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.IntermediateResult": [[98, 6, 1, "", "ALL_ITERATIONS"], [99, 6, 1, "", "LAST_ITERATION"], [100, 6, 1, "", "NO_ITERATIONS"]], "qiskit_optimization.algorithms.MeanAggregator": [[102, 3, 1, "", "aggregate"]], "qiskit_optimization.algorithms.MinimumEigenOptimizationResult": [[104, 5, 1, "", "min_eigen_solver_result"], [105, 5, 1, "", "raw_samples"]], "qiskit_optimization.algorithms.MinimumEigenOptimizer": [[107, 3, 1, "", "get_compatibility_msg"], [108, 5, 1, "", "min_eigen_solver"], [109, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.MultiStartOptimizer": [[111, 5, 1, "", "clip"], [112, 3, 1, "", "multi_start_solve"], [113, 5, 1, "", "trials"]], "qiskit_optimization.algorithms.OptimizationAlgorithm": [[115, 3, 1, "", "get_compatibility_msg"], [116, 3, 1, "", "is_compatible"], [117, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.OptimizationResult": [[119, 3, 1, "", "__getitem__"], [120, 5, 1, "", "fval"], [121, 3, 1, "", "get_correlations"], [122, 3, 1, "", "prettyprint"], [123, 5, 1, "", "raw_results"], [124, 5, 1, "", "samples"], [125, 5, 1, "", "status"], [126, 5, 1, "", "variable_names"], [127, 5, 1, "", "variables"], [128, 5, 1, "", "variables_dict"], [129, 5, 1, "", "x"]], "qiskit_optimization.algorithms.OptimizationResultStatus": [[131, 6, 1, "", "FAILURE"], [132, 6, 1, "", "INFEASIBLE"], [133, 6, 1, "", "SUCCESS"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult": [[135, 5, 1, "", "history"], [136, 5, 1, "", "replacements"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer": [[138, 3, 1, "", "get_compatibility_msg"], [139, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SlsqpOptimizationResult": [[141, 5, 1, "", "fx"], [142, 5, 1, "", "imode"], [143, 5, 1, "", "its"], [144, 5, 1, "", "smode"]], "qiskit_optimization.algorithms.SlsqpOptimizer": [[146, 3, 1, "", "get_compatibility_msg"], [147, 3, 1, "", "solve"]], "qiskit_optimization.algorithms.SolutionSample": [[149, 6, 1, "", "fval"], [150, 6, 1, "", "probability"], [151, 6, 1, "", "status"], [152, 6, 1, "", "x"]], "qiskit_optimization.algorithms.WarmStartQAOAFactory": [[154, 3, 1, "", "create_initial_state"], [155, 3, 1, "", "create_initial_variables"], [156, 3, 1, "", "create_mixer"]], "qiskit_optimization.algorithms.WarmStartQAOAOptimizer": [[158, 3, 1, "", "solve"]], "qiskit_optimization.applications": [[159, 4, 1, "", "BinPacking"], [163, 4, 1, "", "Clique"], [167, 4, 1, "", "ExactCover"], [170, 4, 1, "", "GraphOptimizationApplication"], [174, 4, 1, "", "GraphPartition"], [177, 4, 1, "", "Knapsack"], [181, 4, 1, "", "Maxcut"], [186, 4, 1, "", "NumberPartition"], [189, 4, 1, "", "OptimizationApplication"], [193, 4, 1, "", "SKModel"], [199, 4, 1, "", "SetPacking"], [202, 4, 1, "", "StableSet"], [205, 4, 1, "", "Tsp"], [211, 4, 1, "", "VehicleRouting"], [217, 4, 1, "", "VertexCover"]], "qiskit_optimization.applications.BinPacking": [[160, 3, 1, "", "get_figure"], [161, 3, 1, "", "interpret"], [162, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Clique": [[164, 3, 1, "", "interpret"], [165, 5, 1, "", "size"], [166, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.ExactCover": [[168, 3, 1, "", "interpret"], [169, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphOptimizationApplication": [[171, 3, 1, "", "draw"], [172, 5, 1, "", "graph"], [173, 3, 1, "", "random_graph"]], "qiskit_optimization.applications.GraphPartition": [[175, 3, 1, "", "interpret"], [176, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Knapsack": [[178, 3, 1, "", "interpret"], [179, 5, 1, "", "max_weight"], [180, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Maxcut": [[182, 3, 1, "", "get_gset_result"], [183, 3, 1, "", "interpret"], [184, 3, 1, "", "parse_gset_format"], [185, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.NumberPartition": [[187, 3, 1, "", "interpret"], [188, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.OptimizationApplication": [[190, 3, 1, "", "interpret"], [191, 3, 1, "", "sample_most_likely"], [192, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SKModel": [[194, 3, 1, "", "disorder"], [195, 5, 1, "", "graph"], [196, 3, 1, "", "interpret"], [197, 5, 1, "", "num_sites"], [198, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SetPacking": [[200, 3, 1, "", "interpret"], [201, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.StableSet": [[203, 3, 1, "", "interpret"], [204, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Tsp": [[206, 3, 1, "", "create_random_instance"], [207, 3, 1, "", "interpret"], [208, 3, 1, "", "parse_tsplib_format"], [209, 3, 1, "", "to_quadratic_program"], [210, 3, 1, "", "tsp_value"]], "qiskit_optimization.applications.VehicleRouting": [[212, 3, 1, "", "create_random_instance"], [213, 5, 1, "", "depot"], [214, 3, 1, "", "interpret"], [215, 5, 1, "", "num_vehicles"], [216, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.VertexCover": [[218, 3, 1, "", "interpret"], [219, 3, 1, "", "to_quadratic_program"]], "qiskit_optimization.converters": [[220, 4, 1, "", "InequalityToEquality"], [224, 4, 1, "", "IntegerToBinary"], [227, 4, 1, "", "LinearEqualityToPenalty"], [231, 4, 1, "", "LinearInequalityToPenalty"], [235, 4, 1, "", "MaximizeToMinimize"], [236, 4, 1, "", "MinimizeToMaximize"], [237, 4, 1, "", "QuadraticProgramConverter"], [240, 4, 1, "", "QuadraticProgramToQubo"]], "qiskit_optimization.converters.InequalityToEquality": [[221, 3, 1, "", "convert"], [222, 3, 1, "", "interpret"], [223, 5, 1, "", "mode"]], "qiskit_optimization.converters.IntegerToBinary": [[225, 3, 1, "", "convert"], [226, 3, 1, "", "interpret"]], "qiskit_optimization.converters.LinearEqualityToPenalty": [[228, 3, 1, "", "convert"], [229, 3, 1, "", "interpret"], [230, 5, 1, "", "penalty"]], "qiskit_optimization.converters.LinearInequalityToPenalty": [[232, 3, 1, "", "convert"], [233, 3, 1, "", "interpret"], [234, 5, 1, "", "penalty"]], "qiskit_optimization.converters.QuadraticProgramConverter": [[238, 3, 1, "", "convert"], [239, 3, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramToQubo": [[241, 3, 1, "", "convert"], [242, 3, 1, "", "get_compatibility_msg"], [243, 3, 1, "", "interpret"], [244, 3, 1, "", "is_compatible"], [245, 5, 1, "", "penalty"]], "qiskit_optimization.problems": [[246, 4, 1, "", "Constraint"], [251, 4, 1, "", "LinearConstraint"], [254, 4, 1, "", "LinearExpression"], [262, 4, 1, "", "QuadraticConstraint"], [266, 4, 1, "", "QuadraticExpression"], [274, 4, 1, "", "QuadraticObjective"], [281, 4, 1, "", "QuadraticProgramElement"], [283, 4, 1, "", "Variable"]], "qiskit_optimization.problems.Constraint": [[247, 3, 1, "", "evaluate"], [248, 5, 1, "", "name"], [249, 5, 1, "", "rhs"], [250, 5, 1, "", "sense"]], "qiskit_optimization.problems.LinearConstraint": [[252, 3, 1, "", "evaluate"], [253, 5, 1, "", "linear"]], "qiskit_optimization.problems.LinearExpression": [[255, 3, 1, "", "__getitem__"], [256, 5, 1, "", "bounds"], [257, 5, 1, "", "coefficients"], [258, 3, 1, "", "evaluate"], [259, 3, 1, "", "evaluate_gradient"], [260, 3, 1, "", "to_array"], [261, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticConstraint": [[263, 3, 1, "", "evaluate"], [264, 5, 1, "", "linear"], [265, 5, 1, "", "quadratic"]], "qiskit_optimization.problems.QuadraticExpression": [[267, 3, 1, "", "__getitem__"], [268, 5, 1, "", "bounds"], [269, 5, 1, "", "coefficients"], [270, 3, 1, "", "evaluate"], [271, 3, 1, "", "evaluate_gradient"], [272, 3, 1, "", "to_array"], [273, 3, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticObjective": [[275, 5, 1, "", "constant"], [276, 3, 1, "", "evaluate"], [277, 3, 1, "", "evaluate_gradient"], [278, 5, 1, "", "linear"], [279, 5, 1, "", "quadratic"], [280, 5, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticProgramElement": [[282, 5, 1, "", "quadratic_program"]], "qiskit_optimization.problems.Variable": [[284, 3, 1, "", "as_tuple"], [285, 5, 1, "", "lowerbound"], [286, 5, 1, "", "name"], [287, 5, 1, "", "upperbound"], [288, 5, 1, "", "vartype"]], "qiskit_optimization.runtime": [[289, 4, 1, "", "QAOAClient"], [300, 4, 1, "", "QAOAProgram"], [302, 4, 1, "", "VQEClient"], [316, 4, 1, "", "VQEProgram"], [319, 4, 1, "", "VQEProgramResult"], [320, 4, 1, "", "VQERuntimeResult"]], "qiskit_optimization.runtime.QAOAClient": [[290, 5, 1, "", "alpha"], [291, 5, 1, "", "ansatz"], [292, 5, 1, "", "initial_state"], [293, 5, 1, "", "mixer"], [294, 5, 1, "", "optimization_level"], [295, 3, 1, "", "program_inputs"], [296, 5, 1, "", "reps"], [297, 5, 1, "", "use_initial_mapping"], [298, 5, 1, "", "use_pulse_efficient"], [299, 5, 1, "", "use_swap_strategies"]], "qiskit_optimization.runtime.QAOAProgram": [[301, 3, 1, "", "compute_minimum_eigenvalue"]], "qiskit_optimization.runtime.VQEClient": [[303, 5, 1, "", "ansatz"], [304, 5, 1, "", "backend"], [305, 5, 1, "", "callback"], [306, 3, 1, "", "compute_minimum_eigenvalue"], [307, 5, 1, "", "initial_point"], [308, 5, 1, "", "measurement_error_mitigation"], [309, 5, 1, "", "optimizer"], [310, 5, 1, "", "program_id"], [311, 3, 1, "", "program_inputs"], [312, 5, 1, "", "provider"], [313, 5, 1, "", "shots"], [314, 5, 1, "", "store_intermediate"], [315, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQEProgram": [[317, 3, 1, "", "compute_minimum_eigenvalue"], [318, 3, 1, "", "supports_aux_operators"]], "qiskit_optimization.runtime.VQERuntimeResult": [[321, 5, 1, "", "job_id"], [322, 5, 1, "", "optimizer_history"]], "qiskit_optimization.translators": [[323, 7, 1, "", "from_docplex_mp"], [324, 7, 1, "", "from_gurobipy"], [325, 7, 1, "", "from_ising"], [326, 7, 1, "", "to_docplex_mp"], [327, 7, 1, "", "to_gurobipy"], [328, 7, 1, "", "to_ising"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:exception", "3": "py:method", "4": "py:class", "5": "py:property", "6": "py:attribute", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python mod\u00fcl\u00fc"], "1": ["py", "data", "Python verisi"], "2": ["py", "exception", "Python \u00f6zel durum"], "3": ["py", "method", "Python y\u00f6ntemi"], "4": ["py", "class", "Python s\u0131n\u0131f\u0131"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python \u00f6zniteli\u011fi"], "7": ["py", "function", "Python i\u015flevi"]}, "titleterms": {"qiskit": [0, 5, 8, 339, 340], "optimization": [0, 1, 2, 3, 4, 5, 8, 336, 339, 340], "api": 0, "refere": 0, "s": 0, "module": 0, "qiskit_optimization": [0, 1, 2, 3, 4, 5, 6], "submodules": 0, "algorithms": 1, "base": [1, 2, 3], "classes": [1, 2], "for": [1, 2, 3], "and": [1, 334, 339], "results": 1, "applications": 2, "converters": 3, "class": 3, "problems": 4, "quadrati\u00e7": [4, 6, 265, 279, 329], "progra": [4, 6, 340], "runt": [5, 340], "translators": [6, 339], "ba\u015f": 7, "kurul": 7, "opsiyonel": 7, "y\u00fckleme": 7, "ba\u015flama": 7, "haz\u0131r": 7, "m\u0131": 7, "overview": 8, "next": 8, "steps": 8, "relea": 9, "notes": 9, "infinity": 10, "qiskitoptimizationerror": 11, "quadraticprogra": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 329, 339], "binary_var": 13, "binary_var_dict": 14, "binary_var_list": 15, "clear": 16, "continuous_var": 17, "continuous_var_dict": 18, "continuous_var_list": 19, "export_as_lp_stringi": 20, "from_isingi": [21, 325], "get_feasibility_info": 22, "get_linear_constraint": 23, "get_num_binary_vars": 24, "get_num_continuous_vars": 25, "get_num_integer_vars": 26, "get_num_linear_constraints": 27, "get_num_quadratic_constraints": 28, "get_num_vars": 29, "get_quadratic_constraint": 30, "get_variap": 31, "integer_var": 32, "integer_var_dict": 33, "integer_var_list": 34, "is_feasip": 35, "linear_constraint": 36, "linear_constraints": 37, "linear_constraints_index": 38, "max": [39, 334], "min": 40, "name": [41, 248, 286], "objectiv": 42, "prettyprint": [43, 122], "quadratic_constraint": 44, "quadratic_constraints": 45, "quadratic_constraints_index": 46, "read_from_lp_fil": 47, "remove_linear_constraint": 48, "remove_quadratic_constraint": 49, "status": [50, 125, 151], "substitute_variables": 51, "to_isingi": [52, 328], "variables": [53, 127], "variables_index": 54, "write_to_lp_fil": 55, "admmoptimizationresult": [56, 57], "state": 57, "admmoptimizer": [58, 59, 60, 61], "get_compatibility_msgi": [59, 67, 72, 78, 89, 94, 107, 115, 138, 146, 242], "parameters": 60, "solve": [61, 68, 74, 80, 91, 96, 109, 117, 139, 147, 158], "admmparameters": 62, "admmstate": 63, "baseaggregator": [64, 65], "aggrega": [65, 102], "cobylaoptimizer": [66, 67, 68], "cplexoptimizer": [69, 70, 71, 72, 73, 74], "cplex_parameters": 70, "disp": [71, 93], "is_cplex_installedi": 73, "goemanswilliamsonoptimizationresult": [75, 76], "sdp_solution": 76, "goemanswilliamsonoptimizer": [77, 78, 79, 80], "max_cut_value": 79, "groveroptimizationresult": [81, 82, 83, 84, 85, 86, 87], "intermediate_fval": 82, "n_input_qubits": 83, "n_output_qubits": 84, "operation_counts": 85, "raw_samples": [86, 105], "thresholdu": 87, "groveroptimizer": [88, 89, 90, 91], "quantum_insta": 90, "gurobioptimizer": [92, 93, 94, 95, 96], "is_gurobi_installedi": 95, "intermediateresult": [97, 98, 99, 100], "all_iterations": 98, "last_iteration": 99, "no_iterations": 100, "meanaggregator": [101, 102], "minimumeigenoptimizationresult": [103, 104, 105], "min_eigen_solver_result": 104, "minimumeigenoptimizer": [106, 107, 108, 109, 331], "min_eigen_solver": 108, "multistartoptimizer": [110, 111, 112, 113], "clip": 111, "multi_start_solve": 112, "trials": 113, "optimizationalgorith": [114, 115, 116, 117], "is_compatip": [116, 244], "optimizationresult": [118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "__getitem__": [119, 255, 267], "fval": [120, 149], "get_correlations": 121, "raw_results": 123, "samples": [124, 331], "variable_names": 126, "variables_dict": 128, "x": [129, 152], "optimizationresultstatus": [130, 131, 132, 133], "failur": 131, "infeasip": 132, "success": 133, "recursiveminimumeigenoptimizationresult": [134, 135, 136], "history": 135, "replacements": 136, "recursiveminimumeigenoptimizer": [137, 138, 139, 331], "slsqpoptimizationresult": [140, 141, 142, 143, 144], "fx": 141, "imo": 142, "its": 143, "smode": 144, "slsqpoptimizer": [145, 146, 147], "solutionsample": [148, 149, 150, 151, 152], "probability": 150, "warmstartqaoafactory": [153, 154, 155, 156], "create_initial_sta": 154, "create_initial_variables": 155, "create_mixer": 156, "warmstartqaoaoptimizer": [157, 158], "binpackingi": [159, 160, 161, 162], "get_figur": 160, "interpret": [161, 164, 168, 175, 178, 183, 187, 190, 196, 200, 203, 207, 214, 218, 222, 226, 229, 233, 239, 243], "to_quadratic_progra": [162, 166, 169, 176, 180, 185, 188, 192, 198, 201, 204, 209, 216, 219], "clique": [163, 164, 165, 166], "siz": 165, "exactcover": [167, 168, 169], "graphoptimizationapplication": [170, 171, 172, 173], "draw": 171, "graph": [172, 195], "random_graph": 173, "graphpartition": [174, 175, 176], "knapsack": [177, 178, 179, 180], "max_weight": 179, "maxcut": [181, 182, 183, 184, 185], "get_gset_result": 182, "parse_gset_format": 184, "numberpartition": [186, 187, 188], "optimizationapplication": [189, 190, 191, 192], "sample_most_likely": 191, "skmodel": [193, 194, 195, 196, 197, 198], "disorder": 194, "num_sites": 197, "setpackingi": [199, 200, 201], "stableset": [202, 203, 204], "tsp": [205, 206, 207, 208, 209, 210], "create_random_insta": [206, 212], "parse_tsplib_format": 208, "tsp_value": 210, "vehicleroutingi": [211, 212, 213, 214, 215, 216], "depot": 213, "num_vehicles": 215, "vertexcover": [217, 218, 219], "inequalitytoequality": [220, 221, 222, 223, 330], "convert": [221, 225, 228, 232, 238, 241], "mode": 223, "integertobinary": [224, 225, 226, 330], "linearequalitytopenalty": [227, 228, 229, 230, 330], "penalty": [230, 234, 245], "linearinequalitytopenalty": [231, 232, 233, 234], "maximizetomin": 235, "minimizetomax": 236, "quadraticprogramconverter": [237, 238, 239], "quadraticprogramtoqubo": [240, 241, 242, 243, 244, 245], "constraint": [246, 247, 248, 249, 250], "evalua": [247, 252, 258, 263, 270, 276], "rhs": 249, "se": [250, 280], "linearconstraint": [251, 252, 253], "linear": [253, 264, 278], "linearexpression": [254, 255, 256, 257, 258, 259, 260, 261], "bounds": [256, 268], "coefficients": [257, 269], "evaluate_gradient": [259, 271, 277], "to_array": [260, 272], "to_dict": [261, 273], "quadraticconstraint": [262, 263, 264, 265], "quadraticexpression": [266, 267, 268, 269, 270, 271, 272, 273], "quadraticobjectiv": [274, 275, 276, 277, 278, 279, 280], "constant": 275, "quadraticprogramelement": [281, 282], "quadratic_progra": 282, "variap": [283, 284, 285, 286, 287, 288], "as_tuple": 284, "lowerboundu": 285, "upperboundu": 287, "vartype": 288, "qaoaclient": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "alpha": 290, "ansatz": [291, 303], "initial_sta": 292, "mixer": 293, "optimization_level": 294, "program_inputs": [295, 311], "reps": 296, "use_initial_mappingi": 297, "use_pulse_efficient": 298, "use_swap_strategies": 299, "qaoaprogra": [300, 301], "compute_minimum_eigenvalue": [301, 306, 317], "vqeclient": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "backendi": 304, "callback": 305, "initial_point": 307, "measurement_error_mitigation": 308, "optimizer": 309, "program_idi": 310, "provider": 312, "shots": 313, "store_intermedia": 314, "supports_aux_operators": [315, 318], "vqeprogra": [316, 317, 318], "vqeprogramresult": 319, "vqeruntimeresult": [320, 321, 322], "job_idi": 321, "optimizer_history": 322, "from_docplex_mp": 323, "from_gurobipy": 324, "to_docplex_mp": 326, "to_gurobipy": 327, "programs": 329, "introduction": [329, 331, 332, 333, 334, 336, 337, 338], "loadingi": 329, "a": [329, 331, 340], "from": [329, 335], "an": 329, "lp": 329, "fil": 329, "docplex": [329, 339], "model": [329, 335], "do\u011fru": [329, 332], "olu\u015fturulmas": 329, "do\u011frusal": 329, "ve": 329, "karesel": 329, "k\u0131s\u0131tlama": 329, "ekle": 329, "kald\u0131rma": 329, "de\u011fi\u015fken": 329, "de\u011fi\u015ftirme": 329, "i\u0307kinci": 330, "derece": 330, "program": 330, "i\u00e7": [330, 334, 337], "d\u00f6n\u00fc\u015ft\u00fcr\u00fcc\u00fc": 330, "minim": [331, 332, 336], "\u00f6zde\u011fer": [331, 336], "opt": [331, 332, 333, 336], "edi\u00e7": [331, 332, 333, 336], "references": [331, 332, 333, 335, 336, 338, 340], "bir": 331, "qubo": [331, 332], "yu": 331, "operat\u00f6r": 331, "d\u00f6n\u00fc\u015ft\u00fcrme": 331, "solvingi": 331, "with": [331, 339], "the": [331, 334, 335, 340], "analysis": [331, 338], "of": [331, 339], "grover": 332, "uyarlanabilir": 332, "ara": 332, "kullanarak": [332, 336], "problem": [332, 334, 337], "bul": 332, "de\u011fer": 332, "bulduk": 332, "kontrol": [332, 337], "edi": 332, "admm": 333, "initialization": [333, 335], "example": 333, "klasik": [333, 335], "\u00e7\u00f6z": [333, 335], "parametre": 333, "3": [333, 335], "h": 333, "algoritma": 333, "\u00e7a\u011f\u0131rma": 333, "\u00e7\u00f6z\u00fc\u00e7": 333, "sonu\u00e7": 333, "kuan": [333, 334, 335, 336, 338], "cut": 334, "travelingi": 334, "salesma": 334, "proble": [334, 337], "a\u011f\u0131rl\u0131kl\u0131": 334, "maksim": 334, "kes": 334, "optimizasyo": [334, 337, 338, 341], "yakla\u015f\u0131k": 334, "evrensel": 334, "programla": 334, "uygula": [334, 337], "s\u0131n\u0131f": [334, 337], "brute": 334, "force": 334, "approach": 334, "mappingi": 334, "to": [334, 335], "isingi": [334, 335], "checkingi": 334, "that": 334, "full": 334, "hamiltonian": [334, 335], "gives": 334, "right": 334, "cost": 334, "runningi": [334, 340], "it": 334, "on": 334, "quan": [334, 335], "computer": 334, "vehi\u00e7": 335, "routingi": 335, "giri\u015f": 335, "construct": 335, "qp": 335, "formulation": 335, "classical": [335, 339], "solution": 335, "usingi": [335, 339], "ibm": 335, "ilogu": 335, "cplex": 335, "groundu": 335, "up": 335, "step": 335, "1": 335, "2": 335, "4": 335, "5": 335, "cvar": 336, "de\u011fi\u015fimsel": 336, "optimizasyon": 336, "i\u0307yile\u015ftirme": 336, "portfolio": 336, "vqe": 336, "kullana": 336, "k\u00f6\u015f": 337, "\u00f6rtme": 337, "s\u0131rt": 337, "\u00e7antas": 337, "hamiltonye": 337, "nas\u0131l": 337, "edilir": 337, "s\u0131cak": 338, "ba\u015flang\u0131\u00e7l\u0131": 338, "preliminaries": [338, 340], "relaxingi": 338, "qubos": 338, "qao": [338, 340], "standard\u0131": 338, "warm": 338, "start": 338, "solvers": 339, "models": 339, "cplexsolver": 339, "gurobisolver": 339, "between": 339, "gurobipy": 339, "indicator": 339, "constraints": 339, "appendix": 340, "pul": 340, "efficient": 340, "transpilation": 340, "e\u011fitim": 341}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 56}})