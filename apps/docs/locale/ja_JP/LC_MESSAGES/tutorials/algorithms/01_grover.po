msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-12 15:01+0000\n"
"PO-Revision-Date: 2020-11-16 00:46\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/01_grover.po\n"
"X-Crowdin-File-ID: 9398\n"
"Language: ja_JP\n"

#: ../../tutorials/algorithms/01_grover.ipynb:10
msgid "This page was generated from `tutorials/algorithms/01_grover.ipynb`__."
msgstr "このページは  `tutorials/algorithms/01_grover.ipynb`__ から生成されました。"

#: ../../tutorials/algorithms/01_grover.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_grover.ipynb>`_."
msgstr "`IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/01_grover.ipynb>`_ でインタラクティブに実行します。"

#: ../../tutorials/algorithms/01_grover.ipynb:9
msgid "Grover's Algorithm and Amplitude Amplification"
msgstr "グローバーのアルゴリズムと振幅増幅"

#: ../../tutorials/algorithms/01_grover.ipynb:11
#, python-format
msgid "Grover's algorithm is one of the most famous quantum algorithms introduced by Lov Grover in 1996 `1 <L.%20K.%20Grover,%20A%20fast%20quantum%20mechanical%20algorithm%20for%20database%20search.%20Proceedings%2028th%20Annual%20Symposium%20on>`__. It has initially been proposed for unstructured search problems, i.e. for finding a marked element in a unstructured database. However, Grover's algorithm is now a subroutine to several other algorithms, such as Grover Adaptive Search `2 <A.%20Gilliam,%20S.%20Woerner,%20C.%20Gonciulea,%20Grover%20Adaptive%20Search%20for%20Constrained%20Polynomial%20Binary%20Optimization.>`__. For the details of Grover's algorithm, please see `Grover's Algorithm <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ in the Qiskit textbook."
msgstr "グローバーのアルゴリズムは、1996年にロブ・グローバーによって導入された最も有名な量子アルゴリズムの1つです [1] 。これは当初、非構造化検索の問題、つまり非構造化データベースでマークされた要素を見つけるために提案されました。ただし、グローバーのアルゴリズムは、グローバー適応検索 [2] などの他のいくつかのアルゴリズムのサブルーチンになりました。グローバーのアルゴリズムの詳細については、Qiskitの教科書の `グローバーのアルゴリズム <https://qiskit.org/textbook/ch-algorithms/grover.html>`__ を参照してください。"

#: ../../tutorials/algorithms/01_grover.ipynb:14
msgid "Qiskit implements Grover's algorithm in the ``Grover`` class. This class also includes the generalized version, Amplitude Amplification [3], and allows setting individual iterations and other meta-settings to Grover's algorithm."
msgstr "Qiskitは、 ``Grover`` クラスにGroverのアルゴリズムを実装します。 このクラスには、一般化されたバージョンである振幅増幅 [3] も含まれており、個々の反復やその他のメタ設定をグローバーのアルゴリズムに設定できます。"

#: ../../tutorials/algorithms/01_grover.ipynb:16
#: ../../tutorials/algorithms/01_grover.ipynb:866
msgid "**References:**"
msgstr "**参考文献：**"

#: ../../tutorials/algorithms/01_grover.ipynb:18
msgid "the Theory of Computing (STOC) 1996, pp. 212-219."
msgstr "the Theory of Computing (STOC) 1996, pp. 212-219."

#: ../../tutorials/algorithms/01_grover.ipynb:20
msgid "https://arxiv.org/abs/1912.04088"
msgstr "https://arxiv.org/abs/1912.04088"

#: ../../tutorials/algorithms/01_grover.ipynb:22
msgid "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"
msgstr "[3]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000). Quantum Amplitude Amplification and Estimation. http://arxiv.org/abs/quant-ph/0005055"

#: ../../tutorials/algorithms/01_grover.ipynb:34
msgid "Grover's algorithm"
msgstr "グローバーのアルゴリズム"

#: ../../tutorials/algorithms/01_grover.ipynb:36
msgid "Grover's algorithm uses the Grover operator :math:`\\mathcal{Q}` to amplify the amplitudes of the good states:"
msgstr "グローバーのアルゴリズムは、グローバー演算子 :math:`\\mathcal{Q}` を使用して、良好な状態の振幅を増幅します。"

#: ../../tutorials/algorithms/01_grover.ipynb:38
msgid "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"
msgstr "\\mathcal{Q} = \\mathcal{A}\\mathcal{S_0}\\mathcal{A}^\\dagger \\mathcal{S_f}"

#: ../../tutorials/algorithms/01_grover.ipynb:43
msgid "Here, \\* :math:`\\mathcal{A}` is the initial search state for the algorithm, which is just Hadamards, :math:`H^{\\otimes n}` for the textbook Grover search, but can be more elaborate for Amplitude Amplification \\* :math:`\\mathcal{S_0}` is the reflection about the all 0 state"
msgstr "ここでは、　・ :math:`\\mathcal{A}` は、アルゴリズムの初期検索状態です。これは、アダマール、教科書のグローバー検索の場合は :math:`H^{\\otimes n}` ですが、振幅増幅の場合はさらに複雑になる可能性があります。　・ :math:`\\mathcal{S_0}` は、すべて0の状態に関する反映です。"

#: ../../tutorials/algorithms/01_grover.ipynb:45
msgid "      |x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}\n\n"
"\\* :math:`\\mathcal{S_f}` is the oracle that applies"
msgstr "|x\\rangle \\mapsto \\begin{cases} -|x\\rangle, &x \\neq 0 \\\\ |x\\rangle, &x = 0\\end{cases}\n\n"
"\\* :math:`\\mathcal{S_f}` は次を適用したオラクルです。"

#: ../../tutorials/algorithms/01_grover.ipynb:52
msgid " |x\\rangle \\mapsto (-1)^{f(x)}|x\\rangle\n\n"
"where :math:`f(x)` is 1 if :math:`x` is a good state and otherwise 0."
msgstr "ここで、 :math:`x` が良好な状態の場合、 :math:`f(x)` は1であり、それ以外の場合は0です。"

#: ../../tutorials/algorithms/01_grover.ipynb:59
msgid "In a nutshell, Grover's algorithm applies different powers of :math:`\\mathcal{Q}` and after each execution checks whether a good solution has been found."
msgstr "一言で言えば、グローバーのアルゴリズムは異なる :math:`\\mathcal{Q}` の累乗を適用し、各実行後に適切な解が見つかったかどうかをチェックします。"

#: ../../tutorials/algorithms/01_grover.ipynb:62
msgid "Running Grover's algorithm"
msgstr "グローバーのアルゴリズムの実行"

#: ../../tutorials/algorithms/01_grover.ipynb:64
msgid "To run Grover's algorithm with the ``Grover`` class, firstly, we need to specify an oracle for the circuit of Grover's algorithm. In the following example, we use ``QuantumCircuit`` as the oracle of Grover's algorithm. However, there are several other class that we can use as the oracle of Grover's algorithm. We talk about them later in this tutorial."
msgstr "``Grover`` クラスでGroverのアルゴリズムを実行するには、まず、Groverのアルゴリズムの回路にオラクルを指定する必要があります。次の例では、グローバーのアルゴリズムのオラクルとして ``QuantumCircuit`` を使用しています。 ただし、グローバーのアルゴリズムのオラクルとして使用できるクラスは他にもいくつかあります。 これらについては、このチュートリアルの後半で説明します。"

#: ../../tutorials/algorithms/01_grover.ipynb:66
msgid "Note that the oracle for ``Grover`` mush be a *phase-flip* oracle. That is, it multiplies the amplitudes of the of \"good states\" by a factor of :math:`-1`. We explain later how to convert a *bit-flip* oracle to a phase-flip oracle."
msgstr "``Grover`` マッシュのオラクルは *フェーズフリップ* オラクルであることに注意してください。 つまり、「良好な状態」の振幅に :math:`-1` の係数を掛けます。 *ビットフリップ* オラクルをフェーズフリップオラクルに変換する方法については、後で説明します。"

#: ../../tutorials/algorithms/01_grover.ipynb:128
msgid "Then, we specify a backend and call the ``run`` method of ``Grover`` with a backend to execute the circuits. The returned result type is a ``GroverResult``."
msgstr "次に、バックエンドを指定し、バックエンドを使用して ``Grover`` の ``run`` メソッドを呼び出して回路を実行します。 返される結果タイプは ``GroverResult`` です。"

#: ../../tutorials/algorithms/01_grover.ipynb:130
msgid "If the search was successful, the ``oracle_evaluation`` attribute of the result will be ``True``. In this case, the most sampled measurement, ``top_measurement``, is one of the \"good states\". Otherwise, ``oracle_evaluation`` will be False."
msgstr "検索が成功した場合、結果の ``oracle_evaluation`` 属性はTrueになります。この場合、最もサンプリングされた測定値 ``top_measurement`` は、「良好な状態」の1つです。 それ以外の場合、 ``oracle_evaluation`` はFalseになります。"

#: ../../tutorials/algorithms/01_grover.ipynb:184
msgid "In the example, the result of ``top_measurement`` is ``11`` which is one of \"good state\". Thus, we succeeded to find the answer by using ``Grover``."
msgstr "この例では、 ``top_measurement`` の結果は11であり、これは「良好な状態」の1つです。したがって、 ``Grover`` を使用して答えを見つけることに成功しました。"

#: ../../tutorials/algorithms/01_grover.ipynb:196
msgid "Using the different types of classes as the oracle of ``Grover``"
msgstr "``Grover`` のオラクルとしてさまざまなタイプのクラスを使用する"

#: ../../tutorials/algorithms/01_grover.ipynb:198
msgid "In the above example, we used ``QuantumCircuit`` as the oracle of ``Grover``. However, we can also use ``qiskit.aqua.components.oracles.Oracle``, and ``qiskit.quantum_info.Statevector`` as oracles. All the following examples are when :math:`|11\\rangle` is \"good state\""
msgstr "上記の例では、 ``Grover`` のオラクルとして ``QuantumCircuit`` を使用しました。しかしながら、 ``qiskit.aqua.components.oracles.Oracle`` および ``qiskit.quantum_info.Statevector`` をオラクルとして使用することもできます。以下のすべての例は、 :math:`|11\\rangle` が「良好な状態」の場合です。"

#: ../../tutorials/algorithms/01_grover.ipynb:252
msgid "Internally, the statevector get's mapped to a quantum circuit:"
msgstr "内部的には、状態ベクトルが量子回路にマッピングされます。"

#: ../../tutorials/algorithms/01_grover.ipynb:300
msgid "The ``Oracle`` components in Qiskit Aqua allow for an easy construction of more complex oracles. The ``Oracle`` type has the interesting subclasses: \\* ``LogicalExpressionOracle``: for parsing logical expressions such as ``'~a | b'``. This is expecially useful for solving 3-SAT problems (see `Using Grover's Algorithm to Perform Quantum Search <https://github.com/qiskit-community/qiskit-community-tutorials/blob/master/optimization/grover.ipynb>`__ in Qiskit-community-tutorials). \\* ``TrutheTableOracle``: for converting binary truth tables to circuits"
msgstr "Qiskit Aquaの ``Oracle`` コンポーネントを使用すると、より複雑なオラクルを簡単に構築できます。 ``Oracle`` タイプには、興味深いサブクラスがあります。　・ ``LogicalExpressionOracle`` ： ``'~a | b'`` などの論理式を解析するためのものです。これは、3-SAT問題を解決するのに特に役立ちます（ `Qiskit-community-tutorialsでグローバーのアルゴリズムを使用して量子検索を実行する <https://github.com/qiskit-community/qiskit-community-tutorials/blob/master/optimization/grover.ipynb>`__ を参照）。　・ ``TrutheTableOracle`` ：バイナリ真理値表を回路に変換するためのものです。"

#: ../../tutorials/algorithms/01_grover.ipynb:303
msgid "Here we'll use the ``LogicalExpressionOracle`` for the simple example of finding the state :math:`|11\\rangle`, which corresponds to ``'a & b'``."
msgstr "ここでは、 ``LogicalExpressionOracle`` を使用して、 ``'a & b'`` に対応する状態 :math:`|11\\rangle` を見つける簡単な例を示します。"

#: ../../tutorials/algorithms/01_grover.ipynb:361
msgid "You can observe, that this oracle is actually implemented with three qubits instead of two!"
msgstr "このオラクルは実際には2量子ビットではなく3量子ビットで実装されていることがわかります。"

#: ../../tutorials/algorithms/01_grover.ipynb:363
msgid "That is because the ``LogicalExpressionOracle`` is not a phase-flip oracle (which flips the phase of the good state) but a bit-flip oracle. This means it flips the state of an auxiliary qubit if the other qubits satisfy the condition. For Grover's algorithm, however, we require a phase-flip oracle. To convert the bit-flip oracle to a phase-flip oracle we sandwhich the controlled-NOT by :math:`X` and :math:`H` gates, as you can see in the circuit above."
msgstr "これは、 ``LogicalExpressionOracle`` がフェーズフリップオラクル（良好な状態のフェーズをフリップする）ではなく、ビットフリップオラクルであるためです。これは、他の量子ビットが条件を満たす場合、補助量子ビットの状態を反転することを意味します。ただし、グローバーのアルゴリズムでは、位相反転オラクルが必要です。ビットフリップオラクルをフェーズフリップオラクルに変換するために、上記の回路でわかるように、 :math:`X` および :math:`H` ゲートによって制御されたものではありません。"

#: ../../tutorials/algorithms/01_grover.ipynb:365
msgid "**Note:** This transformation from a bit-flip to a phase-flip oracle holds generally and you can use this to convert your oracle to the right representation."
msgstr "**注記：** ビットフリップからフェーズフリップのオラクルへのこの変換は一般的なものである、これを使用してオラクルを正しい表現に変換できます。"

#: ../../tutorials/algorithms/01_grover.ipynb:377
msgid "Amplitude amplification"
msgstr "振幅増幅"

#: ../../tutorials/algorithms/01_grover.ipynb:379
msgid "Grover's algorithm uses Hadamard gates to create the uniform superposition of all the states at the beginning of the Grover operator :math:`\\mathcal{Q}`. If some information on the good states is available, it might be useful to not start in a uniform superposition but only initialize specific states. This, generalized, version of Grover's algorithm is referred to *Amplitude Amplification*."
msgstr "グローバーのアルゴリズムは、アダマールゲートを使用して、グローバー演算子 :math:`\\mathcal{Q}` の先頭にあるすべての状態の均一な重ね合わせを作成します。 良好な状態に関する情報が利用できる場合は、均一な重ね合わせから開始せず、特定の状態のみを初期化すると便利な場合があります。 この一般化されたバージョンのグローバーのアルゴリズムは、 *振幅増幅（Amplitude Amplification）* と呼ばれます。"

#: ../../tutorials/algorithms/01_grover.ipynb:381
msgid "In Qiskit, the initial superposition state can easily be adjusted by setting the ``state_preparation`` argument."
msgstr "Qiskitでは、 ``state_preparation`` 引数を設定することで、初期の重ね合わせ状態を簡単に調整できます。"

#: ../../tutorials/algorithms/01_grover.ipynb:384
msgid "State preparation"
msgstr "状態の準備（State preparation）"

#: ../../tutorials/algorithms/01_grover.ipynb:386
msgid "A ``state_preparation`` argument is used to specify a quantum circuit that prepares a quantum state for the start point of the amplitude amplification. By default, a circuit with $H^{:nbsphinx-math:`\\otimes `n} $ is used to prepare uniform superposition (so it will be Grover's serach). The diffusion circuit of the amplitude amplification relrects ``state_preparation`` automatically."
msgstr "``state_preparation`` 引数は、振幅増幅の開始点の量子状態を準備する量子回路を指定するために使用されます。デフォルトでは、 $H^{:nbsphinx-math:`\\otimes `n} $ の回路を使用して、均一な重ね合わせを準備します（したがって、Groverの検索になります）。 振幅増幅の拡散回路は、 ``state_preparation`` を自動的に反映します。"

#: ../../tutorials/algorithms/01_grover.ipynb:495
msgid "Full flexibility"
msgstr "完全な柔軟性"

#: ../../tutorials/algorithms/01_grover.ipynb:497
msgid "For more advanced use, it is also possible to specify the entire Grover operator by setting the ``grover_operator`` argument. This might be useful if you know more efficient implementation for :math:`\\mathcal{Q}` than the default construction via zero reflection, oracle and state preparation."
msgstr "より高度な使用法として、 ``grover_operator`` 引数を設定することにより、グローバー演算子全体を指定することもできます。 これは、ゼロリフレクション、オラクル、および状態の準備によるデフォルトの構築よりも :math:`\\mathcal{Q}` のより効率的な実装を知っている場合に役立つ可能性があります。"

#: ../../tutorials/algorithms/01_grover.ipynb:499
msgid "The ``qiskit.circuit.library.GroverOperator`` can be a good starting point and offers more options for an automated construction of the Grover operator. You can for instance \\* set the ``mcx_mode`` \\* ignore qubits in the zero reflection by setting ``reflection_qubits`` \\* explicitly exchange the :math:`\\mathcal{S_f}, \\mathcal{S_0}` and :math:`\\mathcal{A}` operations using the ``oracle``, ``zero_reflection`` and ``state_preparation`` arguments"
msgstr "``qiskit.circuit.library.GroverOperator`` は良い出発点であり、Groverオペレーターの自動構築のためのより多くのオプションを提供します。 あなたは例えば次のようにすることができます。　・mcx_modeを設定します。　・ ``Reflection_qubits`` を設定して、ゼロ反射の量子ビットを無視します。　・ ``oracle`` 、 ``zero_reflection`` 、 ``state_preparation`` 引数を使用して、 :math:`\\mathcal{S_f} 、 \\mathcal{S_0}` および :math:`\\mathcal{A}` 演算を明示的に交換します。"

#: ../../tutorials/algorithms/01_grover.ipynb:510
msgid "For instance, imagine the good state is a three qubit state :math:`|111\\rangle` but we used 2 additional qubits as auxiliary qubits."
msgstr "たとえば、良好な状態が3量子ビット状態 :math:`|111\\rangle` であると想像してください。ただし、補助量子ビットとして2つの追加量子ビットを使用しました。"

#: ../../tutorials/algorithms/01_grover.ipynb:574
msgid "Then, per default, the Grover operator implements the zero reflection on all five qubits."
msgstr "次に、デフォルトで、グローバー演算子は5つの量子ビットすべてにゼロ反射を実装します。"

#: ../../tutorials/algorithms/01_grover.ipynb:635
msgid "But we know that we only need to consider the first three:"
msgstr "しかし、最初の3つだけを考慮する必要があることはわかっています。"

#: ../../tutorials/algorithms/01_grover.ipynb:697
msgid "Dive into other arguments of ``Grover``"
msgstr "グローバーの他の引数に飛び込む"

#: ../../tutorials/algorithms/01_grover.ipynb:699
msgid "``Grover`` has arugments other than ``oracle`` and ``state_preparation``. We will explain them in this section."
msgstr "``Grover`` には、 ``oracle`` と ``state_preparation`` 以外の引数があります。 このセクションではそれらについて説明します。"

#: ../../tutorials/algorithms/01_grover.ipynb:702
msgid "Specifying ``good_state``"
msgstr "``good_state`` の指定"

#: ../../tutorials/algorithms/01_grover.ipynb:704
msgid "``good_state`` is used to check whether the measument result is correct or not internally. It can be a list of binary strings, a list of integer, ``Statevector``, and Callable. If the input is a list of bitstrings, each bitstrings in the list represents a good state. If the input is a list of integer, each integer represent the index of the good state to be :math:`|1\\rangle`. If it is a ``Statevector``, it represents a superposition of all good states."
msgstr "``good_state`` は、測定結果が内部的に正しいかどうかを確認するために使用されます。バイナリ文字列のリスト、整数、 ``Statevector`` 、およびCallableのリストにすることができます。入力がビット文字列のリストである場合、リスト内の各ビット文字列は良好な状態を表します。入力が整数のリストである場合、各整数は :math:`|1\\rangle` である良好な状態のインデックスを表します。 それが ``Statevector`` である場合、それはすべての良好な状態の重ね合わせを表します。"

#: ../../tutorials/algorithms/01_grover.ipynb:858
msgid "The number of ``iterations``"
msgstr "``iterations`` の回数"

#: ../../tutorials/algorithms/01_grover.ipynb:860
msgid "The number of repetition of applying the Grover operator is important to obtain the correct result with Grover's algorithm. The number of iteration can be set by the ``iteration`` argument of ``Grover``. The following inputs are supported: \\* an integer to specify a single power of the Grover operator that's applied \\* or a list of integers, in which all these different powers of the Grover operator are run consecutively and after each time we check if a correct solution has been found"
msgstr "グローバーのアルゴリズムで正しい結果を得るには、グローバー演算子の適用の繰り返し回数が重要です。 反復回数は、 ``Grover`` の ``iteration`` 引数で設定できます。 次の入力がサポートされています。　・適用されるグローバー演算子の1乗を指定する整数　・または整数のリスト。グローバー演算子のこれらのさまざまな累乗がすべて連続して実行され、毎回正しい解が見つかったかどうかを確認します。"

#: ../../tutorials/algorithms/01_grover.ipynb:862
msgid "Additionally there is the ``sample_from_iterations`` argument. When it is ``True``, instead of the specific power in ``iterations``, a random integer between 0 and the value in ``iteration`` is used as the power Grover's operator. This approach is useful when we don't even know the number of solution."
msgstr "さらに、 ``sample_from_iterations`` 引数があります。 ``True`` の場合、 ``iterations`` の特定の累乗の代わりに、0と ``iteration`` の値の間のランダムな整数が累乗グローバーの演算子として使用されます。 このアプローチは、ソリューションの数さえわからない場合に役立ちます。"

#: ../../tutorials/algorithms/01_grover.ipynb:864
msgid "For more details of the algorithm using ``sample_from_iterations``, see [4]."
msgstr "``sample_from_iterations`` を使用したアルゴリズムの詳細については、[4]を参照してください。"

#: ../../tutorials/algorithms/01_grover.ipynb:868
msgid "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"
msgstr "[4]: Boyer et al., Tight bounds on quantum searching `arxiv:quant-ph/9605034 <https://arxiv.org/abs/quant-ph/9605034>`__"

#: ../../tutorials/algorithms/01_grover.ipynb:918
msgid "When the number of solutions is known, we can also use a static method ``optimal_num_iterations`` to find the optimal number of iterations. Note that the output iterations is an approximate value. When the number of qubits is small, the output iterations may not be optimal."
msgstr "解の数がわかっている場合は、静的メソッド ``optimal_num_iterations`` を使用して、最適な反復回数を見つけることもできます。出力の反復は概算値であることに注意してください。量子ビットの数が少ない場合、出力の反復が最適でない場合があります。"

#: ../../tutorials/algorithms/01_grover.ipynb:961
msgid "Applying ``post_processing``"
msgstr "``post_processing`` を適用する"

#: ../../tutorials/algorithms/01_grover.ipynb:963
msgid "We can apply an optional post processing to the top measurement for ease of readability. It can be used e.g. to convert from the bit-representation of the measurement ``[1, 0, 1]`` to a DIMACS CNF format ``[1, -2, 3]``."
msgstr "オプションの後処理を上部の測定に適用して、読みやすくすることができます。これは、測定値のビット表現 ``[1, 0, 1]`` からDIMACS CNF形式 ``[1, -2, 3]`` に変換するための例として使用できます。"

